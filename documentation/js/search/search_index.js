var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.832,1,2.354]],["body/controllers/AppController.html",[0,3.258,1,4.187,2,2.777,3,0.324,4,0.324,5,0.242,6,4.479,7,0.324,8,2.646,9,5.755,10,0.88,11,0.024,12,0.553,13,5.271,14,2.255,15,0.537,16,0.431,17,1.652,18,3.734,19,4.479,20,0.324,21,0.353,22,3.568,23,1.555,24,2.114,25,5.271,26,0.017,27,0.02,28,0.017]],["title/modules/AppModule.html",[29,1.59,30,2.354]],["body/modules/AppModule.html",[1,3.896,2,2.718,3,0.242,4,0.242,5,0.181,11,0.024,15,0.342,16,0.49,17,1.234,18,3.701,19,3.346,20,0.242,21,0.264,22,2.666,23,1.161,26,0.013,27,0.017,28,0.013,29,2.632,30,4.712,31,2.074,32,2.074,33,2.433,34,2.433,35,2.074,36,3.557,37,2.433,38,3.346,39,3.346,40,3.346,41,3.701,42,3.543,43,4.021,44,3.189,45,2.433,46,2.24,47,3.937,48,4.586,49,3.937,50,5.16,51,3.937,52,2.956,53,2.91,54,2.433,55,2.24,56,2.433,57,2.956,58,2.36,59,2.074,60,3.937,61,5.16,62,2.956,63,2.956,64,3.937,65,3.937,66,5.16,67,3.937,68,2.935,69,3.346,70,4.385,71,3.937,72,3.346,73,3.493,74,3.937,75,5.16,76,2.956,77,3.937,78,4.385,79,5.16,80,2.935,81,3.937,82,3.937,83,3.937,84,1.412,85,3.937,86,3.937,87,3.937,88,1.269,89,3.937,90,3.937,91,3.937,92,3.937,93,3.937,94,3.346,95,3.346,96,3.346,97,3.937,98,3.937,99,1.092,100,3.346,101,3.937,102,3.937,103,3.937,104,3.937,105,3.937,106,3.937,107,3.937,108,3.937,109,3.937,110,3.937,111,5.16,112,5.16,113,3.937,114,3.937,115,3.346,116,3.937,117,3.937,118,3.937,119,0.752,120,3.937,121,3.937]],["title/injectables/AppService.html",[18,1.978,122,1.488]],["body/injectables/AppService.html",[3,0.33,4,0.33,5,0.246,7,0.33,8,2.674,9,5.788,11,0.024,12,0.563,14,2.296,15,0.542,16,0.374,17,1.682,18,3.556,20,0.33,21,0.36,24,2.153,26,0.018,27,0.021,28,0.018,122,2.674,123,3.316,124,4.561,125,5.366,126,4.03,127,4.561]],["title/controllers/AuthController.html",[0,1.832,128,2.354]],["body/controllers/AuthController.html",[0,1.357,2,1.357,3,0.158,4,0.158,5,0.118,7,0.158,8,1.639,10,1.031,11,0.024,12,0.648,14,2.642,15,0.632,16,0.431,17,0.807,20,0.158,21,0.173,23,1.13,24,2.424,26,0.008,27,0.013,28,0.008,58,1.178,68,1.465,80,3.976,128,2.594,129,2.188,130,2.188,131,2.575,132,1.424,133,3.889,134,3.889,135,4.576,136,4.576,137,3.256,138,3.889,139,4.576,140,3.889,141,3.889,142,3.256,143,2.883,144,5.068,145,5.068,146,6.001,147,5.891,148,2.575,149,2.575,150,3.026,151,2.824,152,0.648,153,2.056,154,3.256,155,2.188,156,4.576,157,3.832,158,2.575,159,4.255,160,2.575,161,4.307,162,4.307,163,3.832,164,2.575,165,2.575,166,3.889,167,3.832,168,2.575,169,2.575,170,3.132,171,3.832,172,2.575,173,2.67,174,2.188,175,2.318,176,2.575,177,4.576,178,2.575,179,2.575,180,1.271,181,3.832,182,2.575,183,2.575,184,3.132,185,3.832,186,2.575,187,0.781,188,3.256,189,5.068,190,5.068,191,5.068,192,3.832,193,2.575,194,2.188,195,2.575,196,4.307,197,5.248,198,2.188,199,2.188,200,2.188,201,2.188,202,2.603,203,2.188,204,3.098,205,5.248,206,1.743,207,2.188,208,2.188,209,2.188,210,2.188,211,1.591,212,1.743,213,2.188,214,2.575,215,1.262,216,2.018,217,2.575,218,2.575,219,3.816,220,2.575,221,2.575,222,5.135,223,2.575,224,1.465,225,2.188,226,0.525,227,2.575,228,1.783,229,4.091,230,2.575,231,2.575,232,2.575,233,5.418,234,2.575,235,2.575,236,2.575,237,4.998,238,4.998,239,2.575,240,2.575,241,2.575,242,2.575,243,2.575,244,2.575,245,4.576,246,2.575,247,2.575,248,2.575,249,2.575,250,2.575,251,2.575,252,2.575,253,2.188,254,2.575,255,2.188,256,2.575,257,2.188,258,2.188,259,2.575,260,2.575,261,2.575,262,2.575,263,2.575]],["title/modules/AuthModule.html",[29,1.59,41,1.978]],["body/modules/AuthModule.html",[2,2.975,3,0.279,4,0.279,5,0.208,11,0.024,16,0.493,17,1.421,20,0.279,21,0.304,24,1.819,26,0.015,27,0.019,28,0.015,29,2.813,31,2.389,32,2.389,33,2.803,34,2.803,35,2.389,36,3.801,37,3.801,41,3.97,42,2.975,44,3.49,45,2.803,46,2.58,48,4.241,52,3.406,53,2.754,54,2.803,55,2.58,56,2.803,57,3.406,58,2.074,59,2.389,78,3.855,128,4.164,175,2.074,202,3.841,203,3.855,206,3.071,211,2.803,264,3.855,265,3.855,266,3.855,267,4.387,268,4.536,269,4.536,270,4.536,271,5.648,272,4.536,273,3.406,274,3.855,275,4.536,276,4.536,277,3.406,278,4.536,279,4.536,280,4.536,281,3.855,282,4.536,283,4.536,284,4.536]],["title/injectables/AuthService.html",[122,1.488,202,1.978]],["body/injectables/AuthService.html",[3,0.098,4,0.098,5,0.073,7,0.098,8,1.121,11,0.024,12,0.587,14,2.267,15,0.599,16,0.432,17,0.498,20,0.098,21,0.106,23,1.508,24,1.051,26,0.005,27,0.009,28,0.005,53,2.092,54,0.981,55,0.903,56,0.981,58,1.198,59,0.837,62,1.192,63,1.192,68,0.903,80,3.725,84,0.367,88,0.644,94,2.227,99,1.199,119,0.303,122,1.121,123,0.981,132,1.334,133,2.227,134,2.227,137,2.842,138,2.227,140,2.227,141,2.842,142,1.35,143,1.903,150,2.674,151,2.613,152,0.587,153,1.817,154,1.35,155,2.227,159,3.869,161,2.842,162,2.842,166,3.298,170,3.022,173,3.35,174,2.227,175,2.337,180,1.419,184,2.654,187,0.875,188,1.35,202,1.49,204,2.264,206,1.075,207,1.35,208,1.35,209,1.35,215,1.284,216,2.693,219,3.753,224,2.208,225,5.161,226,1.205,229,3.941,253,1.35,273,1.192,285,1.35,286,0.408,287,3.13,288,3.345,289,2.62,290,2.62,291,1.192,292,2.914,293,3.345,294,3.881,295,4.89,296,3.298,297,2.62,298,3.881,299,1.588,300,4.637,301,1.967,302,2.227,303,1.588,304,5.915,305,1.588,306,2.62,307,1.588,308,1.588,309,1.588,310,1.588,311,2.62,312,3.881,313,1.588,314,2.62,315,1.588,316,3.881,317,3.881,318,1.588,319,0.367,320,0.837,321,2.62,322,2.62,323,4.155,324,4.155,325,3.838,326,3.65,327,1.35,328,1.192,329,0.39,330,1.588,331,2.62,332,1.588,333,1.35,334,1.588,335,1.35,336,1.35,337,1.075,338,1.35,339,1.35,340,1.774,341,3.929,342,3.471,343,1.619,344,1.35,345,1.192,346,4.291,347,1.588,348,3.345,349,3.414,350,2.62,351,1.588,352,2.62,353,2.62,354,3.65,355,3.65,356,3.225,357,4.098,358,3.298,359,3.298,360,3.298,361,3.298,362,2.62,363,3.881,364,1.588,365,2.62,366,1.588,367,1.588,368,1.588,369,1.588,370,4.295,371,1.588,372,2.62,373,2.62,374,1.588,375,2.62,376,2.62,377,1.588,378,4.807,379,1.619,380,1.774,381,1.588,382,2.227,383,1.588,384,1.376,385,1.588,386,1.588,387,1.35,388,1.35,389,1.588,390,1.588,391,1.588,392,4.344,393,5.219,394,1.588,395,4.866,396,1.588,397,1.588,398,1.588,399,1.588,400,1.588,401,3.65,402,2.62,403,1.588,404,1.588,405,2.842,406,1.588,407,1.588,408,2.511,409,1.588,410,1.621,411,1.649,412,2.62,413,3.881,414,2.227,415,2.62,416,1.588,417,4.623,418,4.295,419,4.623,420,3.298,421,3.345,422,3.345,423,3.345,424,2.62,425,1.588,426,1.588,427,4.89,428,2.62,429,1.588,430,1.588,431,1.588,432,1.588,433,1.588,434,1.588,435,1.588,436,1.588,437,1.588,438,2.62,439,1.192,440,0.874,441,3.881,442,1.588,443,0.303,444,2.62,445,4.295,446,2.62,447,2.62,448,1.145,449,2.62,450,2.62,451,3.345,452,4.344,453,1.35,454,1.588,455,3.881,456,3.881,457,3.881,458,1.588,459,0.498,460,1.35,461,1.35,462,1.588,463,1.588,464,1.588,465,1.588,466,3.345,467,1.588,468,2.62,469,3.929,470,1.35,471,2.62,472,2.62,473,4.623,474,2.62,475,2.62,476,1.588,477,1.192,478,1.588,479,1.588,480,3.65,481,2.842,482,3.65,483,4.155,484,1.588,485,1.588,486,1.588,487,2.62,488,2.62,489,1.588,490,0.728,491,1.588,492,1.588,493,2.62,494,1.588,495,1.588,496,1.588,497,1.588,498,1.588,499,1.588,500,1.588,501,1.35,502,1.588,503,1.588,504,2.62,505,1.588,506,2.62,507,1.588,508,1.588,509,1.588,510,1.588,511,1.588,512,1.588,513,1.588,514,1.588,515,1.588,516,1.588,517,1.588,518,1.588,519,1.588,520,1.588,521,1.588,522,1.588,523,1.588,524,1.588,525,1.588,526,1.588,527,1.588,528,2.62,529,3.298,530,1.588,531,1.588,532,1.588,533,1.588,534,1.588,535,1.588,536,1.588,537,1.588,538,1.588,539,1.588,540,1.588,541,1.35,542,1.588,543,1.35,544,1.588,545,1.588,546,1.35,547,1.588,548,1.35,549,0.39,550,2.62,551,1.588,552,1.588,553,1.588]],["title/modules/ConfigModule.html",[29,1.59,42,1.832]],["body/modules/ConfigModule.html",[3,0.319,4,0.319,5,0.238,11,0.024,16,0.427,17,1.623,20,0.319,21,0.347,26,0.017,27,0.02,28,0.017,29,2.98,31,2.728,32,2.728,33,3.2,34,3.2,35,2.728,36,3.783,37,4.027,42,3.62,44,3.783,45,3.2,46,2.946,53,3.051,99,0.926,115,4.401,554,4.401,555,4.401,556,5.179,557,5.179,558,5.179]],["title/classes/ConfigService.html",[21,0.233,53,1.488]],["body/classes/ConfigService.html",[3,0.277,4,0.277,5,0.258,7,0.277,8,2.404,11,0.024,12,0.673,14,1.925,15,0.593,16,0.427,17,1.41,20,0.277,21,0.302,23,1.987,24,1.804,26,0.015,27,0.018,28,0.015,53,2.404,96,3.823,99,1.004,132,1.249,150,2.204,151,2.057,152,0.673,153,1.498,215,3.002,216,3.228,286,0.875,287,4.561,319,1.04,320,2.37,349,3.228,379,2.78,559,0.804,560,3.823,561,6.127,562,5.619,563,3.823,564,4.498,565,5.619,566,5.619,567,4.498,568,1.176,569,4.498,570,4.498,571,4.498,572,4.498,573,4.498,574,4.498,575,5.619,576,4.498,577,4.498,578,4.498,579,4.498,580,5.619,581,4.498,582,4.498,583,3.378,584,4.498,585,5.619,586,4.498,587,3.823,588,4.498,589,3.823,590,4.498,591,3.823,592,4.498,593,3.823,594,4.498,595,3.823,596,4.498,597,3.823,598,4.498,599,4.498]],["title/classes/Email.html",[21,0.233,226,0.709]],["body/classes/Email.html",[3,0.158,4,0.158,5,0.118,7,0.282,10,0.846,11,0.024,12,0.531,15,0.593,16,0.267,20,0.405,21,0.442,26,0.008,27,0.013,28,0.008,84,1.684,88,1.632,99,0.46,119,1.32,132,1.483,152,0.617,153,1.275,180,1.407,187,0.524,226,0.78,228,0.759,286,0.596,319,1.638,329,0.633,384,0.633,410,1.324,411,1.324,440,0.46,443,0.491,448,1.349,459,1.2,490,0.714,549,0.633,559,0.46,568,1.324,600,0.806,601,1.803,602,1.89,603,1.576,604,1.588,605,1.464,606,2.573,607,1.697,608,2.573,609,1.812,610,2.573,611,2.573,612,2.271,613,1.588,614,0.806,615,1.324,616,1.349,617,2.269,618,1.433,619,1.275,620,1.433,621,1.275,622,0.857,623,1.523,624,1.843,625,1.523,626,0.857,627,1.275,628,1.324,629,1.275,630,1.2,631,1.433,632,0.672,633,0.806,634,1.001,635,0.806,636,1.275,637,0.806,638,0.759,639,0.857,640,0.857,641,0.806,642,0.857,643,0.857,644,0.672,645,0.857,646,0.857,647,0.857,648,0.857,649,0.857,650,0.714,651,0.714,652,0.714,653,0.714,654,0.714,655,0.714,656,1.803,657,1.063,658,0.857,659,0.857,660,0.672,661,0.857,662,0.942,663,0.759,664,0.759,665,0.806,666,1.13,667,1.13,668,1.13,669,1.349,670,0.857,671,0.857]],["title/classes/GeneralGateway.html",[21,0.233,73,2.354]],["body/classes/GeneralGateway.html",[3,0.245,4,0.245,5,0.183,7,0.245,8,2.224,10,0.665,11,0.024,12,0.667,14,2.224,15,0.345,16,0.444,17,1.247,20,0.245,21,0.267,22,2.695,23,1.961,24,2.321,26,0.013,27,0.017,28,0.013,73,3.518,84,1.201,88,1.278,99,0.929,126,2.989,127,3.383,150,2.835,151,2.646,152,0.667,153,1.927,173,2.738,215,1.951,216,3.438,286,0.809,287,4.418,319,0.92,320,2.097,339,3.383,340,3.518,341,4.917,342,4.345,346,3.902,349,3.231,354,4.416,355,4.416,356,3.902,357,4.606,358,4.416,359,4.416,360,4.416,361,4.416,439,2.989,440,1.096,452,4.416,470,3.383,559,0.712,628,1.603,662,1.604,663,1.533,664,1.533,672,3.383,673,4.416,674,5.786,675,5.786,676,5.786,677,5.197,678,5.197,679,3.981,680,3.438,681,5.197,682,5.197,683,4.416,684,3.981,685,5.786,686,5.197,687,3.981,688,4.416,689,5.197,690,3.981,691,5.197,692,3.383,693,3.981,694,5.197,695,5.197,696,5.197,697,5.197,698,5.197,699,5.197,700,3.981,701,5.197,702,3.981,703,3.981]],["title/interfaces/IJwtPayload.html",[343,2.149,704,2.354]],["body/interfaces/IJwtPayload.html",[3,0.317,4,0.317,5,0.236,7,0.317,11,0.023,15,0.626,20,0.317,26,0.017,27,0.02,28,0.017,152,0.719,153,2.03,224,3.823,226,1.369,286,0.949,343,3.768,440,1.201,443,1.284,603,1.805,704,3.484,705,5.146,706,4.373,707,6.72]],["title/injectables/JwtStrategy.html",[122,1.488,267,2.149]],["body/injectables/JwtStrategy.html",[3,0.263,4,0.263,5,0.196,7,0.263,8,2.326,11,0.024,12,0.57,14,1.826,16,0.481,17,1.337,20,0.263,21,0.286,23,1.603,24,1.712,26,0.014,27,0.018,28,0.014,53,2.891,54,2.638,55,2.428,56,2.638,58,1.952,59,2.248,80,3.402,88,1.049,99,1.162,122,2.326,123,2.638,150,2.663,151,2.486,152,0.57,153,1.81,173,2.248,175,2.735,206,2.889,211,2.638,215,2.663,216,2.248,219,2.638,224,3.092,226,1.108,267,3.359,277,3.205,281,3.627,291,3.205,292,4.728,325,4.992,328,3.205,329,1.049,343,3.891,344,3.627,345,3.205,349,2.863,378,3.205,379,2.638,380,2.889,395,4.883,408,3.205,439,4.491,440,0.763,477,3.205,583,3.205,616,1.259,638,1.259,708,3.627,709,5.436,710,4.268,711,5.436,712,4.268,713,4.268,714,4.268,715,4.268,716,3.627,717,4.268,718,4.268,719,4.268,720,4.268,721,4.268,722,4.268,723,5.436,724,3.627,725,3.627,726,4.268,727,4.268,728,4.268,729,4.268,730,4.268,731,4.268,732,4.268,733,3.627,734,3.627]],["title/classes/Market.html",[21,0.233,615,0.909]],["body/classes/Market.html",[3,0.15,4,0.15,5,0.112,7,0.273,10,0.993,11,0.024,12,0.624,15,0.591,16,0.257,20,0.401,21,0.437,26,0.008,27,0.012,28,0.008,84,1.684,88,1.604,99,0.437,119,1.331,132,1.484,152,0.677,180,1.023,187,0.498,226,0.498,228,0.721,286,0.574,319,1.625,329,0.601,384,0.601,410,1.455,411,1.455,440,0.437,443,0.467,448,1.308,459,1.154,490,0.679,549,0.601,559,0.437,568,0.963,600,0.766,601,1.477,602,1.644,603,1.471,604,1.864,607,1.66,609,1.773,612,2.266,613,1.66,614,0.766,615,1.511,616,1.456,617,2.263,618,1.66,619,1.644,620,1.66,621,1.477,622,1.477,623,1.764,624,1.853,625,1.764,626,1.227,627,1.644,628,1.385,629,1.644,630,1.39,631,1.66,632,0.639,633,0.766,634,0.963,635,0.766,636,1.227,637,0.766,638,0.721,639,0.814,640,0.814,641,0.766,642,0.814,643,0.814,644,0.639,645,0.814,646,0.814,647,0.814,648,0.814,649,0.814,650,0.679,651,0.679,652,0.679,653,0.679,654,0.679,655,0.679,656,1.764,657,1.023,658,0.814,659,0.814,660,0.639,661,0.814,662,0.906,663,0.721,664,0.721,665,0.766,666,1.087,667,1.087,668,1.087,669,1.308,670,0.814,671,0.814,735,2.444,736,2.444,737,2.444,738,2.444,739,2.444,740,2.444,741,2.444,742,2.444,743,2.444]],["title/classes/Membership.html",[21,0.233,655,0.966]],["body/classes/Membership.html",[3,0.161,4,0.161,5,0.12,7,0.284,10,0.77,11,0.024,12,0.484,15,0.588,16,0.27,20,0.406,21,0.443,26,0.009,27,0.013,28,0.009,84,1.684,88,1.636,99,0.467,119,1.322,132,1.482,152,0.571,180,1.075,187,0.532,226,0.532,228,0.77,286,0.603,319,1.642,329,0.642,384,0.642,410,1.333,411,1.333,440,0.467,443,0.499,448,1.361,459,1.213,490,0.725,549,0.642,559,0.467,568,1.011,600,0.818,601,1.814,602,1.9,603,1.64,604,1.445,605,2.202,607,1.599,609,1.798,612,2.273,613,1.599,614,0.818,615,1.333,616,1.361,617,2.27,618,1.445,619,1.289,620,1.445,621,1.289,622,0.869,623,1.536,624,1.848,625,1.536,626,0.869,627,1.289,628,1.333,629,1.289,630,1.213,631,1.445,632,0.682,633,0.818,634,1.011,635,0.818,636,1.289,637,0.818,638,0.77,639,0.869,640,0.869,641,0.818,642,0.869,643,0.869,644,0.682,645,0.869,646,0.869,647,0.869,648,0.869,649,0.869,650,0.725,651,0.725,652,0.725,653,0.725,654,0.725,655,1.075,656,1.814,657,1.417,658,0.869,659,0.869,660,0.682,661,0.869,662,0.952,663,0.77,664,0.77,665,0.818,666,1.142,667,1.142,668,1.142,669,1.361,670,0.869,671,0.869,744,2.61,745,2.61,746,2.61]],["title/classes/Notifications.html",[21,0.233,660,0.909]],["body/classes/Notifications.html",[3,0.16,4,0.16,5,0.119,7,0.284,10,0.769,11,0.024,12,0.483,15,0.588,16,0.269,20,0.406,21,0.443,26,0.009,27,0.013,28,0.009,84,1.683,88,1.657,99,0.465,119,1.322,132,1.482,152,0.598,180,1.073,187,0.531,226,0.531,228,1.359,286,0.601,319,1.642,329,0.64,384,0.64,410,1.332,411,1.332,440,0.465,443,0.497,448,1.359,459,1.211,490,0.723,549,0.64,559,0.465,568,1.01,600,0.816,601,1.534,602,1.697,603,1.511,604,1.443,607,1.597,609,1.847,612,2.273,613,1.597,614,0.816,615,1.49,616,1.359,617,2.27,618,1.443,619,1.286,620,1.443,621,1.286,622,0.867,623,1.534,624,1.847,625,1.534,626,0.867,627,1.286,628,1.332,629,1.286,630,1.211,631,1.443,632,0.681,633,0.816,634,1.01,635,0.816,636,1.286,637,0.816,638,0.768,639,0.867,640,0.867,641,0.816,642,0.867,643,0.867,644,0.681,645,0.867,646,0.867,647,0.867,648,0.867,649,0.867,650,0.723,651,0.723,652,0.723,653,0.723,654,0.723,655,0.723,656,1.812,657,1.073,658,0.867,659,0.867,660,1.01,661,1.534,662,0.95,663,0.768,664,0.768,665,0.816,666,1.14,667,1.14,668,1.14,669,1.359,670,0.867,671,0.867,747,2.604,748,2.604,749,2.604]],["title/classes/Online.html",[21,0.233,662,0.855]],["body/classes/Online.html",[3,0.16,4,0.16,5,0.119,7,0.284,10,0.769,11,0.024,12,0.483,15,0.588,16,0.269,20,0.406,21,0.443,26,0.009,27,0.013,28,0.009,84,1.683,88,1.635,99,0.465,119,1.326,132,1.482,152,0.598,180,1.073,187,0.531,226,0.531,228,0.768,286,0.601,319,1.642,329,0.64,384,0.64,410,1.332,411,1.332,440,0.465,443,0.497,448,1.359,459,1.211,490,0.723,549,0.64,559,0.465,568,1.01,600,0.816,601,1.534,602,1.697,603,1.583,604,1.443,605,1.481,607,1.597,609,1.816,612,2.273,613,1.597,614,0.816,615,1.332,616,1.359,617,2.27,618,1.443,619,1.286,620,1.443,621,1.286,622,0.867,623,1.534,624,1.86,625,1.534,626,0.867,627,1.286,628,1.332,629,1.286,630,1.211,631,1.443,632,0.681,633,0.816,634,1.01,635,0.816,636,1.286,637,0.816,638,0.768,639,0.867,640,0.867,641,0.816,642,0.867,643,0.867,644,0.681,645,0.867,646,0.867,647,0.867,648,0.867,649,0.867,650,0.723,651,0.723,652,0.723,653,0.723,654,0.723,655,0.723,656,1.812,657,1.073,658,0.867,659,0.867,660,0.681,661,0.867,662,1.338,663,1.359,664,1.359,665,0.816,666,1.14,667,1.14,668,1.14,669,1.359,670,0.867,671,0.867,750,2.604,751,2.604,752,2.604]],["title/classes/Password.html",[21,0.233,384,0.855]],["body/classes/Password.html",[3,0.158,4,0.158,5,0.118,7,0.281,10,0.845,11,0.024,12,0.53,15,0.592,16,0.266,20,0.405,21,0.441,26,0.008,27,0.013,28,0.008,84,1.684,88,1.618,99,0.458,119,1.319,132,1.482,152,0.616,153,1.888,180,1.405,187,0.523,226,0.523,228,0.757,286,0.595,319,1.637,329,0.631,384,0.939,410,1.322,411,1.322,440,0.458,443,0.49,448,1.347,459,1.197,490,0.712,549,0.631,559,0.458,568,1.322,600,0.804,601,1.801,602,1.888,603,1.575,604,1.585,605,1.459,607,1.695,609,1.811,612,2.271,613,1.585,614,0.804,615,1.322,616,1.347,617,2.269,618,1.431,619,1.272,620,1.431,621,1.272,622,0.854,623,1.52,624,1.842,625,1.52,626,0.854,627,1.272,628,1.322,629,1.272,630,1.197,631,1.431,632,0.67,633,0.804,634,0.998,635,0.804,636,1.272,637,0.804,638,0.757,639,0.854,640,0.854,641,0.804,642,0.854,643,0.854,644,0.67,645,0.854,646,0.854,647,0.854,648,0.854,649,0.854,650,0.712,651,0.712,652,0.712,653,0.712,654,0.712,655,0.712,656,1.801,657,1.061,658,0.854,659,0.854,660,0.67,661,0.854,662,0.939,663,0.757,664,0.757,665,0.804,666,1.127,667,1.127,668,1.127,669,1.347,670,0.854,671,0.854,753,2.565,754,2.565,755,2.565,756,2.565]],["title/classes/Rank.html",[21,0.233,443,0.664]],["body/classes/Rank.html",[3,0.16,4,0.16,5,0.119,7,0.284,10,0.769,11,0.024,12,0.483,15,0.588,16,0.269,20,0.406,21,0.443,26,0.009,27,0.013,28,0.009,84,1.683,88,1.657,99,0.465,119,1.322,132,1.482,152,0.598,180,1.073,187,0.531,226,0.531,228,0.768,286,0.601,319,1.642,329,0.64,384,0.64,410,1.332,411,1.332,440,0.465,443,0.738,448,1.359,459,1.211,490,0.723,549,0.64,559,0.465,568,1.01,600,0.816,601,1.534,602,1.697,603,1.511,604,1.443,607,1.597,609,1.847,612,2.273,613,1.597,614,0.816,615,1.332,616,1.359,617,2.27,618,1.443,619,1.286,620,1.443,621,1.286,622,0.867,623,1.534,624,1.847,625,1.534,626,0.867,627,1.286,628,1.332,629,1.286,630,1.211,631,1.706,632,0.681,633,0.816,634,1.01,635,0.816,636,1.286,637,0.816,638,0.768,639,0.867,640,0.867,641,0.816,642,0.867,643,0.867,644,0.681,645,0.867,646,0.867,647,0.867,648,0.867,649,0.867,650,0.723,651,0.723,652,0.723,653,0.723,654,0.723,655,0.723,656,1.812,657,1.073,658,1.534,659,1.534,660,0.681,661,0.867,662,0.95,663,0.768,664,0.768,665,0.816,666,1.14,667,1.14,668,1.14,669,1.359,670,0.867,671,0.867,757,2.604,758,2.604,759,2.604]],["title/guards/RankGuard.html",[760,2.611,761,2.611]],["body/guards/RankGuard.html",[3,0.296,4,0.296,5,0.221,7,0.296,8,2.506,11,0.024,12,0.614,14,2.058,15,0.508,16,0.408,17,1.508,20,0.296,21,0.323,22,3.257,23,1.419,24,2.349,26,0.016,27,0.019,28,0.016,76,3.612,84,1.112,122,2.506,150,2.87,151,2.678,152,0.614,153,1.95,173,3.085,215,2.357,349,3.461,382,4.088,408,4.397,443,0.919,609,1.626,673,4.088,761,4.397,762,4.811,763,4.088,764,6.57,765,4.811,766,6.849,767,4.811,768,5.856,769,6.57,770,4.811,771,5.856,772,4.811,773,4.811,774,4.811,775,5.856,776,4.811,777,4.811,778,4.811]],["title/classes/Reactions.html",[21,0.233,632,0.909]],["body/classes/Reactions.html",[3,0.164,4,0.164,5,0.122,7,0.287,10,0.445,11,0.024,12,0.279,15,0.59,16,0.274,20,0.408,21,0.444,26,0.009,27,0.013,28,0.009,84,1.684,88,1.629,99,0.476,119,1.329,132,1.481,152,0.603,180,1.091,187,0.543,226,0.543,228,0.786,286,0.612,319,1.637,329,0.655,384,0.655,410,1.347,411,1.347,440,0.476,443,0.509,448,1.377,459,1.231,490,0.74,549,0.655,559,0.476,568,1.027,600,0.835,601,1.554,602,1.716,603,1.526,604,0.835,607,1.615,609,1.806,612,2.275,613,1.615,614,0.835,615,1.347,616,1.377,617,2.273,618,1.463,619,1.308,620,1.463,621,1.308,622,0.887,623,1.716,624,1.867,625,1.716,626,0.887,627,1.308,628,1.436,629,1.308,630,1.231,631,1.463,632,1.027,633,0.835,634,1.027,635,0.835,636,1.308,637,0.835,638,0.786,639,0.887,640,0.887,641,0.835,642,0.887,643,0.887,644,0.696,645,0.887,646,0.887,647,0.887,648,0.887,649,0.887,650,0.74,651,0.74,652,0.74,653,0.74,654,0.74,655,0.74,656,1.83,657,1.091,658,0.887,659,0.887,660,0.696,661,0.887,662,0.966,663,0.786,664,0.786,665,0.835,666,1.159,667,1.159,668,1.159,669,1.377,670,0.887,671,0.887,779,2.664]],["title/classes/ReactionsDto.html",[21,0.233,780,2.149]],["body/classes/ReactionsDto.html",[3,0.311,4,0.311,5,0.232,7,0.311,10,1.077,11,0.024,12,0.677,15,0.601,16,0.353,20,0.311,21,0.405,23,2.096,26,0.017,27,0.02,28,0.017,152,0.727,286,0.94,559,0.904,780,3.73,781,4.298,782,4.844,783,4.844,784,4.368,785,5.058,786,5.058,787,5.058,788,3.801,789,3.801,790,2.664]],["title/classes/Security.html",[21,0.233,187,0.709]],["body/classes/Security.html",[3,0.153,4,0.153,5,0.114,7,0.276,10,0.971,11,0.024,12,0.61,15,0.584,16,0.26,20,0.403,21,0.439,26,0.008,27,0.012,28,0.008,84,1.683,88,1.622,99,0.444,119,1.337,132,1.484,152,0.653,180,1.036,187,0.76,226,0.506,228,0.733,286,0.581,319,1.645,329,0.611,384,0.611,410,1.301,411,1.301,440,0.444,443,0.475,448,1.321,459,1.56,490,1.244,549,0.611,559,0.444,568,0.975,600,0.779,601,1.491,602,1.658,603,1.482,604,1.821,607,1.56,609,1.799,612,2.267,613,1.56,614,0.779,615,1.301,616,1.321,617,2.265,618,1.404,619,1.242,620,1.404,621,1.242,622,0.827,623,1.491,624,1.896,625,1.491,626,0.827,627,1.242,628,1.301,629,1.242,630,1.169,631,1.404,632,0.649,633,0.779,634,0.975,635,0.779,636,1.242,637,0.779,638,0.733,639,0.827,640,0.827,641,0.779,642,0.827,643,0.827,644,0.649,645,0.827,646,0.827,647,0.827,648,0.827,649,0.827,650,1.244,651,1.244,652,1.244,653,1.244,654,1.244,655,0.69,656,1.777,657,1.036,658,0.827,659,0.827,660,0.649,661,0.827,662,0.917,663,0.733,664,0.733,665,0.779,666,1.1,667,1.1,668,1.1,669,1.321,670,0.827,671,0.827,791,2.485,792,2.485,793,2.485,794,2.485,795,2.485,796,2.485,797,2.485]],["title/classes/SecurityCode.html",[21,0.233,798,2.354]],["body/classes/SecurityCode.html",[3,0.283,4,0.283,5,0.211,7,0.283,10,1.131,11,0.024,12,0.71,15,0.537,16,0.321,20,0.351,21,0.415,23,2.133,26,0.015,27,0.019,28,0.015,119,1.345,143,2.617,152,0.71,187,0.937,286,0.887,440,0.822,490,1.719,559,0.822,650,1.719,651,1.719,652,1.719,653,1.719,654,1.719,788,3.241,789,3.947,790,2.423,798,4.19,799,3.454,800,5.651,801,4.6,802,4.6,803,4.6,804,4.6,805,4.6,806,4.6,807,4.6,808,5.087,809,4.842]],["title/classes/SecurityDto.html",[21,0.233,184,2.149]],["body/classes/SecurityDto.html",[3,0.288,4,0.288,5,0.215,7,0.288,10,1.136,11,0.024,12,0.713,15,0.5,16,0.326,20,0.288,21,0.386,23,2.136,26,0.015,27,0.019,28,0.015,119,1.348,152,0.713,184,3.558,286,0.896,440,1.115,559,0.836,650,1.732,651,1.732,652,1.732,653,1.732,654,1.732,784,3.168,788,3.276,789,3.921,790,2.465,800,5.678,808,5.109,810,3.977,811,4.679,812,4.679,813,4.679,814,4.679,815,4.679,816,4.679]],["title/classes/SecurityUpdateDto.html",[21,0.233,143,1.978]],["body/classes/SecurityUpdateDto.html",[3,0.307,4,0.307,5,0.229,7,0.307,10,0.833,11,0.024,12,0.628,15,0.556,16,0.348,20,0.368,21,0.43,23,2.037,26,0.016,27,0.02,28,0.016,119,1.299,143,3.405,152,0.628,187,1.307,286,0.932,440,1.146,490,1.385,559,0.892,650,1.385,651,1.385,652,1.385,653,1.385,654,1.385,784,3.377,788,3.405,789,4.006,790,2.628,798,4.342,799,3.745,808,5.186,809,5.087,817,4.988,818,4.988]],["title/classes/Sessions.html",[21,0.233,549,0.855]],["body/classes/Sessions.html",[3,0.159,4,0.159,5,0.118,7,0.282,10,0.765,11,0.024,12,0.532,15,0.595,16,0.268,20,0.406,21,0.442,26,0.008,27,0.013,28,0.008,84,1.683,88,1.633,99,0.461,119,1.324,132,1.483,152,0.617,153,1.278,180,1.066,187,0.526,226,0.526,228,0.761,286,0.598,319,1.636,329,0.635,384,0.635,410,1.485,411,1.485,440,0.461,443,0.493,448,1.6,459,1.59,490,0.717,549,0.944,559,0.461,568,1.003,600,0.809,601,1.526,602,1.689,603,1.506,604,1.436,607,1.59,609,1.813,612,2.272,613,1.699,614,0.809,615,1.326,616,1.497,617,2.269,618,1.436,619,1.278,620,1.436,621,1.278,622,0.859,623,1.526,624,1.844,625,1.526,626,0.859,627,1.278,628,1.326,629,1.278,630,1.203,631,1.436,632,0.675,633,0.809,634,1.003,635,0.809,636,1.278,637,0.809,638,0.761,639,0.859,640,0.859,641,0.809,642,0.859,643,0.859,644,0.675,645,0.859,646,0.859,647,0.859,648,0.859,649,0.859,650,0.717,651,0.717,652,0.717,653,0.717,654,0.717,655,0.717,656,1.806,657,1.066,658,0.859,659,0.859,660,0.675,661,0.859,662,0.944,663,0.761,664,0.761,665,0.809,666,1.132,667,1.132,668,1.132,669,1.352,670,0.859,671,0.859,819,2.581,820,2.581,821,2.581,822,2.581]],["title/classes/SignInDto.html",[21,0.233,170,2.149]],["body/classes/SignInDto.html",[3,0.301,4,0.301,5,0.225,7,0.301,10,1.104,11,0.024,12,0.693,15,0.609,16,0.341,20,0.301,21,0.397,23,2.029,26,0.016,27,0.019,28,0.016,119,1.131,132,1.402,152,0.693,170,3.659,226,1.297,286,0.922,384,1.565,410,1.663,411,1.663,559,0.876,788,3.62,789,3.913,790,2.58,823,4.162,824,4.898,825,4.898,826,4.898,827,5.92,828,4.898,829,4.898,830,5.92]],["title/classes/Stats.html",[21,0.233,644,0.909]],["body/classes/Stats.html",[3,0.157,4,0.157,5,0.117,7,0.28,10,0.9,11,0.024,12,0.565,15,0.586,16,0.265,20,0.404,21,0.441,26,0.008,27,0.012,28,0.008,84,1.683,88,1.616,99,0.455,119,1.337,132,1.483,152,0.631,180,1.054,187,0.518,226,0.518,228,0.75,286,0.591,319,1.643,329,0.625,384,0.625,410,1.316,411,1.316,440,0.455,443,0.486,448,1.34,459,1.189,490,0.706,549,0.625,559,0.455,568,0.992,600,0.797,601,1.512,602,1.677,603,1.496,604,1.689,607,1.578,609,1.788,612,2.27,613,1.578,614,0.797,615,1.316,616,1.34,617,2.268,618,1.423,619,1.264,620,1.423,621,1.264,622,0.847,623,1.512,624,1.894,625,1.512,626,0.847,627,1.264,628,1.316,629,1.264,630,1.189,631,1.423,632,0.665,633,0.797,634,0.992,635,0.797,636,1.264,637,0.797,638,0.75,639,0.847,640,0.847,641,0.797,642,0.847,643,0.847,644,0.992,645,1.512,646,1.512,647,1.512,648,1.512,649,1.512,650,0.706,651,0.706,652,0.706,653,0.706,654,0.706,655,0.706,656,1.794,657,1.054,658,0.847,659,0.847,660,0.665,661,0.847,662,0.933,663,0.75,664,0.75,665,0.797,666,1.12,667,1.12,668,1.12,669,1.34,670,0.847,671,0.847,831,2.543,832,2.543,833,2.543,834,2.543,835,2.543]],["title/classes/Suspension.html",[21,0.233,634,0.909]],["body/classes/Suspension.html",[3,0.161,4,0.161,5,0.12,7,0.284,10,0.647,11,0.024,12,0.406,15,0.591,16,0.27,20,0.406,21,0.443,26,0.009,27,0.013,28,0.009,84,1.683,88,1.636,99,0.467,119,1.322,132,1.481,152,0.572,180,1.075,187,0.532,226,0.532,228,0.771,286,0.603,319,1.64,329,0.642,384,0.642,410,1.334,411,1.334,440,0.467,443,0.499,448,1.361,459,1.214,490,0.725,549,0.642,559,0.467,568,1.012,600,0.819,601,1.537,602,1.901,603,1.513,604,1.214,607,1.599,609,1.817,612,2.273,613,1.599,614,0.819,615,1.334,616,1.361,617,2.271,618,1.599,619,1.289,620,1.599,621,1.289,622,0.87,623,1.537,624,1.848,625,1.537,626,0.87,627,1.289,628,1.334,629,1.289,630,1.214,631,1.446,632,0.683,633,0.819,634,1.334,635,1.214,636,1.815,637,1.214,638,1.142,639,1.289,640,1.289,641,1.214,642,1.289,643,1.289,644,0.683,645,0.87,646,0.87,647,0.87,648,0.87,649,0.87,650,0.725,651,0.725,652,0.725,653,0.725,654,0.725,655,0.725,656,1.815,657,1.075,658,0.87,659,0.87,660,0.683,661,0.87,662,0.952,663,0.771,664,0.771,665,0.819,666,1.142,667,1.142,668,1.142,669,1.361,670,0.87,671,0.87,836,2.612,837,2.612]],["title/classes/Transaction.html",[21,0.233,657,0.966]],["body/classes/Transaction.html",[3,0.153,4,0.153,5,0.114,7,0.276,10,0.97,11,0.024,12,0.627,15,0.592,16,0.26,20,0.403,21,0.439,26,0.008,27,0.012,28,0.008,84,1.682,88,1.622,99,0.444,119,1.33,132,1.485,152,0.679,153,1.241,180,1.035,187,0.506,226,0.506,228,0.732,286,0.58,319,1.627,329,0.61,384,0.61,410,1.301,411,1.301,440,0.444,443,0.474,448,1.653,459,1.168,490,0.689,549,0.61,559,0.444,568,0.974,600,0.778,601,1.491,602,1.657,603,1.481,604,1.756,605,1.412,607,1.56,609,1.779,612,2.267,613,1.672,614,0.778,615,1.464,616,1.468,617,2.265,618,1.403,619,1.241,620,1.403,621,1.241,622,0.827,623,1.491,624,1.832,625,1.491,626,0.827,627,1.657,628,1.301,629,1.657,630,1.168,631,1.672,632,0.649,633,0.778,634,0.974,635,0.778,636,1.241,637,0.778,638,0.732,639,0.827,640,0.827,641,0.778,642,0.827,643,0.827,644,0.649,645,0.827,646,0.827,647,0.827,648,0.827,649,0.827,650,0.689,651,0.689,652,0.689,653,0.689,654,0.689,655,0.689,656,1.776,657,1.243,658,0.827,659,0.827,660,0.649,661,0.827,662,0.917,663,0.732,664,0.732,665,0.778,666,1.1,667,1.1,668,1.1,669,1.468,670,1.491,671,1.491,838,2.483,839,2.11,840,2.483,841,2.483,842,2.483,843,2.483,844,2.483,845,2.483,846,2.483]],["title/classes/TransactionBuyer.html",[21,0.233,669,1.026]],["body/classes/TransactionBuyer.html",[3,0.161,4,0.161,5,0.12,7,0.284,10,0.771,11,0.024,12,0.484,15,0.596,16,0.27,20,0.407,21,0.443,26,0.009,27,0.013,28,0.009,84,1.684,88,1.624,99,0.468,119,1.322,132,1.483,152,0.599,180,1.077,187,0.533,226,0.533,228,0.772,286,0.604,319,1.635,329,0.643,384,0.643,410,1.493,411,1.493,440,0.826,443,0.5,448,1.363,459,1.215,490,0.727,549,0.643,559,0.468,568,1.013,600,0.82,601,1.538,602,1.701,603,1.514,604,1.447,607,1.601,609,1.799,612,2.273,613,1.601,614,0.82,615,1.335,616,1.363,617,2.271,618,1.447,619,1.291,620,1.447,621,1.291,622,0.871,623,1.538,624,1.849,625,1.538,626,0.871,627,1.291,628,1.335,629,1.291,630,1.215,631,1.447,632,0.684,633,0.82,634,1.013,635,0.82,636,1.291,637,0.82,638,0.772,639,0.871,640,0.871,641,0.82,642,0.871,643,0.871,644,0.684,645,0.871,646,0.871,647,0.871,648,0.871,649,0.871,650,0.727,651,0.727,652,0.727,653,0.727,654,0.727,655,0.727,656,1.816,657,1.077,658,0.871,659,0.871,660,0.684,661,0.871,662,0.953,663,0.772,664,0.772,665,0.82,666,1.144,667,1.144,668,1.144,669,1.507,670,0.871,671,0.871,847,2.616,848,2.616,849,2.616]],["title/classes/UpdateUserDto.html",[21,0.233,850,2.149]],["body/classes/UpdateUserDto.html",[3,0.304,4,0.304,5,0.227,7,0.304,10,1.067,11,0.024,12,0.67,15,0.598,16,0.345,20,0.304,21,0.399,23,2.088,26,0.016,27,0.02,28,0.016,119,1.137,152,0.67,286,0.927,320,3.365,440,1.142,559,0.883,568,1.67,603,1.653,609,1.653,784,4.03,788,3.634,789,3.86,790,2.604,850,3.679,851,5.635,852,4.2,853,4.942,854,4.942,855,4.942]],["title/controllers/UserController.html",[0,1.832,856,2.354]],["body/controllers/UserController.html",[0,1.415,2,1.415,3,0.165,4,0.165,5,0.273,7,0.165,8,1.691,10,0.996,11,0.024,12,0.625,14,2.551,15,0.627,16,0.463,17,0.842,20,0.165,21,0.18,23,1.384,24,2.454,26,0.009,27,0.013,28,0.009,53,2.007,54,1.66,55,1.528,56,1.66,58,1.228,68,1.528,69,3.359,70,3.986,80,3.872,130,2.282,132,1.175,146,5.837,147,3.986,150,2.825,151,2.797,152,0.605,153,1.92,159,2.676,173,1.415,194,2.282,196,3.986,197,5.72,198,2.282,199,2.282,200,2.282,201,2.282,204,3.175,205,4.9,210,2.282,211,1.66,212,3.502,213,2.282,215,1.316,216,2.471,219,3.563,222,4.685,228,1.626,229,3.502,237,2.282,238,4.685,255,2.282,257,4.396,258,3.986,301,5.054,302,5.535,337,1.818,338,2.282,349,2.082,387,4.396,388,4.396,440,1.093,443,0.513,666,1.166,667,1.166,668,1.166,680,2.471,780,3.684,782,3.522,783,3.522,850,3.684,856,2.676,857,2.282,858,6.686,859,3.986,860,4.69,861,4.69,862,5.173,863,3.986,864,3.986,865,2.686,866,3.953,867,2.686,868,2.686,869,2.686,870,2.686,871,2.686,872,2.686,873,2.686,874,2.686,875,2.686,876,3.953,877,2.686,878,2.686,879,2.686,880,2.686,881,2.282,882,3.953,883,2.686,884,2.686,885,2.686,886,4.69,887,4.69,888,2.686,889,2.282,890,2.282,891,2.282,892,2.282,893,2.282,894,2.686,895,2.686,896,4.69,897,2.282,898,2.282,899,2.686,900,2.686,901,2.686,902,2.686,903,2.686,904,2.686,905,2.686,906,2.686,907,3.953,908,3.953,909,2.686,910,3.359,911,3.953,912,3.953,913,3.953,914,3.953,915,3.953,916,3.953,917,3.953,918,3.953,919,3.953,920,3.953,921,3.953,922,3.953,923,3.953,924,3.359,925,3.953,926,2.017,927,5.173,928,2.686,929,2.686,930,2.686,931,2.686,932,2.686,933,2.017,934,2.686,935,2.686,936,2.686,937,2.686,938,2.686,939,2.686,940,2.686,941,2.686,942,2.686,943,2.686,944,2.686]],["title/classes/UserModel.html",[21,0.233,175,1.59]],["body/classes/UserModel.html",[3,0.163,4,0.163,5,0.121,7,0.286,10,1.154,11,0.024,12,0.727,15,0.589,16,0.324,20,0.163,21,0.177,26,0.009,27,0.013,28,0.009,84,1.602,88,1.67,99,1.112,100,2.249,119,0.747,126,2.936,132,1.487,151,2.126,152,0.727,153,1.302,175,1.788,187,1.209,224,2.922,226,1.241,286,0.609,319,1.542,329,0.651,340,2.647,384,1.459,410,1.342,411,1.342,443,1.133,448,2.031,529,3.323,549,1.498,559,0.473,604,1.717,605,3.538,607,1.982,612,2.139,613,1.457,614,0.829,615,1.592,616,1.153,617,1.717,618,1.909,620,1.909,624,1.086,628,1.342,630,1.225,632,1.592,634,1.551,644,1.551,655,1.426,657,1.522,660,1.551,662,1.459,665,0.829,666,0.781,667,0.781,668,0.781,839,5.575,926,3.492,933,3.492,945,2.249,946,4.657,947,3.492,948,3.952,949,3.952,950,3.952,951,2.646,952,3.91,953,2.646,954,2.646,955,2.646,956,3.91,957,2.646,958,5.136,959,2.646,960,5.136,961,3.91,962,2.646,963,2.646,964,3.91,965,3.323,966,5.136,967,3.91,968,3.91,969,3.91,970,3.91,971,3.91,972,3.91,973,2.646,974,2.646,975,2.646,976,3.91,977,2.646,978,2.646,979,2.646,980,2.646,981,2.646,982,2.646,983,3.91,984,3.91,985,2.646,986,2.646,987,2.646,988,2.646,989,2.646,990,3.91,991,2.646,992,3.91,993,5.48,994,2.646,995,2.646,996,2.249,997,5.136]],["title/modules/UserModule.html",[29,1.59,43,2.149]],["body/modules/UserModule.html",[2,3.077,3,0.295,4,0.295,5,0.22,11,0.024,16,0.483,17,1.501,20,0.295,21,0.321,26,0.016,27,0.019,28,0.016,29,2.882,31,2.523,32,2.523,33,2.96,34,2.96,35,2.523,36,3.894,37,3.894,41,3.892,42,3.604,43,4.399,44,3.609,45,2.96,46,2.725,48,4.386,52,3.596,57,3.596,58,2.19,59,2.523,72,4.07,175,2.19,274,4.07,680,3.765,856,4.266,891,4.07,998,4.07,999,4.79,1000,4.07,1001,4.07,1002,4.79,1003,4.79,1004,4.07]],["title/injectables/UserService.html",[122,1.488,680,1.832]],["body/injectables/UserService.html",[3,0.122,4,0.122,5,0.091,7,0.122,8,1.342,11,0.024,12,0.614,14,2.377,15,0.607,16,0.387,17,0.621,20,0.122,21,0.133,23,1.42,24,2.053,26,0.007,27,0.01,28,0.007,58,1.434,59,1.045,68,1.128,80,3.816,84,0.458,95,4.09,99,1.199,119,0.379,122,1.342,123,1.226,132,1.373,150,2.723,151,2.733,152,0.706,153,1.85,159,4.317,173,3.778,175,2.34,187,0.404,204,2.632,215,1.536,216,2.696,219,3.86,224,2.212,229,2.632,286,0.488,287,3.464,291,1.489,292,3.318,296,3.755,300,5.308,301,4.172,319,0.458,320,2.536,323,4.09,324,4.978,325,3.318,326,2.664,327,3.755,328,1.489,329,0.488,337,1.343,345,1.489,346,3.614,349,2.048,378,2.354,379,1.226,380,1.343,392,4.722,393,5.549,395,4.934,410,0.518,411,0.518,414,1.685,420,4.555,440,1.068,443,0.743,453,1.685,460,1.685,461,1.685,469,2.664,477,2.92,480,3.755,481,1.685,482,5.079,483,4.722,501,4.555,541,2.664,546,4.722,548,1.685,549,0.771,563,2.664,568,1.155,583,4.024,603,0.551,609,0.551,615,0.819,624,0.551,628,0.518,632,1.258,633,1.218,634,0.518,635,1.679,637,0.621,641,1.385,644,1.155,660,0.518,662,1.366,663,0.585,664,0.585,680,1.652,724,1.685,733,3.304,780,3.163,782,4.564,783,4.564,850,3.312,859,2.664,863,2.664,864,3.304,881,1.685,892,1.685,893,1.685,898,1.685,924,3.304,926,4.024,933,3.843,946,3.304,947,2.354,948,3.304,949,2.664,950,2.664,965,3.304,996,1.685,1004,1.685,1005,1.685,1006,3.135,1007,3.888,1008,4.419,1009,3.888,1010,3.135,1011,3.135,1012,1.983,1013,3.135,1014,1.983,1015,1.983,1016,1.983,1017,1.983,1018,3.135,1019,1.983,1020,1.983,1021,1.983,1022,1.983,1023,6.571,1024,5.117,1025,1.983,1026,1.983,1027,3.135,1028,1.983,1029,3.888,1030,3.135,1031,3.888,1032,1.983,1033,1.983,1034,1.983,1035,1.983,1036,3.135,1037,1.983,1038,1.983,1039,1.983,1040,1.983,1041,1.983,1042,1.983,1043,1.983,1044,1.983,1045,1.983,1046,6.246,1047,1.983,1048,3.888,1049,3.135,1050,3.135,1051,1.983,1052,1.983,1053,1.983,1054,3.888,1055,1.983,1056,3.135,1057,3.888,1058,5.359,1059,1.983,1060,1.983,1061,3.135,1062,1.983,1063,3.135,1064,1.983,1065,1.983,1066,1.983,1067,1.983,1068,1.983,1069,1.983,1070,1.983,1071,1.983,1072,1.983,1073,1.983,1074,1.983,1075,1.983]],["title/coverage.html",[1076,4.035]],["body/coverage.html",[0,3.096,1,2.783,5,0.189,6,3.494,11,0.024,18,2.339,21,0.485,26,0.014,27,0.017,28,0.014,35,2.166,53,1.759,73,2.783,99,0.735,122,2.657,124,3.494,128,2.783,129,3.494,143,2.339,152,0.431,170,2.541,175,1.88,184,2.541,187,0.838,202,2.339,212,2.783,226,0.838,267,2.541,285,3.494,343,2.541,384,1.011,443,1.014,549,1.011,560,3.494,600,2.215,615,1.075,624,2.03,632,1.075,634,1.075,644,1.075,655,1.142,657,1.142,660,1.075,662,1.011,669,1.213,672,3.494,680,2.166,704,2.783,706,3.494,708,3.494,760,3.087,761,3.087,763,3.494,780,2.541,781,3.494,798,2.783,799,3.985,810,3.494,823,3.494,850,2.541,851,3.494,852,3.494,856,2.783,857,3.494,910,4.51,945,3.494,1005,3.494,1076,3.494,1077,4.111,1078,4.111,1079,4.111,1080,5.877,1081,4.111,1082,4.111,1083,5.307,1084,6.21,1085,6.428,1086,5.877,1087,3.494,1088,5.877,1089,3.494,1090,3.494,1091,4.111,1092,6.698,1093,5.307,1094,5.307,1095,4.111,1096,4.111,1097,4.111,1098,4.111]],["title/dependencies.html",[32,2.204,1099,2.903]],["body/dependencies.html",[11,0.024,17,1.503,21,0.392,26,0.016,27,0.019,28,0.016,32,2.527,58,2.673,59,2.527,62,3.602,63,3.602,68,2.729,76,3.602,180,1.332,211,2.964,273,3.602,277,3.602,329,1.179,333,4.076,335,4.076,336,4.076,340,3.958,342,4.39,692,4.076,716,4.968,790,2.527,889,4.968,890,4.968,897,4.076,1100,4.797,1101,6.306,1102,5.846,1103,4.797,1104,5.846,1105,4.797,1106,4.797,1107,4.797,1108,4.797,1109,4.797,1110,4.797,1111,4.797,1112,4.797,1113,4.797,1114,4.797,1115,4.797,1116,4.797,1117,4.797,1118,4.797,1119,4.797,1120,4.797,1121,4.797,1122,4.797,1123,4.797,1124,4.797,1125,4.797,1126,4.797,1127,4.797,1128,4.797,1129,4.797,1130,4.797,1131,4.797,1132,4.797,1133,4.797,1134,4.797,1135,4.797,1136,4.797,1137,4.797,1138,4.797,1139,4.797,1140,4.797]],["title/miscellaneous/enumerations.html",[1141,1.652,1142,3.555]],["body/miscellaneous/enumerations.html",[7,0.322,11,0.024,26,0.017,27,0.02,28,0.017,55,3.502,320,3.779,337,4.167,587,5.231,589,5.231,591,5.231,593,5.231,595,5.231,597,5.231,631,1.929,947,4.622,1141,2.974,1142,4.443,1143,5.228,1144,5.228,1145,5.228,1146,5.228,1147,5.231,1148,6.156]],["title/miscellaneous/functions.html",[1141,1.652,1149,3.555]],["body/miscellaneous/functions.html",[7,0.346,11,0.021,26,0.018,27,0.021,28,0.018,35,3.549,1090,4.773,1141,3.195,1149,4.773,1150,5.617]],["title/index.html",[7,0.179,1151,2.903,1152,2.903]],["body/index.html",[5,0.208,11,0.022,26,0.015,27,0.019,28,0.015,46,2.58,99,0.811,132,0.924,356,3.406,357,4.241,379,2.803,380,3.071,401,3.855,405,3.855,543,5.227,638,1.338,683,4.8,688,4.8,725,3.855,734,3.855,1147,4.8,1153,4.536,1154,7.026,1155,4.536,1156,5.648,1157,4.536,1158,4.536,1159,5.648,1160,4.536,1161,4.536,1162,4.536,1163,4.536,1164,4.536,1165,4.536,1166,4.536,1167,4.536,1168,5.648,1169,6.151,1170,5.648,1171,5.648,1172,4.536,1173,4.536,1174,4.536,1175,4.536,1176,4.536,1177,4.536,1178,5.648,1179,4.536,1180,6.437,1181,4.536,1182,4.536,1183,4.536,1184,4.536,1185,4.536,1186,4.536,1187,5.648,1188,5.648,1189,5.648,1190,4.536,1191,4.536,1192,4.536,1193,5.648,1194,4.536,1195,4.536,1196,4.536,1197,5.648,1198,4.536,1199,4.536,1200,4.536,1201,4.536,1202,5.648,1203,6.151,1204,6.151,1205,5.648,1206,5.648,1207,5.648,1208,5.648,1209,4.536,1210,4.536,1211,4.536,1212,4.536,1213,4.536,1214,4.536,1215,4.536,1216,4.536,1217,6.151,1218,6.151,1219,4.536,1220,4.536,1221,4.536,1222,4.536,1223,4.536,1224,4.536,1225,4.536,1226,4.536,1227,4.536,1228,4.536,1229,4.536,1230,4.536,1231,4.536,1232,4.536,1233,4.536,1234,4.536]],["title/modules.html",[31,2.501]],["body/modules.html",[11,0.021,26,0.018,27,0.021,28,0.018,30,3.719,31,2.894,41,3.125,42,2.894,43,3.395,1235,6.861,1236,6.861,1237,6.861,1238,6.861]],["title/overview.html",[1239,4.035]],["body/overview.html",[2,2.534,11,0.024,18,3.592,26,0.016,27,0.019,28,0.016,29,2.2,30,4.799,31,2.534,32,2.534,33,2.973,34,2.973,35,2.534,36,2.973,37,2.973,38,4.088,39,4.088,40,4.088,41,4.009,42,3.548,43,4.381,44,3.619,45,2.973,46,2.737,53,2.811,123,2.973,202,3.592,264,4.088,265,4.088,266,4.088,267,4.284,554,4.088,555,4.088,559,0.86,628,1.531,680,3.652,704,3.257,760,3.612,998,4.088,1000,4.088,1001,4.088,1239,4.088,1240,5.856,1241,4.811,1242,4.811]],["title/miscellaneous/variables.html",[1141,1.652,1243,3.555]],["body/miscellaneous/variables.html",[7,0.333,11,0.024,15,0.469,26,0.018,27,0.021,28,0.018,212,4.248,319,1.45,320,3.305,443,1.304,568,1.412,1087,4.591,1089,4.591,1141,3.073,1243,4.591,1244,5.402,1245,5.402,1246,5.402,1247,5.402,1248,5.402,1249,5.402,1250,5.402]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"guards/RankGuard.html":{},"classes/Reactions.html":{},"classes/ReactionsDto.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":624,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":1135,"title":{},"body":{"dependencies.html":{}}}],["0.11.0",{"_index":1114,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":1113,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1131,"title":{},"body":{"dependencies.html":{}}}],["0.5.12",{"_index":1107,"title":{},"body":{"dependencies.html":{}}}],["0.5.27",{"_index":1125,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1088,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1081,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1096,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1082,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1080,"title":{},"body":{"coverage.html":{}}}],["0/24",{"_index":1095,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1084,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1092,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1085,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1086,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1083,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1094,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1093,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":628,"title":{},"body":{"classes/Email.html":{},"classes/GeneralGateway.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["1.0.4",{"_index":1140,"title":{},"body":{"dependencies.html":{}}}],["1.1.3",{"_index":1100,"title":{},"body":{"dependencies.html":{}}}],["1.4.2",{"_index":1128,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":1116,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":983,"title":{},"body":{"classes/UserModel.html":{}}}],["100",{"_index":984,"title":{},"body":{"classes/UserModel.html":{}}}],["1000",{"_index":972,"title":{},"body":{"classes/UserModel.html":{}}}],["11000",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["127.0.0.1",{"_index":956,"title":{},"body":{"classes/UserModel.html":{}}}],["140",{"_index":971,"title":{},"body":{"classes/UserModel.html":{}}}],["15",{"_index":990,"title":{},"body":{"classes/UserModel.html":{}}}],["15d",{"_index":284,"title":{},"body":{"modules/AuthModule.html":{}}}],["16).tostring(16",{"_index":919,"title":{},"body":{"controllers/UserController.html":{}}}],["1]._id",{"_index":465,"title":{},"body":{"injectables/AuthService.html":{}}}],["2.10.1",{"_index":1111,"title":{},"body":{"dependencies.html":{}}}],["2.24.0",{"_index":1124,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1108,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":621,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["200",{"_index":643,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["20})@prop({required",{"_index":741,"title":{},"body":{"classes/Market.html":{}}}],["23",{"_index":1242,"title":{},"body":{"overview.html":{}}}],["3",{"_index":1241,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":1137,"title":{},"body":{"dependencies.html":{}}}],["3.21.2",{"_index":1121,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":961,"title":{},"body":{"classes/UserModel.html":{}}}],["4",{"_index":1240,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1132,"title":{},"body":{"dependencies.html":{}}}],["4.1.3",{"_index":1129,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":960,"title":{},"body":{"classes/UserModel.html":{}}}],["5.0.0",{"_index":1119,"title":{},"body":{"dependencies.html":{}}}],["5.8.7",{"_index":1127,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":619,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["6.1.1",{"_index":1102,"title":{},"body":{"dependencies.html":{}}}],["6.10.14",{"_index":1104,"title":{},"body":{"dependencies.html":{}}}],["6.2.1",{"_index":1105,"title":{},"body":{"dependencies.html":{}}}],["6.5.3",{"_index":1139,"title":{},"body":{"dependencies.html":{}}}],["6.7.2",{"_index":1101,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":1130,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":1123,"title":{},"body":{"dependencies.html":{}}}],["90",{"_index":642,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["9999",{"_index":626,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["__dirname",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"classes/ConfigService.html":{}}}],["__v",{"_index":1045,"title":{},"body":{"injectables/UserService.html":{}}}],["_id",{"_index":448,"title":{},"body":{"injectables/AuthService.html":{},"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{}}}],["_req",{"_index":912,"title":{},"body":{"controllers/UserController.html":{}}}],["accepted",{"_index":1218,"title":{},"body":{"index.html":{}}}],["access",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["actions",{"_index":1175,"title":{},"body":{"index.html":{}}}],["activation",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{}}}],["adapter",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["add",{"_index":1063,"title":{},"body":{"injectables/UserService.html":{}}}],["add(15",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{},"classes/GeneralGateway.html":{}}}],["added",{"_index":1229,"title":{},"body":{"index.html":{}}}],["adding",{"_index":1057,"title":{},"body":{"injectables/UserService.html":{}}}],["addreaction",{"_index":859,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["addreaction(reactionsdto",{"_index":1011,"title":{},"body":{"injectables/UserService.html":{}}}],["addreaction(res",{"_index":865,"title":{},"body":{"controllers/UserController.html":{}}}],["address",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["admin",{"_index":659,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["administrator",{"_index":1147,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["administrators",{"_index":1180,"title":{},"body":{"index.html":{}}}],["affected",{"_index":1194,"title":{},"body":{"index.html":{}}}],["akatsuki",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"index.html":{}}}],["already",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{}}}],["api",{"_index":1154,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_interceptor",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":30,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appmodule.port",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array(32",{"_index":915,"title":{},"body":{"controllers/UserController.html":{}}}],["arrayprop",{"_index":993,"title":{},"body":{"classes/UserModel.html":{}}}],["arrayprop({items",{"_index":958,"title":{},"body":{"classes/UserModel.html":{}}}],["assistant",{"_index":1179,"title":{},"body":{"index.html":{}}}],["associated",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{}}}],["async",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["attempt",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":269,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["auth/email/verification/${usercreated._id",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{}}}],["authcontroller",{"_index":128,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["authmodule",{"_index":41,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":633,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"injectables/UserService.html":{}}}],["authorization",{"_index":1173,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":202,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":968,"title":{},"body":{"classes/UserModel.html":{}}}],["avoid",{"_index":1182,"title":{},"body":{"index.html":{}}}],["await",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["badgatewayexception",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["ban",{"_index":474,"title":{},"body":{"injectables/AuthService.html":{}}}],["ban_reason",{"_index":475,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcryptjs",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["before",{"_index":1227,"title":{},"body":{"index.html":{}}}],["being",{"_index":1193,"title":{},"body":{"index.html":{}}}],["blockkey",{"_index":1038,"title":{},"body":{"injectables/UserService.html":{}}}],["blockkey.includes(key",{"_index":1047,"title":{},"body":{"injectables/UserService.html":{}}}],["body",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["body('newpassword",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('ofid",{"_index":941,"title":{},"body":{"controllers/UserController.html":{}}}],["body('sesionid",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('sessioid",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('sessiondevice",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('sessionip",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('toid",{"_index":940,"title":{},"body":{"controllers/UserController.html":{}}}],["body('token",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('tokenpassword",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('userid",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["body('userip",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":609,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"guards/RankGuard.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["bootstrap",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["branch",{"_index":1231,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1238,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1235,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":1220,"title":{},"body":{"index.html":{}}}],["buyer",{"_index":670,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["cache",{"_index":1109,"title":{},"body":{"dependencies.html":{}}}],["cacheinterceptor",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.register",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["canactivate",{"_index":764,"title":{},"body":{"guards/RankGuard.html":{}}}],["canactivate(context",{"_index":768,"title":{},"body":{"guards/RankGuard.html":{}}}],["carried",{"_index":1176,"title":{},"body":{"index.html":{}}}],["catch",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["catch((error",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["cb",{"_index":913,"title":{},"body":{"controllers/UserController.html":{}}}],["cb(null",{"_index":920,"title":{},"body":{"controllers/UserController.html":{}}}],["cdentials",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["challenge",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["change",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserModel.html":{}}}],["changecoverphoto",{"_index":860,"title":{},"body":{"controllers/UserController.html":{}}}],["changecoverphoto(file",{"_index":868,"title":{},"body":{"controllers/UserController.html":{}}}],["changed",{"_index":1222,"title":{},"body":{"index.html":{}}}],["changepassword",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["changepassword(userid",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["changeprofilephoto",{"_index":861,"title":{},"body":{"controllers/UserController.html":{}}}],["changeprofilephoto(file",{"_index":871,"title":{},"body":{"controllers/UserController.html":{}}}],["changes",{"_index":1207,"title":{},"body":{"index.html":{}}}],["changesecurity",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["changesecurity(securityupdate",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["changing",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{}}}],["check",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":21,"title":{"classes/ConfigService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/ReactionsDto.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"classes/UserModel.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"injectables/JwtStrategy.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"guards/RankGuard.html":{},"classes/Reactions.html":{},"classes/ReactionsDto.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":559,"title":{},"body":{"classes/ConfigService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/ReactionsDto.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"classes/UserModel.html":{},"overview.html":{}}}],["client",{"_index":688,"title":{},"body":{"classes/GeneralGateway.html":{},"index.html":{}}}],["client.id",{"_index":699,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["client.query.online",{"_index":694,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["client.query.session",{"_index":697,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["client.query.user",{"_index":696,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["closed",{"_index":550,"title":{},"body":{"injectables/AuthService.html":{}}}],["cluster_appmodule",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":264,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":265,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":266,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_configmodule",{"_index":554,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_configmodule_exports",{"_index":555,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":998,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1000,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":999,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":1001,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["code.'important",{"_index":1215,"title":{},"body":{"index.html":{}}}],["code1",{"_index":650,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["code2",{"_index":651,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["code3",{"_index":652,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["code4",{"_index":653,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["code5",{"_index":654,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["codes",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{}}}],["command",{"_index":1204,"title":{},"body":{"index.html":{}}}],["comments",{"_index":1233,"title":{},"body":{"index.html":{}}}],["commit",{"_index":1217,"title":{},"body":{"index.html":{}}}],["commits",{"_index":1216,"title":{},"body":{"index.html":{}}}],["compare",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["compare(password",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["complete",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{}}}],["completed",{"_index":469,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["compression",{"_index":1115,"title":{},"body":{"dependencies.html":{}}}],["config.service",{"_index":557,"title":{},"body":{"modules/ConfigModule.html":{}}}],["config/config.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["config/config.service",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{}}}],["configmodule",{"_index":42,"title":{"modules/ConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["configservice",{"_index":53,"title":{"classes/ConfigService.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"coverage.html":{},"overview.html":{}}}],["configservice.get(configurationenum.db_host",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(configurationenum.email_from",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(configurationenum.email_host",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(configurationenum.token_secret",{"_index":281,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configurationenum",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"miscellaneous/enumerations.html":{}}}],["configurationenum.server_host",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["confirm_account",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmation",{"_index":473,"title":{},"body":{"injectables/AuthService.html":{}}}],["confirmed",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["const",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"classes/GeneralGateway.html":{},"injectables/JwtStrategy.html":{},"guards/RankGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"classes/GeneralGateway.html":{},"injectables/JwtStrategy.html":{},"guards/RankGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/GeneralGateway.html":{},"guards/RankGuard.html":{}}}],["constructor(reflector",{"_index":765,"title":{},"body":{"guards/RankGuard.html":{}}}],["constructor(usermodel",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":679,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["contact",{"_index":639,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["context",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{},"guards/RankGuard.html":{}}}],["context.gethandler",{"_index":773,"title":{},"body":{"guards/RankGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":774,"title":{},"body":{"guards/RankGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('user",{"_index":899,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cookieresolver",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["cookieresolver(['lang",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["correct",{"_index":726,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["corrected",{"_index":1187,"title":{},"body":{"index.html":{}}}],["correctly",{"_index":1165,"title":{},"body":{"index.html":{}}}],["corrode",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{}}}],["corrupt",{"_index":1219,"title":{},"body":{"index.html":{}}}],["cover",{"_index":933,"title":{},"body":{"controllers/UserController.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{}}}],["coverage",{"_index":1076,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{}}}],["created",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["createdat",{"_index":460,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["createparamdecorator((key",{"_index":1246,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creating",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["customer",{"_index":1192,"title":{},"body":{"index.html":{}}}],["customname",{"_index":995,"title":{},"body":{"classes/UserModel.html":{}}}],["damaging",{"_index":1195,"title":{},"body":{"index.html":{}}}],["data",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["database",{"_index":552,"title":{},"body":{"injectables/AuthService.html":{}}}],["date",{"_index":603,"title":{},"body":{"classes/Email.html":{},"interfaces/IJwtPayload.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["date.now",{"_index":656,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["db_host",{"_index":595,"title":{},"body":{"classes/ConfigService.html":{},"miscellaneous/enumerations.html":{}}}],["de",{"_index":1068,"title":{},"body":{"injectables/UserService.html":{}}}],["declarations",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/ReactionsDto.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{}}}],["decorators/rank.decorator",{"_index":894,"title":{},"body":{"controllers/UserController.html":{}}}],["decorators/user.decorator",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["default",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["defaultstrategy",{"_index":276,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"injectables/JwtStrategy.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"guards/RankGuard.html":{},"classes/Reactions.html":{},"classes/ReactionsDto.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":885,"title":{},"body":{"controllers/UserController.html":{}}}],["delete('/reactions/remove",{"_index":939,"title":{},"body":{"controllers/UserController.html":{}}}],["deleted",{"_index":1075,"title":{},"body":{"injectables/UserService.html":{}}}],["deleteuser",{"_index":1006,"title":{},"body":{"injectables/UserService.html":{}}}],["deleteuser(id",{"_index":1013,"title":{},"body":{"injectables/UserService.html":{}}}],["dependencies",{"_index":32,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":622,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["destination",{"_index":908,"title":{},"body":{"controllers/UserController.html":{}}}],["device",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{},"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{}}}],["dir",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["disconnected",{"_index":700,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["discount",{"_index":629,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["diskstorage",{"_index":896,"title":{},"body":{"controllers/UserController.html":{}}}],["disposition",{"_index":468,"title":{},"body":{"injectables/AuthService.html":{}}}],["documentation",{"_index":1077,"title":{},"body":{"coverage.html":{}}}],["dont",{"_index":966,"title":{},"body":{"classes/UserModel.html":{}}}],["dotenv",{"_index":573,"title":{},"body":{"classes/ConfigService.html":{}}}],["downvote",{"_index":1064,"title":{},"body":{"injectables/UserService.html":{}}}],["dto/reactions.dto",{"_index":898,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/security.dto",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/security.update.dto",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/signin.dto",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":892,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["due",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["easily",{"_index":1167,"title":{},"body":{"index.html":{}}}],["el",{"_index":1070,"title":{},"body":{"injectables/UserService.html":{}}}],["electronic",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["email",{"_index":226,"title":{"classes/Email.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Email.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{},"coverage.html":{}}}],["email.expiration",{"_index":1040,"title":{},"body":{"injectables/UserService.html":{}}}],["email.key",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["email.status",{"_index":1039,"title":{},"body":{"injectables/UserService.html":{}}}],["email.token",{"_index":1041,"title":{},"body":{"injectables/UserService.html":{}}}],["email_from",{"_index":593,"title":{},"body":{"classes/ConfigService.html":{},"miscellaneous/enumerations.html":{}}}],["email_host",{"_index":591,"title":{},"body":{"classes/ConfigService.html":{},"miscellaneous/enumerations.html":{}}}],["en_us",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["enabled",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{},"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["end",{"_index":1191,"title":{},"body":{"index.html":{}}}],["enough",{"_index":969,"title":{},"body":{"classes/UserModel.html":{}}}],["entered",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{}}}],["entire",{"_index":1210,"title":{},"body":{"index.html":{}}}],["enumerations",{"_index":1142,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":579,"title":{},"body":{"classes/ConfigService.html":{}}}],["envconfig",{"_index":561,"title":{},"body":{"classes/ConfigService.html":{}}}],["envfilepath",{"_index":578,"title":{},"body":{"classes/ConfigService.html":{}}}],["error",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["error.code",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["events",{"_index":1174,"title":{},"body":{"index.html":{}}}],["exec",{"_index":1035,"title":{},"body":{"injectables/UserService.html":{}}}],["executed",{"_index":1172,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":769,"title":{},"body":{"guards/RankGuard.html":{}}}],["exist",{"_index":583,"title":{},"body":{"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["existpath",{"_index":580,"title":{},"body":{"classes/ConfigService.html":{}}}],["exists",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{}}}],["existssync",{"_index":569,"title":{},"body":{"classes/ConfigService.html":{}}}],["existssync(envfilepath",{"_index":581,"title":{},"body":{"classes/ConfigService.html":{}}}],["exp",{"_index":649,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["expiration",{"_index":601,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["expired",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":283,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"guards/RankGuard.html":{},"classes/Reactions.html":{},"classes/ReactionsDto.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":890,"title":{},"body":{"controllers/UserController.html":{},"dependencies.html":{}}}],["extends",{"_index":616,"title":{},"body":{"classes/Email.html":{},"injectables/JwtStrategy.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{}}}],["extname",{"_index":895,"title":{},"body":{"controllers/UserController.html":{}}}],["extractjwt",{"_index":715,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":720,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["factor",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["failure",{"_index":1199,"title":{},"body":{"index.html":{}}}],["fallbacklanguage",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["false",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"injectables/JwtStrategy.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"guards/RankGuard.html":{},"classes/Reactions.html":{},"classes/ReactionsDto.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["fileinterceptor",{"_index":888,"title":{},"body":{"controllers/UserController.html":{}}}],["fileinterceptor('cover",{"_index":929,"title":{},"body":{"controllers/UserController.html":{}}}],["fileinterceptor('photo",{"_index":906,"title":{},"body":{"controllers/UserController.html":{}}}],["filename",{"_index":911,"title":{},"body":{"controllers/UserController.html":{}}}],["filepattern",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["fill(null",{"_index":916,"title":{},"body":{"controllers/UserController.html":{}}}],["find",{"_index":1034,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(securitydto.id",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{}}}],["findbyid(userid",{"_index":1030,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyidandupdate(id",{"_index":1051,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyidandupdate(userid",{"_index":1056,"title":{},"body":{"injectables/UserService.html":{}}}],["findoneandupdate",{"_index":1072,"title":{},"body":{"injectables/UserService.html":{}}}],["forbiddenexception",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["format",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{},"classes/GeneralGateway.html":{},"index.html":{}}}],["formatted",{"_index":1211,"title":{},"body":{"index.html":{}}}],["fs",{"_index":571,"title":{},"body":{"classes/ConfigService.html":{}}}],["function",{"_index":1091,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1149,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["gateways/general.gateway",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["general",{"_index":683,"title":{},"body":{"classes/GeneralGateway.html":{},"index.html":{}}}],["generalgateway",{"_index":73,"title":{"classes/GeneralGateway.html":{}},"body":{"modules/AppModule.html":{},"classes/GeneralGateway.html":{},"coverage.html":{}}}],["generate",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{}}}],["generated",{"_index":1160,"title":{},"body":{"index.html":{}}}],["generating",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["generator",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["gensalt",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["gensalt(10",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('/find/:userid",{"_index":876,"title":{},"body":{"controllers/UserController.html":{}}}],["get(key",{"_index":566,"title":{},"body":{"classes/ConfigService.html":{}}}],["getallusers",{"_index":862,"title":{},"body":{"controllers/UserController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpublicuser",{"_index":1007,"title":{},"body":{"injectables/UserService.html":{}}}],["getpublicuser(userid",{"_index":1015,"title":{},"body":{"injectables/UserService.html":{}}}],["getting",{"_index":1151,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getuser('id",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["getuser('rank",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["getuser(userid",{"_index":875,"title":{},"body":{"controllers/UserController.html":{}}}],["getusers",{"_index":1008,"title":{},"body":{"injectables/UserService.html":{}}}],["global",{"_index":1153,"title":{},"body":{"index.html":{}}}],["google_play_app",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["guard",{"_index":760,"title":{"guards/RankGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":762,"title":{},"body":{"guards/RankGuard.html":{}}}],["handlebarsadapter",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["handleconnection",{"_index":677,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["handleconnection(client",{"_index":686,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["handledisconnect",{"_index":678,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["handledisconnect(client",{"_index":689,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["handlemessage(client",{"_index":703,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["hash",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasrole",{"_index":775,"title":{},"body":{"guards/RankGuard.html":{}}}],["headerresolver",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["hello",{"_index":126,"title":{},"body":{"injectables/AppService.html":{},"classes/GeneralGateway.html":{},"classes/UserModel.html":{}}}],["helmet",{"_index":1120,"title":{},"body":{"dependencies.html":{}}}],["high",{"_index":1188,"title":{},"body":{"index.html":{}}}],["https://akatsukiapp.com/password/reset",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://api.akatsukiapp.com/uploads/placeholders/cover_photo.jpg",{"_index":952,"title":{},"body":{"classes/UserModel.html":{}}}],["https://api.akatsukiapp.com/uploads/placeholders/profile_photo.jpg",{"_index":976,"title":{},"body":{"classes/UserModel.html":{}}}],["https://api.akatsukiapp.com:3678/v1",{"_index":598,"title":{},"body":{"classes/ConfigService.html":{}}}],["https://play.google.com/akatsukiapp_",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["httpstatus.created",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpstatus.ok",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["i18n",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["i18nlang",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["i18nmodule",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["i18nmodule.forroot",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["i18nrequestscopeservice",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["i18nservice",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["id",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":1078,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":447,"title":{},"body":{"injectables/AuthService.html":{}}}],["ignoreexpiration",{"_index":721,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ijwtpayload",{"_index":343,"title":{"interfaces/IJwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["implements",{"_index":673,"title":{},"body":{"classes/GeneralGateway.html":{},"guards/RankGuard.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"injectables/JwtStrategy.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"guards/RankGuard.html":{},"classes/Reactions.html":{},"classes/ReactionsDto.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["important",{"_index":1170,"title":{},"body":{"index.html":{}}}],["imports",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["incorrect",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["incorrectly",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"guards/RankGuard.html":{},"classes/Reactions.html":{},"classes/ReactionsDto.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"guards/RankGuard.html":{},"classes/Reactions.html":{},"classes/ReactionsDto.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inform",{"_index":1197,"title":{},"body":{"index.html":{}}}],["information",{"_index":641,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"injectables/UserService.html":{}}}],["informed",{"_index":1177,"title":{},"body":{"index.html":{}}}],["initialized",{"_index":1205,"title":{},"body":{"index.html":{}}}],["inject",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["injectable",{"_index":122,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/RankGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":123,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["injectmodel(usermodel",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["insufficient",{"_index":476,"title":{},"body":{"injectables/AuthService.html":{}}}],["intended",{"_index":1163,"title":{},"body":{"index.html":{}}}],["interface",{"_index":704,"title":{"interfaces/IJwtPayload.html":{}},"body":{"interfaces/IJwtPayload.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":705,"title":{},"body":{"interfaces/IJwtPayload.html":{}}}],["invalid",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{}}}],["ip",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{},"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{}}}],["isboolean",{"_index":809,"title":{},"body":{"classes/SecurityCode.html":{},"classes/SecurityUpdateDto.html":{}}}],["isboolean()@isnotempty",{"_index":806,"title":{},"body":{"classes/SecurityCode.html":{}}}],["isdevenv",{"_index":575,"title":{},"body":{"classes/ConfigService.html":{}}}],["isemail",{"_index":830,"title":{},"body":{"classes/SignInDto.html":{}}}],["isnotempty",{"_index":789,"title":{},"body":{"classes/ReactionsDto.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/SignInDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty()@isemail",{"_index":825,"title":{},"body":{"classes/SignInDto.html":{}}}],["isnotempty()@isstring",{"_index":827,"title":{},"body":{"classes/SignInDto.html":{}}}],["isnumber",{"_index":808,"title":{},"body":{"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{}}}],["isnumber()@isnotempty",{"_index":800,"title":{},"body":{"classes/SecurityCode.html":{},"classes/SecurityDto.html":{}}}],["ispasswordmatch",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["isstring",{"_index":788,"title":{},"body":{"classes/ReactionsDto.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/SignInDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":784,"title":{},"body":{"classes/ReactionsDto.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/UpdateUserDto.html":{}}}],["item",{"_index":671,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["items",{"_index":997,"title":{},"body":{"classes/UserModel.html":{}}}],["join",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{}}}],["join(__dirname",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["json",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["jsonwebtoken",{"_index":1122,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":277,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.payload.interface",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":719,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":272,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":278,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":267,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["ket",{"_index":574,"title":{},"body":{"classes/ConfigService.html":{}}}],["key",{"_index":568,"title":{},"body":{"classes/ConfigService.html":{},"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["keys/configuration.enum",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{}}}],["keys/ranks.enum",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["kodachi",{"_index":1157,"title":{},"body":{"index.html":{}}}],["l",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["lang",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["last",{"_index":664,"title":{},"body":{"classes/Email.html":{},"classes/GeneralGateway.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"injectables/UserService.html":{}}}],["lat",{"_index":707,"title":{},"body":{"interfaces/IJwtPayload.html":{}}}],["leakage",{"_index":1184,"title":{},"body":{"index.html":{}}}],["legend",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["limit",{"_index":1118,"title":{},"body":{"dependencies.html":{}}}],["line",{"_index":668,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{}}}],["list",{"_index":1033,"title":{},"body":{"injectables/UserService.html":{}}}],["literal",{"_index":563,"title":{},"body":{"classes/ConfigService.html":{},"injectables/UserService.html":{}}}],["local",{"_index":1225,"title":{},"body":{"index.html":{}}}],["locale",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["locally",{"_index":1206,"title":{},"body":{"index.html":{}}}],["log",{"_index":451,"title":{},"body":{"injectables/AuthService.html":{}}}],["logged",{"_index":470,"title":{},"body":{"injectables/AuthService.html":{},"classes/GeneralGateway.html":{}}}],["logger",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"classes/GeneralGateway.html":{},"injectables/UserService.html":{}}}],["logger('authentication",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger('configuration",{"_index":565,"title":{},"body":{"classes/ConfigService.html":{}}}],["logger('gateway",{"_index":682,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["logger('user",{"_index":1027,"title":{},"body":{"injectables/UserService.html":{}}}],["logging",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{}}}],["login",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(userid",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["lowercase",{"_index":630,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{}}}],["mailermodule",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["mailermodule.forrootasync",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["mailerservice",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["mailservice",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["maintain",{"_index":1212,"title":{},"body":{"index.html":{}}}],["make",{"_index":1198,"title":{},"body":{"index.html":{}}}],["manager",{"_index":1110,"title":{},"body":{"dependencies.html":{}}}],["map",{"_index":917,"title":{},"body":{"controllers/UserController.html":{}}}],["market",{"_index":615,"title":{"classes/Market.html":{}},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["master",{"_index":1230,"title":{},"body":{"index.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"guards/RankGuard.html":{},"classes/Reactions.html":{},"classes/ReactionsDto.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["math.round(math.random",{"_index":918,"title":{},"body":{"controllers/UserController.html":{}}}],["max",{"_index":625,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["maxlength",{"_index":620,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{}}}],["membership",{"_index":655,"title":{"classes/Membership.html":{}},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{},"coverage.html":{}}}],["message",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{},"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"controllers/UserController.html":{}}}],["metadata",{"_index":1134,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"classes/GeneralGateway.html":{},"injectables/JwtStrategy.html":{},"guards/RankGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["min",{"_index":623,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["minlength",{"_index":618,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{}}}],["minutes",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{},"classes/GeneralGateway.html":{}}}],["miscellaneous",{"_index":1141,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mod",{"_index":658,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["mode",{"_index":663,"title":{},"body":{"classes/Email.html":{},"classes/GeneralGateway.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"injectables/UserService.html":{}}}],["modeloptions",{"_index":992,"title":{},"body":{"classes/UserModel.html":{}}}],["models/user.model",{"_index":1004,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["moderator",{"_index":1148,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["moderators",{"_index":1181,"title":{},"body":{"index.html":{}}}],["module",{"_index":29,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":31,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["modules/user/models/user.model",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["modules/user/user.module",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/user/user.service",{"_index":693,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["moment",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"classes/GeneralGateway.html":{},"classes/UserModel.html":{},"dependencies.html":{}}}],["moments",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{},"classes/GeneralGateway.html":{}}}],["moments().todate",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{}}}],["moments(timezone",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{},"classes/GeneralGateway.html":{}}}],["moments(timezone).todate",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["momentstz",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{},"classes/GeneralGateway.html":{}}}],["mongodb://localhost:27017/akatsuki",{"_index":596,"title":{},"body":{"classes/ConfigService.html":{}}}],["mongoose",{"_index":1126,"title":{},"body":{"dependencies.html":{}}}],["more",{"_index":640,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["multer",{"_index":897,"title":{},"body":{"controllers/UserController.html":{},"dependencies.html":{}}}],["name",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"classes/GeneralGateway.html":{},"injectables/JwtStrategy.html":{},"guards/RankGuard.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/GeneralGateway.html":{},"injectables/JwtStrategy.html":{},"guards/RankGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"guards/RankGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":273,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":889,"title":{},"body":{"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":692,"title":{},"body":{"classes/GeneralGateway.html":{},"dependencies.html":{}}}],["network",{"_index":594,"title":{},"body":{"classes/ConfigService.html":{}}}],["new",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"injectables/JwtStrategy.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{},"coverage.html":{},"index.html":{}}}],["newpassword",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["next",{"_index":667,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{}}}],["notes",{"_index":1171,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["notifications",{"_index":660,"title":{"classes/Notifications.html":{}},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["number",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{}}}],["obtaining",{"_index":1029,"title":{},"body":{"injectables/UserService.html":{}}}],["occurred",{"_index":551,"title":{},"body":{"injectables/AuthService.html":{}}}],["offer",{"_index":946,"title":{},"body":{"classes/UserModel.html":{},"injectables/UserService.html":{}}}],["offers",{"_index":967,"title":{},"body":{"classes/UserModel.html":{}}}],["ofid",{"_index":782,"title":{},"body":{"classes/ReactionsDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["ongatewayconnection",{"_index":674,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["ongatewaydisconnect",{"_index":675,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["online",{"_index":662,"title":{"classes/Online.html":{}},"body":{"classes/Email.html":{},"classes/GeneralGateway.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["online).catch",{"_index":1053,"title":{},"body":{"injectables/UserService.html":{}}}],["optional",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Password.html":{},"guards/RankGuard.html":{},"classes/Sessions.html":{},"classes/Transaction.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{}}}],["options",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"classes/UserModel.html":{}}}],["order",{"_index":1214,"title":{},"body":{"index.html":{}}}],["out",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1239,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1099,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":884,"title":{},"body":{"controllers/UserController.html":{}}}],["param('id",{"_index":922,"title":{},"body":{"controllers/UserController.html":{}}}],["param('userid",{"_index":900,"title":{},"body":{"controllers/UserController.html":{}}}],["parameters",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"classes/GeneralGateway.html":{},"injectables/JwtStrategy.html":{},"guards/RankGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parse",{"_index":572,"title":{},"body":{"classes/ConfigService.html":{}}}],["parse(readfilesync(envfilepath",{"_index":586,"title":{},"body":{"classes/ConfigService.html":{}}}],["passport",{"_index":716,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":271,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":275,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":713,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":717,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":384,"title":{"classes/Password.html":{}},"body":{"injectables/AuthService.html":{},"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{},"coverage.html":{}}}],["password.expiration",{"_index":1043,"title":{},"body":{"injectables/UserService.html":{}}}],["password.key",{"_index":1032,"title":{},"body":{"injectables/UserService.html":{}}}],["password.status",{"_index":1042,"title":{},"body":{"injectables/UserService.html":{}}}],["password.token",{"_index":1044,"title":{},"body":{"injectables/UserService.html":{}}}],["password_reset_request",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordchange",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["passwordchange(userid",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["passwordresetrequest",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["passwordresetrequest(userid",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["passwordsalt",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["patch('/account/password/change",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/account/security/change",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/account/verify/email",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["patch('/update",{"_index":882,"title":{},"body":{"controllers/UserController.html":{}}}],["path",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{}}}],["payload",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{},"classes/GeneralGateway.html":{},"injectables/JwtStrategy.html":{}}}],["pc",{"_index":1226,"title":{},"body":{"index.html":{}}}],["permissions",{"_index":477,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["photo",{"_index":926,"title":{},"body":{"controllers/UserController.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{}}}],["picture",{"_index":1054,"title":{},"body":{"injectables/UserService.html":{}}}],["platform",{"_index":1196,"title":{},"body":{"index.html":{}}}],["please",{"_index":638,"title":{},"body":{"classes/Email.html":{},"injectables/JwtStrategy.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"index.html":{}}}],["por",{"_index":1069,"title":{},"body":{"injectables/UserService.html":{}}}],["port",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["port_api",{"_index":587,"title":{},"body":{"classes/ConfigService.html":{},"miscellaneous/enumerations.html":{}}}],["post",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["post('/account/logout",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/account/password/reset",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/account/verify/security",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/account/verify/session",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signin",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/upload/cover/:id",{"_index":931,"title":{},"body":{"controllers/UserController.html":{}}}],["post('/upload/photo/:id",{"_index":905,"title":{},"body":{"controllers/UserController.html":{}}}],["post('/upload/photo/:id')@useinterceptors(undefined",{"_index":872,"title":{},"body":{"controllers/UserController.html":{}}}],["postman",{"_index":1161,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["premium",{"_index":947,"title":{},"body":{"classes/UserModel.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["prettier",{"_index":446,"title":{},"body":{"injectables/AuthService.html":{}}}],["prevent",{"_index":1190,"title":{},"body":{"index.html":{}}}],["price",{"_index":627,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["private",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"classes/GeneralGateway.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["problem",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["problems",{"_index":1169,"title":{},"body":{"index.html":{}}}],["process",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["process.env.node_nev",{"_index":576,"title":{},"body":{"classes/ConfigService.html":{}}}],["process.env.port",{"_index":588,"title":{},"body":{"classes/ConfigService.html":{}}}],["process.exit(0",{"_index":584,"title":{},"body":{"classes/ConfigService.html":{}}}],["processed",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["processing",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["production",{"_index":577,"title":{},"body":{"classes/ConfigService.html":{}}}],["profile",{"_index":965,"title":{},"body":{"classes/UserModel.html":{},"injectables/UserService.html":{}}}],["program",{"_index":1162,"title":{},"body":{"index.html":{}}}],["project",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"index.html":{}}}],["promise",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["prop",{"_index":612,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{}}}],["prop({default",{"_index":839,"title":{},"body":{"classes/Transaction.html":{},"classes/UserModel.html":{}}}],["prop({required",{"_index":604,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{}}}],["properties",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"interfaces/IJwtPayload.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/ReactionsDto.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{}}}],["protected",{"_index":858,"title":{},"body":{"controllers/UserController.html":{}}}],["provide",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{}}}],["providers",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{},"index.html":{}}}],["pull",{"_index":548,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["put",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["put('/reactions/add",{"_index":866,"title":{},"body":{"controllers/UserController.html":{}}}],["put('/signup",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('/signup')@usepipes(new",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["queryresolver",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["queryresolver(['lang",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["questions",{"_index":1232,"title":{},"body":{"index.html":{}}}],["randomname",{"_index":914,"title":{},"body":{"controllers/UserController.html":{}}}],["randomname}${extname(file.originalname",{"_index":921,"title":{},"body":{"controllers/UserController.html":{}}}],["range",{"_index":970,"title":{},"body":{"classes/UserModel.html":{}}}],["rank",{"_index":443,"title":{"classes/Rank.html":{}},"body":{"injectables/AuthService.html":{},"classes/Email.html":{},"interfaces/IJwtPayload.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"guards/RankGuard.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rank(ranksenum.administrator",{"_index":938,"title":{},"body":{"controllers/UserController.html":{}}}],["rank(ranksenum.administrator)@delete('/reactions/remove",{"_index":879,"title":{},"body":{"controllers/UserController.html":{}}}],["rankdata",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["rankdata.push(ranksenum.administrator",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["rankdata.push(ranksenum.moderator",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["rankdata.push(ranksenum.premium",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["rankdata.push(ranksenum.seller",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["rankguard",{"_index":761,"title":{"guards/RankGuard.html":{}},"body":{"guards/RankGuard.html":{},"coverage.html":{}}}],["ranking",{"_index":1189,"title":{},"body":{"index.html":{}}}],["ranks",{"_index":771,"title":{},"body":{"guards/RankGuard.html":{}}}],["ranks.includes(rank",{"_index":777,"title":{},"body":{"guards/RankGuard.html":{}}}],["ranksenum",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["rate",{"_index":1117,"title":{},"body":{"dependencies.html":{}}}],["reaccion",{"_index":1067,"title":{},"body":{"injectables/UserService.html":{}}}],["reaction",{"_index":1058,"title":{},"body":{"injectables/UserService.html":{}}}],["reactions",{"_index":632,"title":{"classes/Reactions.html":{}},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["reactionsdto",{"_index":780,"title":{"classes/ReactionsDto.html":{}},"body":{"classes/ReactionsDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["readfilesync",{"_index":570,"title":{},"body":{"classes/ConfigService.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"classes/GeneralGateway.html":{},"injectables/JwtStrategy.html":{},"guards/RankGuard.html":{},"classes/ReactionsDto.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/SignInDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["real",{"_index":1208,"title":{},"body":{"index.html":{}}}],["reason",{"_index":636,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["recommended",{"_index":1186,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":1133,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":766,"title":{},"body":{"guards/RankGuard.html":{}}}],["registered",{"_index":453,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["registration",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["rejected",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["released",{"_index":1228,"title":{},"body":{"index.html":{}}}],["remove",{"_index":1073,"title":{},"body":{"injectables/UserService.html":{}}}],["removereaction",{"_index":863,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["removereaction(ofid",{"_index":1018,"title":{},"body":{"injectables/UserService.html":{}}}],["removereaction(res",{"_index":878,"title":{},"body":{"controllers/UserController.html":{}}}],["rep",{"_index":648,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["report",{"_index":1200,"title":{},"body":{"index.html":{}}}],["reporting",{"_index":1185,"title":{},"body":{"index.html":{}}}],["repository",{"_index":1201,"title":{},"body":{"index.html":{}}}],["req",{"_index":1247,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.user",{"_index":1249,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.user[key",{"_index":1248,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/RankGuard.html":{}}}],["requestuserrank",{"_index":1024,"title":{},"body":{"injectables/UserService.html":{}}}],["requestuserrank.includes(ranksenum.administrator",{"_index":1049,"title":{},"body":{"injectables/UserService.html":{}}}],["requestuserrank.includes(ranksenum.moderator",{"_index":1050,"title":{},"body":{"injectables/UserService.html":{}}}],["requetuserid",{"_index":1023,"title":{},"body":{"injectables/UserService.html":{}}}],["required",{"_index":617,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{}}}],["res",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["res.status(httpstatus.ok).json",{"_index":927,"title":{},"body":{"controllers/UserController.html":{}}}],["resed",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{}}}],["reset",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["reset_password",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{}}}],["resolvers",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["response",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["response.status(httpstatus.created).json",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["response.status(httpstatus.ok).json",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["rest",{"_index":1155,"title":{},"body":{"index.html":{}}}],["result",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"guards/RankGuard.html":{},"classes/Reactions.html":{},"classes/ReactionsDto.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"guards/RankGuard.html":{},"classes/Reactions.html":{},"classes/ReactionsDto.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"classes/GeneralGateway.html":{},"injectables/JwtStrategy.html":{},"guards/RankGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returnmodeltype",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"classes/GeneralGateway.html":{},"injectables/JwtStrategy.html":{},"guards/RankGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["reviewed",{"_index":1223,"title":{},"body":{"index.html":{}}}],["rewards",{"_index":647,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["rimraf",{"_index":1136,"title":{},"body":{"dependencies.html":{}}}],["rxjs",{"_index":1138,"title":{},"body":{"dependencies.html":{}}}],["s9sdnxc9sm",{"_index":590,"title":{},"body":{"classes/ConfigService.html":{}}}],["safely",{"_index":1166,"title":{},"body":{"index.html":{}}}],["salt",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{}}}],["same",{"_index":1224,"title":{},"body":{"index.html":{}}}],["saturnoxspace@outlook.com",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["savemissing",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["sawako__",{"_index":1234,"title":{},"body":{"index.html":{}}}],["secret",{"_index":280,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":722,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["security",{"_index":187,"title":{"classes/Security.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["securitycode",{"_index":798,"title":{"classes/SecurityCode.html":{}},"body":{"classes/SecurityCode.html":{},"classes/SecurityUpdateDto.html":{},"coverage.html":{}}}],["securitydto",{"_index":184,"title":{"classes/SecurityDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SecurityDto.html":{},"coverage.html":{}}}],["securitydto.code1",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{}}}],["securitydto.code2",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["securitydto.code3",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{}}}],["securitydto.code4",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{}}}],["securitydto.code5",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{}}}],["securityupdate",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["securityupdatedto",{"_index":143,"title":{"classes/SecurityUpdateDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SecurityCode.html":{},"classes/SecurityUpdateDto.html":{},"coverage.html":{}}}],["select",{"_index":1031,"title":{},"body":{"injectables/UserService.html":{}}}],["seller",{"_index":631,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"miscellaneous/enumerations.html":{}}}],["send",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["sending",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendmail",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendpasswordreset",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["sendpasswordreset(userid",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["sent",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{}}}],["server",{"_index":676,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["server_host",{"_index":597,"title":{},"body":{"classes/ConfigService.html":{},"miscellaneous/enumerations.html":{}}}],["sesionid",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["sesionid).then",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessiodevice",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessioid",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["sessioip",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["session",{"_index":452,"title":{},"body":{"injectables/AuthService.html":{},"classes/GeneralGateway.html":{}}}],["session_id",{"_index":472,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessiondevice",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessionid",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessionip",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessions",{"_index":549,"title":{"classes/Sessions.html":{}},"body":{"injectables/AuthService.html":{},"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["sessions._id",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessions.device",{"_index":449,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessions.ip",{"_index":450,"title":{},"body":{"injectables/AuthService.html":{}}}],["setmetadata('rank",{"_index":1250,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signin",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(user",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["signindto",{"_index":170,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"coverage.html":{}}}],["signoptions",{"_index":282,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(user",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["smtp://saturnoxspace@outlook.com:efhdmhtdxblafvjj@smtp.office365.com",{"_index":592,"title":{},"body":{"classes/ConfigService.html":{}}}],["social",{"_index":661,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["socket",{"_index":698,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["socket.io",{"_index":1103,"title":{},"body":{"dependencies.html":{}}}],["sorry",{"_index":732,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"guards/RankGuard.html":{},"classes/Reactions.html":{},"classes/ReactionsDto.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["specialty",{"_index":948,"title":{},"body":{"classes/UserModel.html":{},"injectables/UserService.html":{}}}],["specified",{"_index":637,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"injectables/UserService.html":{}}}],["spent",{"_index":645,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["src/.../configuration.enum.ts",{"_index":1143,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1150,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../rank.decorator.ts",{"_index":1245,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ranks.enum.ts",{"_index":1144,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../user.decorator.ts",{"_index":1244,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":124,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":125,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:120",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:140",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:164",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:187",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:32",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:52",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:57",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:77",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:96",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":268,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:122",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:292",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:31",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:344",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:374",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:42",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:430",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:500",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:564",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:615",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/security.dto.ts",{"_index":810,"title":{},"body":{"classes/SecurityDto.html":{},"coverage.html":{}}}],["src/auth/dto/security.dto.ts:10",{"_index":811,"title":{},"body":{"classes/SecurityDto.html":{}}}],["src/auth/dto/security.dto.ts:14",{"_index":812,"title":{},"body":{"classes/SecurityDto.html":{}}}],["src/auth/dto/security.dto.ts:18",{"_index":813,"title":{},"body":{"classes/SecurityDto.html":{}}}],["src/auth/dto/security.dto.ts:22",{"_index":814,"title":{},"body":{"classes/SecurityDto.html":{}}}],["src/auth/dto/security.dto.ts:26",{"_index":815,"title":{},"body":{"classes/SecurityDto.html":{}}}],["src/auth/dto/security.dto.ts:6",{"_index":816,"title":{},"body":{"classes/SecurityDto.html":{}}}],["src/auth/dto/security.update.dto.ts",{"_index":799,"title":{},"body":{"classes/SecurityCode.html":{},"classes/SecurityUpdateDto.html":{},"coverage.html":{}}}],["src/auth/dto/security.update.dto.ts:10",{"_index":802,"title":{},"body":{"classes/SecurityCode.html":{}}}],["src/auth/dto/security.update.dto.ts:14",{"_index":803,"title":{},"body":{"classes/SecurityCode.html":{}}}],["src/auth/dto/security.update.dto.ts:18",{"_index":804,"title":{},"body":{"classes/SecurityCode.html":{}}}],["src/auth/dto/security.update.dto.ts:22",{"_index":805,"title":{},"body":{"classes/SecurityCode.html":{}}}],["src/auth/dto/security.update.dto.ts:26",{"_index":807,"title":{},"body":{"classes/SecurityCode.html":{}}}],["src/auth/dto/security.update.dto.ts:32",{"_index":817,"title":{},"body":{"classes/SecurityUpdateDto.html":{}}}],["src/auth/dto/security.update.dto.ts:34",{"_index":818,"title":{},"body":{"classes/SecurityUpdateDto.html":{}}}],["src/auth/dto/security.update.dto.ts:6",{"_index":801,"title":{},"body":{"classes/SecurityCode.html":{}}}],["src/auth/dto/signin.dto.ts",{"_index":823,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dto/signin.dto.ts:12",{"_index":824,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dto/signin.dto.ts:16",{"_index":828,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dto/signin.dto.ts:5",{"_index":826,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dto/signin.dto.ts:9",{"_index":829,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/jwt.payload.interface.ts",{"_index":706,"title":{},"body":{"interfaces/IJwtPayload.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":708,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:12",{"_index":710,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:25",{"_index":712,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/config/config.module.ts",{"_index":556,"title":{},"body":{"modules/ConfigModule.html":{}}}],["src/config/config.service.ts",{"_index":560,"title":{},"body":{"classes/ConfigService.html":{},"coverage.html":{}}}],["src/config/config.service.ts:34",{"_index":567,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/config/config.service.ts:6",{"_index":564,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/config/config.service.ts:7",{"_index":562,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/decorators/rank.decorator.ts",{"_index":1087,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/decorators/user.decorator.ts",{"_index":1089,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/gateways/general.gateway.ts",{"_index":672,"title":{},"body":{"classes/GeneralGateway.html":{},"coverage.html":{}}}],["src/gateways/general.gateway.ts:15",{"_index":684,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["src/gateways/general.gateway.ts:17",{"_index":681,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["src/gateways/general.gateway.ts:20",{"_index":690,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["src/gateways/general.gateway.ts:45",{"_index":687,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["src/guards/rank.guard.ts",{"_index":763,"title":{},"body":{"guards/RankGuard.html":{},"coverage.html":{}}}],["src/guards/rank.guard.ts:5",{"_index":767,"title":{},"body":{"guards/RankGuard.html":{}}}],["src/guards/rank.guard.ts:8",{"_index":770,"title":{},"body":{"guards/RankGuard.html":{}}}],["src/keys/configuration.enum.ts",{"_index":1145,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/keys/ranks.enum",{"_index":1028,"title":{},"body":{"injectables/UserService.html":{}}}],["src/keys/ranks.enum.ts",{"_index":1146,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/main.ts",{"_index":1090,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/modules/user/dto/reactions.dto.ts",{"_index":781,"title":{},"body":{"classes/ReactionsDto.html":{},"coverage.html":{}}}],["src/modules/user/dto/reactions.dto.ts:10",{"_index":785,"title":{},"body":{"classes/ReactionsDto.html":{}}}],["src/modules/user/dto/reactions.dto.ts:14",{"_index":787,"title":{},"body":{"classes/ReactionsDto.html":{}}}],["src/modules/user/dto/reactions.dto.ts:6",{"_index":786,"title":{},"body":{"classes/ReactionsDto.html":{}}}],["src/modules/user/dto/update",{"_index":851,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/modules/user/models/user.model.data.ts",{"_index":600,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"coverage.html":{}}}],["src/modules/user/models/user.model.data.ts:10",{"_index":735,"title":{},"body":{"classes/Market.html":{}}}],["src/modules/user/models/user.model.data.ts:101",{"_index":795,"title":{},"body":{"classes/Security.html":{}}}],["src/modules/user/models/user.model.data.ts:104",{"_index":797,"title":{},"body":{"classes/Security.html":{}}}],["src/modules/user/models/user.model.data.ts:109",{"_index":745,"title":{},"body":{"classes/Membership.html":{}}}],["src/modules/user/models/user.model.data.ts:112",{"_index":744,"title":{},"body":{"classes/Membership.html":{}}}],["src/modules/user/models/user.model.data.ts:115",{"_index":746,"title":{},"body":{"classes/Membership.html":{}}}],["src/modules/user/models/user.model.data.ts:120",{"_index":759,"title":{},"body":{"classes/Rank.html":{}}}],["src/modules/user/models/user.model.data.ts:123",{"_index":758,"title":{},"body":{"classes/Rank.html":{}}}],["src/modules/user/models/user.model.data.ts:126",{"_index":757,"title":{},"body":{"classes/Rank.html":{}}}],["src/modules/user/models/user.model.data.ts:13",{"_index":740,"title":{},"body":{"classes/Market.html":{}}}],["src/modules/user/models/user.model.data.ts:131",{"_index":749,"title":{},"body":{"classes/Notifications.html":{}}}],["src/modules/user/models/user.model.data.ts:134",{"_index":747,"title":{},"body":{"classes/Notifications.html":{}}}],["src/modules/user/models/user.model.data.ts:137",{"_index":748,"title":{},"body":{"classes/Notifications.html":{}}}],["src/modules/user/models/user.model.data.ts:142",{"_index":752,"title":{},"body":{"classes/Online.html":{}}}],["src/modules/user/models/user.model.data.ts:145",{"_index":751,"title":{},"body":{"classes/Online.html":{}}}],["src/modules/user/models/user.model.data.ts:148",{"_index":750,"title":{},"body":{"classes/Online.html":{}}}],["src/modules/user/models/user.model.data.ts:154",{"_index":819,"title":{},"body":{"classes/Sessions.html":{}}}],["src/modules/user/models/user.model.data.ts:157",{"_index":820,"title":{},"body":{"classes/Sessions.html":{}}}],["src/modules/user/models/user.model.data.ts:16",{"_index":743,"title":{},"body":{"classes/Market.html":{}}}],["src/modules/user/models/user.model.data.ts:160",{"_index":821,"title":{},"body":{"classes/Sessions.html":{}}}],["src/modules/user/models/user.model.data.ts:163",{"_index":822,"title":{},"body":{"classes/Sessions.html":{}}}],["src/modules/user/models/user.model.data.ts:168",{"_index":608,"title":{},"body":{"classes/Email.html":{}}}],["src/modules/user/models/user.model.data.ts:171",{"_index":610,"title":{},"body":{"classes/Email.html":{}}}],["src/modules/user/models/user.model.data.ts:174",{"_index":611,"title":{},"body":{"classes/Email.html":{}}}],["src/modules/user/models/user.model.data.ts:177",{"_index":606,"title":{},"body":{"classes/Email.html":{}}}],["src/modules/user/models/user.model.data.ts:182",{"_index":754,"title":{},"body":{"classes/Password.html":{}}}],["src/modules/user/models/user.model.data.ts:185",{"_index":755,"title":{},"body":{"classes/Password.html":{}}}],["src/modules/user/models/user.model.data.ts:188",{"_index":756,"title":{},"body":{"classes/Password.html":{}}}],["src/modules/user/models/user.model.data.ts:19",{"_index":737,"title":{},"body":{"classes/Market.html":{}}}],["src/modules/user/models/user.model.data.ts:191",{"_index":753,"title":{},"body":{"classes/Password.html":{}}}],["src/modules/user/models/user.model.data.ts:196",{"_index":848,"title":{},"body":{"classes/TransactionBuyer.html":{}}}],["src/modules/user/models/user.model.data.ts:199",{"_index":849,"title":{},"body":{"classes/TransactionBuyer.html":{}}}],["src/modules/user/models/user.model.data.ts:202",{"_index":847,"title":{},"body":{"classes/TransactionBuyer.html":{}}}],["src/modules/user/models/user.model.data.ts:206",{"_index":838,"title":{},"body":{"classes/Transaction.html":{}}}],["src/modules/user/models/user.model.data.ts:209",{"_index":845,"title":{},"body":{"classes/Transaction.html":{}}}],["src/modules/user/models/user.model.data.ts:212",{"_index":840,"title":{},"body":{"classes/Transaction.html":{}}}],["src/modules/user/models/user.model.data.ts:215",{"_index":842,"title":{},"body":{"classes/Transaction.html":{}}}],["src/modules/user/models/user.model.data.ts:218",{"_index":846,"title":{},"body":{"classes/Transaction.html":{}}}],["src/modules/user/models/user.model.data.ts:221",{"_index":844,"title":{},"body":{"classes/Transaction.html":{}}}],["src/modules/user/models/user.model.data.ts:224",{"_index":841,"title":{},"body":{"classes/Transaction.html":{}}}],["src/modules/user/models/user.model.data.ts:227",{"_index":843,"title":{},"body":{"classes/Transaction.html":{}}}],["src/modules/user/models/user.model.data.ts:29",{"_index":742,"title":{},"body":{"classes/Market.html":{}}}],["src/modules/user/models/user.model.data.ts:32",{"_index":736,"title":{},"body":{"classes/Market.html":{}}}],["src/modules/user/models/user.model.data.ts:35",{"_index":738,"title":{},"body":{"classes/Market.html":{}}}],["src/modules/user/models/user.model.data.ts:38",{"_index":739,"title":{},"body":{"classes/Market.html":{}}}],["src/modules/user/models/user.model.data.ts:50",{"_index":779,"title":{},"body":{"classes/Reactions.html":{}}}],["src/modules/user/models/user.model.data.ts:55",{"_index":837,"title":{},"body":{"classes/Suspension.html":{}}}],["src/modules/user/models/user.model.data.ts:64",{"_index":836,"title":{},"body":{"classes/Suspension.html":{}}}],["src/modules/user/models/user.model.data.ts:69",{"_index":834,"title":{},"body":{"classes/Stats.html":{}}}],["src/modules/user/models/user.model.data.ts:72",{"_index":835,"title":{},"body":{"classes/Stats.html":{}}}],["src/modules/user/models/user.model.data.ts:75",{"_index":833,"title":{},"body":{"classes/Stats.html":{}}}],["src/modules/user/models/user.model.data.ts:78",{"_index":832,"title":{},"body":{"classes/Stats.html":{}}}],["src/modules/user/models/user.model.data.ts:81",{"_index":831,"title":{},"body":{"classes/Stats.html":{}}}],["src/modules/user/models/user.model.data.ts:86",{"_index":796,"title":{},"body":{"classes/Security.html":{}}}],["src/modules/user/models/user.model.data.ts:89",{"_index":791,"title":{},"body":{"classes/Security.html":{}}}],["src/modules/user/models/user.model.data.ts:92",{"_index":792,"title":{},"body":{"classes/Security.html":{}}}],["src/modules/user/models/user.model.data.ts:95",{"_index":793,"title":{},"body":{"classes/Security.html":{}}}],["src/modules/user/models/user.model.data.ts:98",{"_index":794,"title":{},"body":{"classes/Security.html":{}}}],["src/modules/user/models/user.model.ts",{"_index":945,"title":{},"body":{"classes/UserModel.html":{},"coverage.html":{}}}],["src/modules/user/models/user.model.ts:100",{"_index":963,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:103",{"_index":974,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:106",{"_index":989,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:109",{"_index":959,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:112",{"_index":980,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:115",{"_index":982,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:23",{"_index":951,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:30",{"_index":962,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:33",{"_index":955,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:42",{"_index":991,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:45",{"_index":975,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:53",{"_index":973,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:60",{"_index":985,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:67",{"_index":977,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:73",{"_index":953,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:76",{"_index":957,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:79",{"_index":954,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:82",{"_index":988,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:85",{"_index":986,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:88",{"_index":981,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:91",{"_index":987,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:94",{"_index":978,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/models/user.model.ts:97",{"_index":979,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/user/user.controller.ts",{"_index":857,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/modules/user/user.controller.ts:139",{"_index":870,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:174",{"_index":867,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:194",{"_index":880,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:40",{"_index":877,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:48",{"_index":883,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:69",{"_index":874,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.controller.ts:89",{"_index":873,"title":{},"body":{"controllers/UserController.html":{}}}],["src/modules/user/user.module.ts",{"_index":1002,"title":{},"body":{"modules/UserModule.html":{}}}],["src/modules/user/user.service.ts",{"_index":1005,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/modules/user/user.service.ts:100",{"_index":1017,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:120",{"_index":1026,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:20",{"_index":1010,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:213",{"_index":1021,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:224",{"_index":1025,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:28",{"_index":1016,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:304",{"_index":1012,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:354",{"_index":1019,"title":{},"body":{"injectables/UserService.html":{}}}],["src/modules/user/user.service.ts:374",{"_index":1014,"title":{},"body":{"injectables/UserService.html":{}}}],["standard",{"_index":1213,"title":{},"body":{"index.html":{}}}],["start",{"_index":1202,"title":{},"body":{"index.html":{}}}],["start:dev_",{"_index":1209,"title":{},"body":{"index.html":{}}}],["started",{"_index":1152,"title":{"index.html":{}},"body":{}}],["statements",{"_index":1079,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["stats",{"_index":644,"title":{"classes/Stats.html":{}},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["status",{"_index":602,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["statuscode",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["storage",{"_index":907,"title":{},"body":{"controllers/UserController.html":{}}}],["strategies/jwt.strategy",{"_index":270,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":714,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strict",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"interfaces/IJwtPayload.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"guards/RankGuard.html":{},"classes/Reactions.html":{},"classes/ReactionsDto.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":1221,"title":{},"body":{"index.html":{}}}],["subject",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{}}}],["submission",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{}}}],["subscribemessage('message",{"_index":702,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["successfully",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["sufficient",{"_index":733,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["super",{"_index":718,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":1236,"title":{},"body":{"modules.html":{}}}],["suspension",{"_index":634,"title":{"classes/Suspension.html":{}},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["svg",{"_index":1237,"title":{},"body":{"modules.html":{}}}],["system",{"_index":635,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"injectables/UserService.html":{}}}],["table",{"_index":1098,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1097,"title":{},"body":{"coverage.html":{}}}],["tachi",{"_index":949,"title":{},"body":{"classes/UserModel.html":{},"injectables/UserService.html":{}}}],["team",{"_index":1158,"title":{},"body":{"index.html":{}}}],["template",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["test",{"_index":1156,"title":{},"body":{"index.html":{}}}],["tested",{"_index":1178,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1159,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(userid",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.sendpasswordreset(userid",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signin(user",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(user",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifyemail(userid",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifysecurity(security).then",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["this.configservice.get(configurationenum.port_api",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["this.envconfig",{"_index":585,"title":{},"body":{"classes/ConfigService.html":{}}}],["this.envconfig[key",{"_index":599,"title":{},"body":{"classes/ConfigService.html":{}}}],["this.i18nservice.translate",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["this.i18nservice.translate('translations.auth.service.error_signup",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.i18nservice.translate('translations.auth.service.no_permission",{"_index":463,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.i18nservice.translate('translations.auth.service.session_invalid",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.i18nservice.translate('translations.auth.service.user_not_found",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.i18nservice.translate('translations.general.process_failed",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.i18nservice.translate('translations.general.saved",{"_index":903,"title":{},"body":{"controllers/UserController.html":{}}}],["this.i18nservice.translate('translations.user.service.type_photo",{"_index":1055,"title":{},"body":{"injectables/UserService.html":{}}}],["this.jwtservice.sign(payload",{"_index":467,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.logger.error('.env",{"_index":582,"title":{},"body":{"classes/ConfigService.html":{}}}],["this.logger.error(`eliminando",{"_index":1066,"title":{},"body":{"injectables/UserService.html":{}}}],["this.logger.log",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{},"classes/GeneralGateway.html":{},"injectables/UserService.html":{}}}],["this.logger.log(`verifying",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.mailservice",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.reflector.get",{"_index":772,"title":{},"body":{"guards/RankGuard.html":{}}}],["this.server.emit(`user:${client.query.user}:online",{"_index":695,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["this.usermodel",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.usermodel(user",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel.findbyid(id",{"_index":724,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["this.usermodel.findbyid(toid",{"_index":1059,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyid(userid",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.usermodel.findbyidanddelete(id).catch",{"_index":1074,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyidandupdate(id",{"_index":1052,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findone",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usermodel.findoneandupdate",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice",{"_index":923,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.addreaction(reactionsdto).then",{"_index":936,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getpublicuser(userid",{"_index":901,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getusers",{"_index":904,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.removereaction(ofid",{"_index":942,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateonlineuser(client.query.user",{"_index":701,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["this.userservice.updateuser",{"_index":902,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["time",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{},"classes/GeneralGateway.html":{},"index.html":{}}}],["timestamps",{"_index":613,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{}}}],["timezone",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{},"classes/GeneralGateway.html":{},"dependencies.html":{}}}],["todate",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{},"classes/GeneralGateway.html":{}}}],["toid",{"_index":783,"title":{},"body":{"classes/ReactionsDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["toid).then",{"_index":943,"title":{},"body":{"controllers/UserController.html":{}}}],["token",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"dependencies.html":{}}}],["token).then",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["token_secret",{"_index":589,"title":{},"body":{"classes/ConfigService.html":{},"miscellaneous/enumerations.html":{}}}],["tokenemail",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokengenerator",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokengenerator().generate",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokenpassword",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["tokenpasword",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokenuser",{"_index":466,"title":{},"body":{"injectables/AuthService.html":{}}}],["transaction",{"_index":657,"title":{"classes/Transaction.html":{}},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{},"coverage.html":{}}}],["transactionbuyer",{"_index":669,"title":{"classes/TransactionBuyer.html":{}},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"coverage.html":{}}}],["transactions",{"_index":950,"title":{},"body":{"classes/UserModel.html":{},"injectables/UserService.html":{}}}],["transformer",{"_index":1112,"title":{},"body":{"dependencies.html":{}}}],["translations.auth.controller.account_confirmation",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{}}}],["translations.auth.controller.change_password",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{}}}],["translations.auth.controller.password_reset",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["translations.auth.controller.security_challenge_completed",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["translations.auth.controller.security_updated",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["translations.auth.controller.session_confirmation",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["translations.auth.controller.session_logout",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["translations.auth.controller.user_created",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["translations.auth.service.confirmation_error_token",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["translations.auth.service.duplicate_user",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["translations.auth.service.invalid_credentials",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["translations.auth.service.password_error_reset_email",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{}}}],["translations.auth.service.security_code_failed",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{}}}],["translations.auth.service.security_no_enabled",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["translations.auth.service.send_email",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["translations.auth.service.session_already_exists",{"_index":454,"title":{},"body":{"injectables/AuthService.html":{}}}],["translations.auth.service.session_not_exists",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{}}}],["translations.auth.service.user_not_found",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{}}}],["translations.auth.service.user_session_error",{"_index":553,"title":{},"body":{"injectables/AuthService.html":{}}}],["translations.general.account_no_permission",{"_index":1048,"title":{},"body":{"injectables/UserService.html":{}}}],["translations.user.controller.cover_photo_updated",{"_index":934,"title":{},"body":{"controllers/UserController.html":{}}}],["translations.user.controller.profile_photo_updated",{"_index":928,"title":{},"body":{"controllers/UserController.html":{}}}],["translations.user.controller.reaction_added",{"_index":937,"title":{},"body":{"controllers/UserController.html":{}}}],["translations.user.controller.reactions_deleted",{"_index":944,"title":{},"body":{"controllers/UserController.html":{}}}],["transport",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["trim",{"_index":607,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{}}}],["true",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"guards/RankGuard.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{}}}],["try",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["ts",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["tslint:disable",{"_index":666,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{}}}],["two",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{}}}],["twofactor",{"_index":459,"title":{},"body":{"injectables/AuthService.html":{},"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["type",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{},"classes/Email.html":{},"classes/GeneralGateway.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"guards/RankGuard.html":{},"classes/Reactions.html":{},"classes/ReactionsDto.html":{},"classes/Security.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/Sessions.html":{},"classes/SignInDto.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["typegoose",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typegoose/typegoose",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"classes/Email.html":{},"injectables/JwtStrategy.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typegoose/typegoose/lib/defaultclasses",{"_index":614,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{}}}],["typegoosemodule",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["typegoosemodule.forfeature([usermodel",{"_index":274,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["typegoosemodule.forrootasync",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["types/moment",{"_index":1106,"title":{},"body":{"dependencies.html":{}}}],["tz('america/new_york",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"classes/GeneralGateway.html":{}}}],["unauthorizedexception",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["undefined",{"_index":605,"title":{},"body":{"classes/Email.html":{},"classes/Membership.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Transaction.html":{},"classes/UserModel.html":{}}}],["unique",{"_index":665,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{},"classes/UserModel.html":{}}}],["unwanted",{"_index":1183,"title":{},"body":{"index.html":{}}}],["update",{"_index":1046,"title":{},"body":{"injectables/UserService.html":{}}}],["updatedat",{"_index":461,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["updateonlineuser",{"_index":1009,"title":{},"body":{"injectables/UserService.html":{}}}],["updateonlineuser(id",{"_index":1020,"title":{},"body":{"injectables/UserService.html":{}}}],["updatephoto",{"_index":924,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatephoto(userid",{"_index":1022,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuser",{"_index":864,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuser(updateuserdto",{"_index":881,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserdto",{"_index":850,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserdto.id",{"_index":1037,"title":{},"body":{"injectables/UserService.html":{}}}],["updating",{"_index":1036,"title":{},"body":{"injectables/UserService.html":{}}}],["uploadedfile",{"_index":887,"title":{},"body":{"controllers/UserController.html":{}}}],["uploads/${id}/cover_photo/${file.filename",{"_index":932,"title":{},"body":{"controllers/UserController.html":{}}}],["uploads/cover_photo",{"_index":930,"title":{},"body":{"controllers/UserController.html":{}}}],["uploads/cover_photo/${file.filename",{"_index":935,"title":{},"body":{"controllers/UserController.html":{}}}],["uploads/profile_photo",{"_index":909,"title":{},"body":{"controllers/UserController.html":{}}}],["uploads/profile_photo/${file.filename",{"_index":925,"title":{},"body":{"controllers/UserController.html":{}}}],["upvote",{"_index":1060,"title":{},"body":{"injectables/UserService.html":{}}}],["uri",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["use",{"_index":734,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{}}}],["useclass",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["usecreateindex",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory(configservice",{"_index":279,"title":{},"body":{"modules/AuthModule.html":{}}}],["usefindandmodify",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useguards(undefined)@patch('/account/security/change",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":886,"title":{},"body":{"controllers/UserController.html":{}}}],["useinterceptors(undefined)@post('/upload/cover/:id",{"_index":869,"title":{},"body":{"controllers/UserController.html":{}}}],["usenewurlparser",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["usepipes",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["usepipes(new",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GeneralGateway.html":{},"injectables/JwtStrategy.html":{},"guards/RankGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.controller",{"_index":1003,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":893,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":852,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":854,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:13",{"_index":855,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:6",{"_index":853,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.email.expiration",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.email.key",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.email.status",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.email.token",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.ip",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.model.data",{"_index":994,"title":{},"body":{"classes/UserModel.html":{}}}],["user.name",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password.expiration",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password.key",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password.status",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password.token",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.rank",{"_index":778,"title":{},"body":{"guards/RankGuard.html":{}}}],["user.rank.some((rank",{"_index":776,"title":{},"body":{"guards/RankGuard.html":{}}}],["user.reactions.push",{"_index":1061,"title":{},"body":{"injectables/UserService.html":{}}}],["user.save",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.save().catch",{"_index":1065,"title":{},"body":{"injectables/UserService.html":{}}}],["user.save().catch(error",{"_index":1062,"title":{},"body":{"injectables/UserService.html":{}}}],["user.security.code1",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.security.code2",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.security.code3",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.security.code4",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.security.code5",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.security.enabled",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":891,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.username",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user_id",{"_index":471,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercontroller",{"_index":856,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usercreated",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercreated.email.expiration",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercreated.email.key",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercreated.email.token",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercreated.ip",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercreated.name",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercreated.password.key",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["usercreated.password.token",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["userexists",{"_index":723,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["userexists.email.key",{"_index":728,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["userexists.email.status",{"_index":729,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["userexists.password.status",{"_index":730,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["userexists.suspension.status",{"_index":731,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["userexists.username",{"_index":727,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["userid",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["useridrequest",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["userip",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["userip).then",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["usermodel",{"_index":175,"title":{"classes/UserModel.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserModel.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["usermodule",{"_index":43,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/IJwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/UserModel.html":{},"injectables/UserService.html":{}}}],["userrankrequest",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["userrequestid",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["userrequestrank",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UserController.html":{}}}],["users",{"_index":996,"title":{},"body":{"classes/UserModel.html":{},"injectables/UserService.html":{}}}],["userservice",{"_index":680,"title":{"injectables/UserService.html":{}},"body":{"classes/GeneralGateway.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersessiondexists",{"_index":445,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersessionsdoc",{"_index":444,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersessionsdoc.save",{"_index":462,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersessionsdoc.sessions.push",{"_index":458,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersessionsdoc.sessions[usersessionsdoc.sessions.length",{"_index":464,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersignin",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersignin._id",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersignin.email.key",{"_index":442,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersignin.email.status",{"_index":455,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersignin.password.key",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersignin.password.status",{"_index":456,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersignin.premium.status",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersignin.rank.admin",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersignin.rank.mod",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersignin.rank.seller",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersignin.suspension.reason",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersignin.suspension.status",{"_index":457,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersignin.username",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["useunifiedtopology",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["usevalue",{"_index":558,"title":{},"body":{"modules/ConfigModule.html":{}}}],["usuario",{"_index":1071,"title":{},"body":{"injectables/UserService.html":{}}}],["utc",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{},"classes/GeneralGateway.html":{}}}],["validate",{"_index":709,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":711,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validationpipe",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["validator",{"_index":790,"title":{},"body":{"classes/ReactionsDto.html":{},"classes/SecurityCode.html":{},"classes/SecurityDto.html":{},"classes/SecurityUpdateDto.html":{},"classes/SignInDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"classes/GeneralGateway.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":910,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["variables",{"_index":1243,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["verify",{"_index":725,"title":{},"body":{"injectables/JwtStrategy.html":{},"index.html":{}}}],["verify_email_request",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyaccount",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyaccount(userid",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifyemail",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyemail(userid",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifying",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifysecurity",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["verifysecurity(security",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifysecurity(securitydto",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifysession",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["verifysession(userid",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["views/email",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["websocketgateway",{"_index":691,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["websocketserver",{"_index":685,"title":{},"body":{"classes/GeneralGateway.html":{}}}],["welcome",{"_index":964,"title":{},"body":{"classes/UserModel.html":{}}}],["without",{"_index":1168,"title":{},"body":{"index.html":{}}}],["won",{"_index":646,"title":{},"body":{"classes/Email.html":{},"classes/Market.html":{},"classes/Membership.html":{},"classes/Notifications.html":{},"classes/Online.html":{},"classes/Password.html":{},"classes/Rank.html":{},"classes/Reactions.html":{},"classes/Security.html":{},"classes/Sessions.html":{},"classes/Stats.html":{},"classes/Suspension.html":{},"classes/Transaction.html":{},"classes/TransactionBuyer.html":{}}}],["works",{"_index":1164,"title":{},"body":{"index.html":{}}}],["world",{"_index":127,"title":{},"body":{"injectables/AppService.html":{},"classes/GeneralGateway.html":{}}}],["yarn",{"_index":1203,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ConfigModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, CacheModule, CacheInterceptor } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from './config/config.module';\nimport { ConfigService } from './config/config.service';\nimport { ConfigurationEnum } from './keys/configuration.enum';\nimport { TypegooseModule } from 'nestjs-typegoose';\nimport { MailerModule, HandlebarsAdapter } from '@nest-modules/mailer';\nimport {\n  I18nModule,\n  QueryResolver,\n  HeaderResolver,\n  CookieResolver,\n} from 'nestjs-i18n';\nimport { join } from 'path';\nimport { UserModule } from './modules/user/user.module';\nimport { AuthModule } from './auth/auth.module';\nimport { GeneralGateway } from './gateways/general.gateway';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\n\n@Module({\n  imports: [\n    TypegooseModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        uri: configService.get(ConfigurationEnum.DB_HOST),\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n        useCreateIndex: true,\n        useFindAndModify: false,\n      }),\n    }),\n    MailerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        transport: configService.get(ConfigurationEnum.EMAIL_HOST),\n        defaults: {\n          from: configService.get(ConfigurationEnum.EMAIL_FROM),\n        },\n        template: {\n          dir: __dirname + '/views/email/',\n          adapter: new HandlebarsAdapter(),\n          options: {\n            strict: true,\n          },\n        },\n      }),\n    }),\n    I18nModule.forRoot({\n      path: join(__dirname, '/i18n'),\n      filePattern: '*.json',\n      fallbackLanguage: 'en_US',\n      saveMissing: false,\n      resolvers: [\n        new QueryResolver(['lang', 'locale', 'l']),\n        new HeaderResolver(),\n        new CookieResolver(['lang', 'locale', 'l']),\n      ],\n    }),\n    ConfigModule,\n    UserModule,\n    AuthModule,\n    CacheModule.register(),\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    GeneralGateway,\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: CacheInterceptor,\n    },\n  ],\n})\nexport class AppModule {\n  static port: number | string;\n  constructor(private readonly configService: ConfigService) {\n    AppModule.port = this.configService.get(ConfigurationEnum.PORT_API);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                ChangeSecurity\n                            \n                            \n                                    Public\n                                    Async\n                                LogOut\n                            \n                            \n                                    Public\n                                    Async\n                                PasswordChange\n                            \n                            \n                                    Public\n                                    Async\n                                PasswordResetRequest\n                            \n                            \n                                    Public\n                                    Async\n                                SignIn\n                            \n                            \n                                    Public\n                                    Async\n                                SignUp\n                            \n                            \n                                    Public\n                                    Async\n                                VerifyAccount\n                            \n                            \n                                    Public\n                                    Async\n                                VerifySecurity\n                            \n                            \n                                    Public\n                                    Async\n                                VerifySession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            ChangeSecurity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ChangeSecurity(securityUpdate: SecurityUpdateDto, userIdRequest: string, userRankRequest: string[], lang: string, response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Patch('/account/security/change')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    securityUpdate\n                                    \n                                                SecurityUpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userIdRequest\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userRankRequest\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lang\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            LogOut\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    LogOut(userId: string, sesionId: string, lang: string, response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/account/logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sesionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lang\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            PasswordChange\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    PasswordChange(userId: string, tokenPassword: string, newPassword: string, lang: string, response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/account/password/change')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:140\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lang\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            PasswordResetRequest\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    PasswordResetRequest(userId: string, userIp: string, lang: string, response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/account/password/reset')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userIp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lang\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            SignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    SignIn(user: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                SignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            SignUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    SignUp(user: UserModel, response, lang: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/signup')@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lang\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            VerifyAccount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    VerifyAccount(userId: string, token: string, lang: string, response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/account/verify/email')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lang\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            VerifySecurity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    VerifySecurity(security: SecurityDto, lang: string, response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/account/verify/security')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    security\n                                    \n                                                SecurityDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lang\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            VerifySession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    VerifySession(userId: string, sessioId: string, sessioIp: string, sessioDevice: string, lang: string, response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/account/verify/session')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sessioId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sessioIp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sessioDevice\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lang\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Put,\n  UsePipes,\n  ValidationPipe,\n  Body,\n  Res,\n  HttpStatus,\n  Get,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { I18nService, I18nLang } from 'nestjs-i18n';\nimport { UserModel } from '../modules/user/models/user.model';\nimport { SignInDto } from './dto/signin.dto';\nimport { SecurityDto } from './dto/security.dto';\nimport { SecurityUpdateDto } from './dto/security.update.dto';\nimport { AuthGuard } from '@nestjs/passport';\nimport { GetUser } from '../decorators/user.decorator';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly i18nService: I18nService,\n  ) {}\n\n  @Put('/signup')\n  @UsePipes(new ValidationPipe())\n  public async SignUp(\n    @Body() user: UserModel,\n    @Res() response,\n    @I18nLang() lang: string,\n  ) {\n    await this.authService.SignUp(user);\n    response.status(HttpStatus.CREATED).json({\n      statusCode: HttpStatus.CREATED,\n      username: user.username,\n      email: user.email,\n      message: this.i18nService.translate(\n        'translations.auth.controller.user_created',\n        {\n          lang,\n        },\n      ),\n    });\n  }\n\n  @Post('/signin')\n  public async SignIn(@Body() user: SignInDto) {\n    return await this.authService.SignIn(user);\n  }\n\n  @Patch('/account/verify/email')\n  public async VerifyAccount(\n    @Body('userId') userId: string,\n    @Body('token') token: string,\n    @I18nLang() lang: string,\n    @Res() response,\n  ) {\n    return await this.authService.VerifyEmail(userId, token).then(() => {\n      response.status(HttpStatus.OK).json({\n        statusCode: HttpStatus.OK,\n        message: this.i18nService.translate(\n          'translations.auth.controller.account_confirmation',\n          {\n            lang,\n          },\n        ),\n      });\n    });\n  }\n\n  @Post('/account/verify/security')\n  public async VerifySecurity(\n    @Body() security: SecurityDto,\n    @I18nLang() lang: string,\n    @Res() response,\n  ) {\n    return await this.authService.VerifySecurity(security).then(() => {\n      response.status(HttpStatus.OK).json({\n        statusCode: HttpStatus.OK,\n        message: this.i18nService.translate(\n          'translations.auth.controller.security_challenge_completed',\n          {\n            lang,\n          },\n        ),\n      });\n    });\n  }\n\n  @Post('/account/verify/session')\n  public async VerifySession(\n    @Body('userId') userId: string,\n    @Body('sessioId') sessioId: string,\n    @Body('sessionIp') sessioIp: string,\n    @Body('sessionDevice') sessioDevice: string,\n    @I18nLang() lang: string,\n    @Res() response,\n  ) {\n    return await this.authService\n      .VerifySession(userId, sessioDevice, sessioIp, sessioId)\n      .then(() => {\n        response.status(HttpStatus.OK).json({\n          statusCode: HttpStatus.OK,\n          message: this.i18nService.translate(\n            'translations.auth.controller.session_confirmation',\n            {\n              lang,\n            },\n          ),\n        });\n      });\n  }\n\n  @Post('/account/password/reset')\n  public async PasswordResetRequest(\n    @Body('userId') userId: string,\n    @Body('userIp') userIp: string,\n    @I18nLang() lang: string,\n    @Res() response,\n  ) {\n    return await this.authService.SendPasswordReset(userId, userIp).then(() => {\n      response.status(HttpStatus.OK).json({\n        statusCode: HttpStatus.OK,\n        message: this.i18nService.translate(\n          'translations.auth.controller.password_reset',\n          {\n            lang,\n          },\n        ),\n      });\n    });\n  }\n\n  @Patch('/account/password/change')\n  public async PasswordChange(\n    @Body('userId') userId: string,\n    @Body('tokenPassword') tokenPassword: string,\n    @Body('newPassword') newPassword: string,\n    @I18nLang() lang: string,\n    @Res() response,\n  ) {\n    return await this.authService\n      .ChangePassword(userId, tokenPassword, newPassword)\n      .then(() => {\n        response.status(HttpStatus.OK).json({\n          statusCode: HttpStatus.OK,\n          message: this.i18nService.translate(\n            'translations.auth.controller.change_password',\n            {\n              lang,\n            },\n          ),\n        });\n      });\n  }\n\n  @UseGuards(AuthGuard())\n  @Patch('/account/security/change')\n  public async ChangeSecurity(\n    @Body() securityUpdate: SecurityUpdateDto,\n    @GetUser('id') userIdRequest: string,\n    @GetUser('rank') userRankRequest: string[],\n    @I18nLang() lang: string,\n    @Res() response,\n  ) {\n    return await this.authService\n      .ChangeSecurity(securityUpdate, userIdRequest, userRankRequest)\n      .then(() => {\n        response.status(HttpStatus.OK).json({\n          statusCode: HttpStatus.OK,\n          message: this.i18nService.translate(\n            'translations.auth.controller.security_updated',\n            {\n              lang,\n            },\n          ),\n        });\n      });\n  }\n\n  @Post('/account/logout')\n  public async LogOut(\n    @Body('userId') userId: string,\n    @Body('sesionId') sesionId: string,\n    @I18nLang() lang: string,\n    @Res() response,\n  ) {\n    return await this.authService.LogOut(userId, sesionId).then(() => {\n      response.status(HttpStatus.OK).json({\n        statusCode: HttpStatus.OK,\n        message: this.i18nService.translate(\n          'translations.auth.controller.session_logout',\n          {\n            lang,\n          },\n        ),\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { TypegooseModule } from 'nestjs-typegoose';\nimport { UserModel } from '../modules/user/models/user.model';\nimport { ConfigService } from '../config/config.service';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { PassportModule } from '@nestjs/passport';\nimport { ConfigModule } from '../config/config.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigurationEnum } from '../keys/configuration.enum';\n\n@Module({\n  imports: [\n    TypegooseModule.forFeature([UserModel]),\n    PassportModule.register({\n      defaultStrategy: 'jwt',\n    }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory(configService: ConfigService) {\n        return {\n          secret: configService.get(ConfigurationEnum.TOKEN_SECRET),\n          signOptions: {\n            expiresIn: '15d',\n          },\n        };\n      },\n    }),\n  ],\n  providers: [AuthService, ConfigService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [JwtStrategy, PassportModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                ChangePassword\n                            \n                            \n                                    Public\n                                    Async\n                                ChangeSecurity\n                            \n                            \n                                    Public\n                                    Async\n                                LogOut\n                            \n                            \n                                    Public\n                                    Async\n                                SendPasswordReset\n                            \n                            \n                                    Public\n                                    Async\n                                SignIn\n                            \n                            \n                                    Public\n                                    Async\n                                SignUp\n                            \n                            \n                                    Public\n                                    Async\n                                VerifyEmail\n                            \n                            \n                                    Public\n                                    Async\n                                VerifySecurity\n                            \n                            \n                                    Public\n                                    Async\n                                VerifySession\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: ReturnModelType<>, mailService: MailerService, configService: ConfigService, jwtService: JwtService, i18nService: I18nRequestScopeService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                    ReturnModelType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18nService\n                                                  \n                                                        \n                                                                    I18nRequestScopeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            ChangePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ChangePassword(userId: string, tokenPasword: string, newPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:500\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenPasword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            ChangeSecurity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ChangeSecurity(securityUpdate: SecurityUpdateDto, userRequestId: string, userRequestRank: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:564\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    securityUpdate\n                                    \n                                                SecurityUpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userRequestId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userRequestRank\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            LogOut\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    LogOut(userId: string, sessionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:615\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sessionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            SendPasswordReset\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    SendPasswordReset(userId: string, userIp: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:430\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userIp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            SignIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    SignIn(signInDto: SignInDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signInDto\n                                    \n                                                SignInDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            SignUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    SignUp(user: UserModel)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            VerifyEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    VerifyEmail(userId: string, tokenEmail: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:292\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    tokenEmail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            VerifySecurity\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    VerifySecurity(securityDto: SecurityDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:374\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    securityDto\n                                    \n                                                SecurityDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            VerifySession\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    VerifySession(userId: string, sessionDevice: string, sessionIp: string, sessionId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:344\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sessionDevice\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sessionIp\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sessionId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Logger\n\n                        \n                    \n                    \n                        \n                            Default value : new Logger('Authentication')\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.service.ts:31\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  Logger,\n  BadGatewayException,\n  ConflictException,\n  BadRequestException,\n  UnauthorizedException,\n  NotFoundException,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { InjectModel } from 'nestjs-typegoose';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserModel } from '../modules/user/models/user.model';\nimport { ReturnModelType } from '@typegoose/typegoose';\nimport { genSalt, hash, compare } from 'bcryptjs';\nimport { TokenGenerator } from 'ts-token-generator';\nimport { MailerService } from '@nest-modules/mailer';\nimport { ConfigService } from '../config/config.service';\nimport { RanksEnum } from '../keys/ranks.enum';\nimport { I18nRequestScopeService } from 'nestjs-i18n';\nimport * as moments from 'moment';\nimport * as momentstz from 'moment-timezone';\nimport { SignInDto } from './dto/signin.dto';\nimport { SecurityDto } from './dto/security.dto';\nimport { ConfigurationEnum } from '../keys/configuration.enum';\nimport { IJwtPayload } from './jwt.payload.interface';\nimport { SecurityUpdateDto } from './dto/security.update.dto';\n\n@Injectable()\nexport class AuthService {\n  private readonly logger: Logger = new Logger('Authentication');\n\n  constructor(\n    @InjectModel(UserModel)\n    private readonly userModel: ReturnModelType,\n    private readonly mailService: MailerService,\n    private readonly configService: ConfigService,\n    private readonly jwtService: JwtService,\n    private readonly i18nService: I18nRequestScopeService,\n  ) {}\n\n  public async SignUp(user: UserModel): Promise {\n    this.logger.log(\n      `Creating a new user with username ${user.username} and with email ${user.email.key}.`,\n    );\n    const userCreated = new this.userModel(user);\n    const passwordSalt = await genSalt(10);\n\n    const timezone = momentstz()\n      .tz('America/New_York')\n      .utc()\n      .format();\n\n    const time = moments(timezone)\n      .add(15, 'minutes')\n      .toDate();\n\n    userCreated.email.token = new TokenGenerator().generate();\n    userCreated.email.expiration = time;\n    userCreated.password.key = await hash(\n      userCreated.password.key,\n      passwordSalt,\n    );\n    userCreated.password.token = new TokenGenerator().generate();\n    userCreated.ip = user.ip;\n    await userCreated\n      .save()\n      .then(() => {\n        this.logger.log(\n          `User successfully created with username ${user.username}`,\n        );\n        this.mailService\n          .sendMail({\n            to: userCreated.email.key,\n            from: 'saturnoxspace@outlook.com',\n            subject: 'Verification account | Akatsuki Project',\n            template: 'verify_email_request',\n            context: {\n              name: userCreated.name,\n              username: user.username,\n              password: user.password.key,\n              confirm_account: `${this.configService.get(\n                ConfigurationEnum.SERVER_HOST,\n              )}auth/email/verification/${userCreated._id}/${\n                userCreated.email.token\n              }`,\n              google_play_app: 'https://play.google.com/akatsukiapp_',\n            },\n          })\n          .catch(() => {\n            this.logger.error(\n              `Could not send email to user ${user.username} with email ${user.email.key}.`,\n            );\n            throw new BadGatewayException(\n              this.i18nService.translate(\n                'translations.auth.service.send_email',\n              ),\n            );\n          });\n      })\n      .catch((error: any) => {\n        if (error.code === 11000) {\n          this.logger.error(\n            `Could not create user ${user.username} because a user with this data already exists.`,\n          );\n          throw new ConflictException(\n            this.i18nService.translate(\n              'translations.auth.service.duplicate_user',\n            ),\n          );\n        }\n\n        this.logger.error(\n          `There was a problem processing the user registration request for ${user.username}.`,\n        );\n        throw new BadRequestException(\n          this.i18nService.translate('translations.auth.service.error_signup'),\n        );\n      });\n  }\n\n  public async SignIn(\n    signInDto: SignInDto,\n  ): Promise {\n    const { email, password, device, ip } = signInDto;\n    const userSignIn: UserModel = await this.userModel.findOne({\n      'email.key': email,\n    });\n    this.logger.log(\n      `Logging into the account on the device $ {device} with IP ${ip}.`,\n    );\n    const timezone = momentstz()\n      .tz('America/New_York')\n      .utc()\n      .format();\n\n    const time = moments(timezone).toDate();\n\n    if (!userSignIn) {\n      this.logger.error(\n        `The attempt to login to the account on the device ${device} with IP $ {ip} was rejected due to incorrect cdentials.`,\n      );\n\n      throw new UnauthorizedException(\n        this.i18nService.translate(\n          'translations.auth.service.invalid_credentials',\n        ),\n      );\n    }\n\n    const isPasswordMatch = await compare(password, userSignIn.password.key);\n    if (!isPasswordMatch) {\n      this.logger.error(\n        `The attempt to login to the account ${userSignIn.username} on the device ${device} with IP ${ip} was rejected due to incorrect cdentials.`,\n      );\n\n      throw new UnauthorizedException(\n        this.i18nService.translate(\n          'translations.auth.service.invalid_credentials',\n        ),\n      );\n    }\n\n    const rankData: string[] = [];\n    if (userSignIn.rank.admin) {\n      rankData.push(RanksEnum.ADMINISTRATOR);\n    }\n\n    if (userSignIn.rank.mod) {\n      rankData.push(RanksEnum.MODERATOR);\n    }\n\n    if (userSignIn.rank.seller) {\n      rankData.push(RanksEnum.SELLER);\n    }\n\n    if (userSignIn.premium.status) {\n      rankData.push(RanksEnum.PREMIUM);\n    }\n\n    this.logger.log(\n      `Generating ${userSignIn.username} access token for device ${device} with IP ${ip}.`,\n    );\n\n    const payload: IJwtPayload = {\n      id: userSignIn._id,\n      email: userSignIn.email.key,\n      username: userSignIn.username,\n      rank: rankData,\n    };\n\n    const userSessionsDoc = await this.userModel.findOne({\n      'email.key': email,\n    });\n\n    if (!userSessionsDoc) {\n      this.logger.error(\n        `The attempt to login to the account ${userSignIn.username} on the device ${device} with IP ${ip} was rejected due to incorrect cdentials.`,\n      );\n\n      throw new UnauthorizedException(\n        this.i18nService.translate(\n          'translations.auth.service.invalid_credentials',\n        ),\n      );\n    }\n\n    const userSessiondExists = await this.userModel.findOne({\n      // prettier-ignore\n      '_id': userSignIn._id,\n      'sessions.device': device,\n      'sessions.ip': ip,\n    });\n\n    if (userSessiondExists) {\n      this.logger.error(\n        `The attempt to log on to the account ${userSignIn.username} on the device ${device} with IP ${ip} was rejected because there is already a session registered on that device.`,\n      );\n\n      throw new UnauthorizedException(\n        this.i18nService.translate(\n          'translations.auth.service.session_already_exists',\n        ),\n      );\n    } else {\n      if (\n        userSignIn.email.status &&\n        userSignIn.password.status &&\n        !userSignIn.suspension.status\n      ) {\n        userSessionsDoc.sessions.push({\n          device,\n          ip,\n          twofactor: false,\n          createdAt: time,\n          updatedAt: time,\n        });\n        await userSessionsDoc.save();\n      } else {\n        throw new UnauthorizedException(\n          this.i18nService.translate('translations.auth.service.no_permission'),\n        );\n      }\n    }\n\n    const sessionId =\n      userSessionsDoc.sessions[userSessionsDoc.sessions.length - 1]._id;\n    const tokenUser = this.jwtService.sign(payload);\n    if (\n      tokenUser &&\n      userSignIn.email.status &&\n      userSignIn.password.status &&\n      !userSignIn.suspension.status &&\n      sessionId\n    ) {\n      this.logger.log(\n        `The attempt to log in to the account ${userSignIn.username} in the disposition ${device} with IP ${ip} was successfully completed and the session was logged into the account.`,\n      );\n      return {\n        user_id: userSignIn._id,\n        session_id: sessionId,\n        confirmation: userSignIn.email.status,\n        password: userSignIn.password.status,\n        ban: userSignIn.suspension.status,\n        ban_reason: '',\n        token: tokenUser,\n      };\n    } else {\n      this.logger.error(\n        `The attempt to log in to the account ${userSignIn.username} in the disposition ${device} with IP ${ip} was rejected because the account has insufficient permissions to generate an access token and a session.`,\n      );\n      return {\n        user_id: userSignIn._id,\n        session_id: '',\n        confirmation: userSignIn.email.status,\n        password: userSignIn.password.status,\n        ban: userSignIn.suspension.status,\n        ban_reason: userSignIn.suspension.reason,\n        token: '',\n      };\n    }\n  }\n\n  public async VerifyEmail(userId: string, tokenEmail: string): Promise {\n    let user;\n    try {\n      user = await this.userModel.findById(userId);\n    } catch (error) {\n      throw new ConflictException(\n        this.i18nService.translate('translations.auth.service.user_not_found'),\n      );\n    }\n\n    if (!user) {\n      this.logger.error(\n        `The request for confirmation of electronic corrode could not be completed because there is no user with this data.`,\n      );\n\n      throw new NotFoundException(\n        this.i18nService.translate('translations.auth.service.user_not_found'),\n      );\n    }\n\n    this.logger.log(`Verifying email address for account ${user.username}.`);\n\n    const timezone = momentstz()\n      .tz('America/New_York')\n      .utc()\n      .format();\n\n    const time = moments(timezone)\n      .add(15, 'minutes')\n      .toDate();\n\n    if (tokenEmail === user.email.token) {\n      this.logger.log(\n        `Email address for the account ${user.username} has been successfully confirmed and the account login was enabled.`,\n      );\n\n      user.email.status = true;\n      user.email.expiration = time;\n      user.email.token = new TokenGenerator().generate();\n      user.save();\n    } else {\n      this.logger.error(\n        `The email activation of ${user.username} could not be completed because the Token is invalid or has expired.`,\n      );\n      throw new BadRequestException(\n        this.i18nService.translate(\n          'translations.auth.service.confirmation_error_token',\n        ),\n      );\n    }\n  }\n\n  public async VerifySession(\n    userId: string,\n    sessionDevice: string,\n    sessionIp: string,\n    sessionId: string,\n  ): Promise {\n    let userSessiondExists;\n    try {\n      userSessiondExists = await this.userModel.findOne({\n        // prettier-ignore\n        '_id': userId,\n        'sessions._id': sessionId,\n        'sessions.device': sessionDevice,\n        'sessions.ip': sessionIp,\n      });\n    } catch (error) {\n      throw new BadRequestException(\n        this.i18nService.translate('translations.auth.service.session_invalid'),\n      );\n    }\n\n    if (!userSessiondExists) {\n      throw new UnauthorizedException(\n        this.i18nService.translate(\n          'translations.auth.service.session_not_exists',\n        ),\n      );\n    }\n  }\n\n  public async VerifySecurity(securityDto: SecurityDto) {\n    const user: UserModel = await this.userModel\n      .findById(securityDto.id)\n      .catch(() => {\n        throw new ConflictException(\n          this.i18nService.translate(\n            'translations.auth.service.user_not_found',\n          ),\n        );\n      });\n\n    if (!user) {\n      this.logger.error(\n        `The security challenge could not be completed because there is no account with this data.`,\n      );\n\n      throw new NotFoundException(\n        this.i18nService.translate('translations.auth.service.user_not_found'),\n      );\n    }\n\n    this.logger.log(\n      `Verifying security codes to be able to complete the login in the account ${user.username}.`,\n    );\n\n    if (!user.security.enabled) {\n      this.logger.error(\n        `The security challenge could not be processed because the ${user.username} account does not have two-factor security enabled.`,\n      );\n\n      throw new ConflictException(\n        this.i18nService.translate(\n          'translations.auth.service.security_no_enabled',\n        ),\n      );\n    }\n\n    if (\n      securityDto.code1 !== user.security.code1 ||\n      securityDto.code2 !== user.security.code2 ||\n      securityDto.code3 !== user.security.code3 ||\n      securityDto.code4 !== user.security.code4 ||\n      securityDto.code5 !== user.security.code5\n    ) {\n      this.logger.error(\n        `Security check for account ${user.username} rejected due to incorrectly entered codes.`,\n      );\n\n      throw new UnauthorizedException(\n        this.i18nService.translate(\n          'translations.auth.service.security_code_failed',\n        ),\n      );\n    }\n  }\n\n  public async SendPasswordReset(userId: string, userIp: string) {\n    let user;\n    try {\n      user = await this.userModel.findById(userId);\n    } catch (error) {\n      throw new ConflictException(\n        this.i18nService.translate('translations.auth.service.user_not_found'),\n      );\n    }\n    const tokenPassword = new TokenGenerator().generate();\n\n    if (!user) {\n      this.logger.error(\n        `The request for password submission could not be completed because there is no account with this data.`,\n      );\n\n      throw new NotFoundException(\n        this.i18nService.translate('translations.auth.service.user_not_found'),\n      );\n    }\n\n    const timezone = momentstz()\n      .tz('America/New_York')\n      .utc()\n      .format();\n\n    const time = moments(timezone)\n      .add(15, 'minutes')\n      .toDate();\n\n    this.logger.log(\n      `Sending password change confirmation email to the associated email in the ${user.username} account.`,\n    );\n\n    await this.mailService\n      .sendMail({\n        to: user.email.key,\n        from: 'saturnoxspace@outlook.com',\n        subject: 'Resed password | Akatsuki Project',\n        template: 'password_reset_request',\n        context: {\n          reset_password: 'https://akatsukiapp.com/password/reset',\n          name: user.name,\n          ip: userIp,\n          token: tokenPassword,\n        },\n      })\n      .then(() => {\n        this.logger.log(\n          `A password change confirmation email was successfully sent to ${user.username}.`,\n        );\n\n        user.password.status = false;\n        user.password.expiration = time;\n        user.password.token = tokenPassword;\n        user.save();\n      })\n      .catch(() => {\n        this.logger.error(\n          `There was a problem sending the password change confirmation email to ${user.username}.`,\n        );\n\n        throw new BadRequestException(\n          this.i18nService.translate(\n            'translations.auth.service.password_error_reset_email',\n          ),\n        );\n      });\n  }\n\n  public async ChangePassword(\n    userId: string,\n    tokenPasword: string,\n    newPassword: string,\n  ): Promise {\n    let user;\n    try {\n      user = await this.userModel.findById(userId);\n    } catch (error) {\n      throw new ConflictException(\n        this.i18nService.translate('translations.auth.service.user_not_found'),\n      );\n    }\n\n    if (!user) {\n      this.logger.error(\n        `The password change process could not be completed because there is no account with this data.`,\n      );\n\n      throw new NotFoundException(\n        this.i18nService.translate('translations.auth.service.user_not_found'),\n      );\n    }\n\n    this.logger.log(\n      `Changing the account password ${user.username} with code Token ${tokenPasword}.`,\n    );\n\n    const salt = await genSalt(10);\n    const timezone = momentstz()\n      .tz('America/New_York')\n      .utc()\n      .format();\n\n    const time = moments(timezone)\n      .add(15, 'minutes')\n      .toDate();\n\n    if (\n      moments().toDate()  {\n        throw new BadRequestException(\n          this.i18nService.translate('translations.general.process_failed'),\n        );\n      });\n  }\n\n  public async LogOut(userId: string, sessionId: string) {\n    this.logger.log(\n      `Logging off the user with Id ${userId} and with session Id ${sessionId}.`,\n    );\n\n    try {\n      await this.userModel.findOneAndUpdate(\n        { _id: userId },\n        { $pull: { sessions: { _id: sessionId } } },\n      );\n    } catch (error) {\n      this.logger.error(\n        `The session could not be closed with Id ${sessionId} for the user with Id ${userId} because there is no session with that Id or a problem has occurred in the database.`,\n      );\n\n      throw new BadRequestException(\n        this.i18nService.translate(\n          'translations.auth.service.user_session_error',\n        ),\n      );\n    }\n\n    this.logger.log(\n      `Successfully closed session for the account with Id ${userId} and with session number ${sessionId}.`,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigModule.html":{"url":"modules/ConfigModule.html","title":"module - ConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nConfigModule\n\nConfigModule\n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/config/config.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigService } from './config.service';\n\n@Module({\n  providers: [\n    {\n      provide: ConfigService,\n      useValue: new ConfigService(),\n    },\n  ],\n  exports: [ConfigService],\n})\nexport class ConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfigService.html":{"url":"classes/ConfigService.html","title":"class - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                envConfig\n                            \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/config/config.service.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            envConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in src/config/config.service.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Logger\n\n                        \n                    \n                    \n                        \n                            Default value : new Logger('Configuration')\n                        \n                    \n                        \n                            \n                                    Defined in src/config/config.service.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { existsSync, readFileSync } from 'fs';\nimport { Logger } from '@nestjs/common';\nimport { parse } from 'dotenv';\n\nexport class ConfigService {\n  readonly envConfig: { [ket: string]: string };\n  private readonly logger: Logger = new Logger('Configuration');\n\n  constructor() {\n    const isDevEnv = process.env.NODE_NEV !== 'production';\n    if (isDevEnv) {\n      const envFilePath = __dirname + '/../../.env';\n      const existPath = existsSync(envFilePath);\n\n      if (!existPath) {\n        this.logger.error('.env file does not exist.');\n        process.exit(0);\n      }\n\n      this.envConfig = parse(readFileSync(envFilePath));\n    } else {\n      this.envConfig = {\n        PORT_API: process.env.PORT,\n        TOKEN_SECRET: 'S9SDNXC9SM',\n        EMAIL_HOST:\n          'smtp://saturnoxspace@outlook.com:efhdmhtdxblafvjj@smtp.office365.com',\n        EMAIL_FROM: '\"Akatsuki Network\" ',\n        DB_HOST: 'mongodb://localhost:27017/akatsuki',\n        SERVER_HOST: 'https://api.akatsukiapp.com:3678/v1',\n      };\n    }\n  }\n\n  public get(key: string): string {\n    return this.envConfig[key];\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Email.html":{"url":"classes/Email.html","title":"class - Email","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Email\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/models/user.model.data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                expiration\n                            \n                            \n                                    Public\n                                key\n                            \n                            \n                                    Public\n                                status\n                            \n                            \n                                    Public\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            expiration\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:177\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            key\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:168\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:171\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:174\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { prop, index } from '@typegoose/typegoose';\nimport { TimeStamps } from '@typegoose/typegoose/lib/defaultClasses';\n\nexport class Market extends TimeStamps {\n  @prop({\n    required: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  public description: string;\n\n  @prop({ required: true, min: 0, max: 9999 })\n  public price: number;\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ required: true })\n  public device: number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public market: number;\n}\n\nexport class Reactions {\n  /*@prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n  })\n  public author: string;*/\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n}\n\nexport class Suspension {\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({\n    required: true,\n    default:\n      '[System]: The reason for suspension has not been specified. Please contact us for more information.',\n    minlength: 90,\n    maxlength: 200,\n  })\n  public reason: string;\n}\n\nexport class Stats {\n  @prop({ required: true, default: 0 })\n  public spent: number;\n\n  @prop({ required: true, default: 0 })\n  public won: number;\n\n  @prop({ required: true, default: 0 })\n  public rewards: number;\n\n  @prop({ required: true, default: 0 })\n  public rep: number;\n\n  @prop({ required: true, default: 0 })\n  public exp: number;\n}\n\nexport class Security {\n  @prop({ required: true, default: false })\n  public enabled: boolean;\n\n  @prop({ required: true, default: 0 })\n  public code1: number;\n\n  @prop({ required: true, default: 0 })\n  public code2: number;\n\n  @prop({ required: true, default: 0 })\n  public code3: number;\n\n  @prop({ required: true, default: 0 })\n  public code4: number;\n\n  @prop({ required: true, default: 0 })\n  public code5: number;\n\n  @prop({ required: true, default: 0 })\n  public twofactor: number;\n}\n\nexport class Membership {\n  @prop({ required: true, default: false })\n  public status: false;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration: Date;\n\n  @prop({ required: true, default: Date.now() })\n  public transaction: Date;\n}\n\nexport class Rank {\n  @prop({ required: true, default: false })\n  public seller: boolean;\n\n  @prop({ required: true, default: false })\n  public mod: boolean;\n\n  @prop({ required: true, default: false })\n  public admin: boolean;\n}\n\nexport class Notifications {\n  @prop({ required: true, default: false })\n  public social: boolean;\n\n  @prop({ required: true, default: false })\n  public market: boolean;\n\n  @prop({ required: true, default: false })\n  public message: boolean;\n}\n\nexport class Online {\n  @prop({ required: true, default: false })\n  public online: boolean;\n\n  @prop({ required: true, default: 0 })\n  public mode: number;\n\n  @prop({ required: true, default: Date.now() })\n  public last: Date;\n}\n\n@index({ device: 1, ip: 1 }, { unique: true })\nexport class Sessions extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public device: string | number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true, default: false })\n  public twofactor: boolean;\n}\n\nexport class Email {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({ required: true })\n  public token: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class Password {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: true })\n  public status?: boolean;\n\n  @prop({ required: true })\n  public token?: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class TransactionBuyer {\n  @prop({ required: true })\n  public id: string;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public device: string;\n}\nexport class Transaction extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ default: new TransactionBuyer(), _id: false })\n  public buyer: TransactionBuyer;\n\n  @prop({ required: true })\n  public item: string;\n\n  @prop({ required: true })\n  public type: number;\n\n  @prop({ required: true })\n  public price: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({ required: true })\n  public market: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GeneralGateway.html":{"url":"classes/GeneralGateway.html","title":"class - GeneralGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GeneralGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/gateways/general.gateway.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n                        OnGatewayDisconnect\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                    Readonly\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleConnection\n                            \n                            \n                                handleDisconnect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/gateways/general.gateway.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Logger\n\n                        \n                    \n                    \n                        \n                            Default value : new Logger('Gateway: General')\n                        \n                    \n                        \n                            \n                                    Defined in src/gateways/general.gateway.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @WebSocketServer()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/gateways/general.gateway.ts:17\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleConnection\n                        \n                        \n                    \n                \n            \n            \n                \nhandleConnection(client: any)\n                \n            \n\n\n            \n                \n                    Defined in src/gateways/general.gateway.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleDisconnect\n                        \n                        \n                    \n                \n            \n            \n                \nhandleDisconnect(client: any)\n                \n            \n\n\n            \n                \n                    Defined in src/gateways/general.gateway.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    client\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n  WebSocketServer,\n} from '@nestjs/websockets';\nimport { Logger } from '@nestjs/common';\nimport { UserService } from '../modules/user/user.service';\nimport * as moments from 'moment';\nimport * as momentstz from 'moment-timezone';\n\n@WebSocketGateway()\nexport class GeneralGateway\n  implements OnGatewayConnection, OnGatewayDisconnect {\n  private readonly logger: Logger = new Logger('Gateway: General');\n\n  @WebSocketServer() private readonly server: any;\n  constructor(private readonly userService: UserService) {}\n\n  handleDisconnect(client: any) {\n    const timezone = momentstz()\n      .tz('America/New_York')\n      .utc()\n      .format();\n\n    const time = moments(timezone)\n      .add(15, 'minutes')\n      .toDate();\n\n    if (client.query.online === 1) {\n      this.server.emit(`USER:${client.query.USER}:ONLINE`, { online: false });\n      this.logger.log(\n        `User ${client.query.user} with session ID ${client.query.session} and with Socket Id ${client.id} has been disconnected.`,\n      );\n      return this.userService.updateOnlineUser(client.query.user, {\n        online: {\n          online: false,\n          mode: 1,\n          last: time,\n        },\n      });\n    }\n  }\n\n  handleConnection(client: any) {\n    const timezone = momentstz()\n      .tz('America/New_York')\n      .utc()\n      .format();\n\n    const time = moments(timezone)\n      .add(15, 'minutes')\n      .toDate();\n\n    if (client.query.online === 1) {\n      this.server.emit(`USER:${client.query.USER}:ONLINE`, { online: true });\n      this.logger.log(\n        `User ${client.query.user} has been logged in with session ID ${client.query.session} and with Socket Id ${client.id}.`,\n      );\n      return this.userService.updateOnlineUser(client.query.user, {\n        online: {\n          online: true,\n          mode: 1,\n          last: time,\n        },\n      });\n    }\n  }\n\n  /*@SubscribeMessage('message')\n  handleMessage(client: any, payload: any): string {\n    return 'Hello world!';\n  }*/\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IJwtPayload.html":{"url":"interfaces/IJwtPayload.html","title":"interface - IJwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IJwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.payload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                                \n                                        id\n                                \n                                \n                                            Optional\n                                        lat\n                                \n                                \n                                        rank\n                                \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lat\n                                    \n                                \n                                \n                                    \n                                        lat:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rank\n                                    \n                                \n                                \n                                    \n                                        rank:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IJwtPayload {\n  id: string;\n  email: string;\n  username: string;\n  rank: string[];\n  lat?: Date;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: ReturnModelType<>, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                    ReturnModelType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: IJwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                IJwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { InjectModel } from 'nestjs-typegoose';\nimport { UserModel } from '../../modules/user/models/user.model';\nimport { ReturnModelType } from '@typegoose/typegoose';\nimport { ConfigService } from '../../config/config.service';\nimport { ConfigurationEnum } from '../../keys/configuration.enum';\nimport { UnauthorizedException, Injectable } from '@nestjs/common';\nimport { IJwtPayload } from '../jwt.payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    @InjectModel(UserModel)\n    private readonly userModel: ReturnModelType,\n    readonly configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get(ConfigurationEnum.TOKEN_SECRET),\n    });\n  }\n\n  async validate(payload: IJwtPayload) {\n    const { id, username, email } = payload;\n    const userExists = await this.userModel.findById(id);\n\n    if (!userExists) {\n      throw new UnauthorizedException(\n        'This user does not exist. Please verify that the request is correct.',\n      );\n    }\n\n    if (userExists.username !== username) {\n      throw new UnauthorizedException();\n    }\n\n    if (userExists.email.key !== email && !userExists.email.status) {\n      throw new UnauthorizedException();\n    }\n\n    if (!userExists.password.status) {\n      throw new UnauthorizedException();\n    }\n\n    if (userExists.suspension.status) {\n      throw new UnauthorizedException(\n        'We are sorry but this account does not have sufficient permissions to use Akatsuki Project.',\n      );\n    }\n\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Market.html":{"url":"classes/Market.html","title":"class - Market","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Market\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/models/user.model.data.ts\n        \n\n\n            \n                Extends\n            \n            \n                    TimeStamps\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                description\n                            \n                            \n                                    Public\n                                device\n                            \n                            \n                                    Public\n                                discount\n                            \n                            \n                                    Public\n                                ip\n                            \n                            \n                                    Public\n                                market\n                            \n                            \n                                    Public\n                                price\n                            \n                            \n                                    Public\n                                seller\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, minlength: 6, maxlength: 20})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            device\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            discount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ip\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            market\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            price\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, min: 0, max: 9999})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            seller\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, lowercase: true, trim: true, minlength: 6, maxlength: 20})@prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, min: 0, max: 1})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { prop, index } from '@typegoose/typegoose';\nimport { TimeStamps } from '@typegoose/typegoose/lib/defaultClasses';\n\nexport class Market extends TimeStamps {\n  @prop({\n    required: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  public description: string;\n\n  @prop({ required: true, min: 0, max: 9999 })\n  public price: number;\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ required: true })\n  public device: number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public market: number;\n}\n\nexport class Reactions {\n  /*@prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n  })\n  public author: string;*/\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n}\n\nexport class Suspension {\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({\n    required: true,\n    default:\n      '[System]: The reason for suspension has not been specified. Please contact us for more information.',\n    minlength: 90,\n    maxlength: 200,\n  })\n  public reason: string;\n}\n\nexport class Stats {\n  @prop({ required: true, default: 0 })\n  public spent: number;\n\n  @prop({ required: true, default: 0 })\n  public won: number;\n\n  @prop({ required: true, default: 0 })\n  public rewards: number;\n\n  @prop({ required: true, default: 0 })\n  public rep: number;\n\n  @prop({ required: true, default: 0 })\n  public exp: number;\n}\n\nexport class Security {\n  @prop({ required: true, default: false })\n  public enabled: boolean;\n\n  @prop({ required: true, default: 0 })\n  public code1: number;\n\n  @prop({ required: true, default: 0 })\n  public code2: number;\n\n  @prop({ required: true, default: 0 })\n  public code3: number;\n\n  @prop({ required: true, default: 0 })\n  public code4: number;\n\n  @prop({ required: true, default: 0 })\n  public code5: number;\n\n  @prop({ required: true, default: 0 })\n  public twofactor: number;\n}\n\nexport class Membership {\n  @prop({ required: true, default: false })\n  public status: false;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration: Date;\n\n  @prop({ required: true, default: Date.now() })\n  public transaction: Date;\n}\n\nexport class Rank {\n  @prop({ required: true, default: false })\n  public seller: boolean;\n\n  @prop({ required: true, default: false })\n  public mod: boolean;\n\n  @prop({ required: true, default: false })\n  public admin: boolean;\n}\n\nexport class Notifications {\n  @prop({ required: true, default: false })\n  public social: boolean;\n\n  @prop({ required: true, default: false })\n  public market: boolean;\n\n  @prop({ required: true, default: false })\n  public message: boolean;\n}\n\nexport class Online {\n  @prop({ required: true, default: false })\n  public online: boolean;\n\n  @prop({ required: true, default: 0 })\n  public mode: number;\n\n  @prop({ required: true, default: Date.now() })\n  public last: Date;\n}\n\n@index({ device: 1, ip: 1 }, { unique: true })\nexport class Sessions extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public device: string | number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true, default: false })\n  public twofactor: boolean;\n}\n\nexport class Email {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({ required: true })\n  public token: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class Password {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: true })\n  public status?: boolean;\n\n  @prop({ required: true })\n  public token?: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class TransactionBuyer {\n  @prop({ required: true })\n  public id: string;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public device: string;\n}\nexport class Transaction extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ default: new TransactionBuyer(), _id: false })\n  public buyer: TransactionBuyer;\n\n  @prop({ required: true })\n  public item: string;\n\n  @prop({ required: true })\n  public type: number;\n\n  @prop({ required: true })\n  public price: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({ required: true })\n  public market: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Membership.html":{"url":"classes/Membership.html","title":"class - Membership","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Membership\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/models/user.model.data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                expiration\n                            \n                            \n                                    Public\n                                status\n                            \n                            \n                                    Public\n                                transaction\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            expiration\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:112\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:109\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            transaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:115\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { prop, index } from '@typegoose/typegoose';\nimport { TimeStamps } from '@typegoose/typegoose/lib/defaultClasses';\n\nexport class Market extends TimeStamps {\n  @prop({\n    required: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  public description: string;\n\n  @prop({ required: true, min: 0, max: 9999 })\n  public price: number;\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ required: true })\n  public device: number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public market: number;\n}\n\nexport class Reactions {\n  /*@prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n  })\n  public author: string;*/\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n}\n\nexport class Suspension {\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({\n    required: true,\n    default:\n      '[System]: The reason for suspension has not been specified. Please contact us for more information.',\n    minlength: 90,\n    maxlength: 200,\n  })\n  public reason: string;\n}\n\nexport class Stats {\n  @prop({ required: true, default: 0 })\n  public spent: number;\n\n  @prop({ required: true, default: 0 })\n  public won: number;\n\n  @prop({ required: true, default: 0 })\n  public rewards: number;\n\n  @prop({ required: true, default: 0 })\n  public rep: number;\n\n  @prop({ required: true, default: 0 })\n  public exp: number;\n}\n\nexport class Security {\n  @prop({ required: true, default: false })\n  public enabled: boolean;\n\n  @prop({ required: true, default: 0 })\n  public code1: number;\n\n  @prop({ required: true, default: 0 })\n  public code2: number;\n\n  @prop({ required: true, default: 0 })\n  public code3: number;\n\n  @prop({ required: true, default: 0 })\n  public code4: number;\n\n  @prop({ required: true, default: 0 })\n  public code5: number;\n\n  @prop({ required: true, default: 0 })\n  public twofactor: number;\n}\n\nexport class Membership {\n  @prop({ required: true, default: false })\n  public status: false;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration: Date;\n\n  @prop({ required: true, default: Date.now() })\n  public transaction: Date;\n}\n\nexport class Rank {\n  @prop({ required: true, default: false })\n  public seller: boolean;\n\n  @prop({ required: true, default: false })\n  public mod: boolean;\n\n  @prop({ required: true, default: false })\n  public admin: boolean;\n}\n\nexport class Notifications {\n  @prop({ required: true, default: false })\n  public social: boolean;\n\n  @prop({ required: true, default: false })\n  public market: boolean;\n\n  @prop({ required: true, default: false })\n  public message: boolean;\n}\n\nexport class Online {\n  @prop({ required: true, default: false })\n  public online: boolean;\n\n  @prop({ required: true, default: 0 })\n  public mode: number;\n\n  @prop({ required: true, default: Date.now() })\n  public last: Date;\n}\n\n@index({ device: 1, ip: 1 }, { unique: true })\nexport class Sessions extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public device: string | number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true, default: false })\n  public twofactor: boolean;\n}\n\nexport class Email {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({ required: true })\n  public token: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class Password {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: true })\n  public status?: boolean;\n\n  @prop({ required: true })\n  public token?: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class TransactionBuyer {\n  @prop({ required: true })\n  public id: string;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public device: string;\n}\nexport class Transaction extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ default: new TransactionBuyer(), _id: false })\n  public buyer: TransactionBuyer;\n\n  @prop({ required: true })\n  public item: string;\n\n  @prop({ required: true })\n  public type: number;\n\n  @prop({ required: true })\n  public price: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({ required: true })\n  public market: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Notifications.html":{"url":"classes/Notifications.html","title":"class - Notifications","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Notifications\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/models/user.model.data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                market\n                            \n                            \n                                    Public\n                                message\n                            \n                            \n                                    Public\n                                social\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            market\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:134\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:137\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            social\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:131\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { prop, index } from '@typegoose/typegoose';\nimport { TimeStamps } from '@typegoose/typegoose/lib/defaultClasses';\n\nexport class Market extends TimeStamps {\n  @prop({\n    required: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  public description: string;\n\n  @prop({ required: true, min: 0, max: 9999 })\n  public price: number;\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ required: true })\n  public device: number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public market: number;\n}\n\nexport class Reactions {\n  /*@prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n  })\n  public author: string;*/\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n}\n\nexport class Suspension {\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({\n    required: true,\n    default:\n      '[System]: The reason for suspension has not been specified. Please contact us for more information.',\n    minlength: 90,\n    maxlength: 200,\n  })\n  public reason: string;\n}\n\nexport class Stats {\n  @prop({ required: true, default: 0 })\n  public spent: number;\n\n  @prop({ required: true, default: 0 })\n  public won: number;\n\n  @prop({ required: true, default: 0 })\n  public rewards: number;\n\n  @prop({ required: true, default: 0 })\n  public rep: number;\n\n  @prop({ required: true, default: 0 })\n  public exp: number;\n}\n\nexport class Security {\n  @prop({ required: true, default: false })\n  public enabled: boolean;\n\n  @prop({ required: true, default: 0 })\n  public code1: number;\n\n  @prop({ required: true, default: 0 })\n  public code2: number;\n\n  @prop({ required: true, default: 0 })\n  public code3: number;\n\n  @prop({ required: true, default: 0 })\n  public code4: number;\n\n  @prop({ required: true, default: 0 })\n  public code5: number;\n\n  @prop({ required: true, default: 0 })\n  public twofactor: number;\n}\n\nexport class Membership {\n  @prop({ required: true, default: false })\n  public status: false;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration: Date;\n\n  @prop({ required: true, default: Date.now() })\n  public transaction: Date;\n}\n\nexport class Rank {\n  @prop({ required: true, default: false })\n  public seller: boolean;\n\n  @prop({ required: true, default: false })\n  public mod: boolean;\n\n  @prop({ required: true, default: false })\n  public admin: boolean;\n}\n\nexport class Notifications {\n  @prop({ required: true, default: false })\n  public social: boolean;\n\n  @prop({ required: true, default: false })\n  public market: boolean;\n\n  @prop({ required: true, default: false })\n  public message: boolean;\n}\n\nexport class Online {\n  @prop({ required: true, default: false })\n  public online: boolean;\n\n  @prop({ required: true, default: 0 })\n  public mode: number;\n\n  @prop({ required: true, default: Date.now() })\n  public last: Date;\n}\n\n@index({ device: 1, ip: 1 }, { unique: true })\nexport class Sessions extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public device: string | number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true, default: false })\n  public twofactor: boolean;\n}\n\nexport class Email {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({ required: true })\n  public token: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class Password {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: true })\n  public status?: boolean;\n\n  @prop({ required: true })\n  public token?: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class TransactionBuyer {\n  @prop({ required: true })\n  public id: string;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public device: string;\n}\nexport class Transaction extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ default: new TransactionBuyer(), _id: false })\n  public buyer: TransactionBuyer;\n\n  @prop({ required: true })\n  public item: string;\n\n  @prop({ required: true })\n  public type: number;\n\n  @prop({ required: true })\n  public price: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({ required: true })\n  public market: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Online.html":{"url":"classes/Online.html","title":"class - Online","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Online\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/models/user.model.data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                last\n                            \n                            \n                                    Public\n                                mode\n                            \n                            \n                                    Public\n                                online\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            last\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:148\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            mode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:145\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            online\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:142\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { prop, index } from '@typegoose/typegoose';\nimport { TimeStamps } from '@typegoose/typegoose/lib/defaultClasses';\n\nexport class Market extends TimeStamps {\n  @prop({\n    required: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  public description: string;\n\n  @prop({ required: true, min: 0, max: 9999 })\n  public price: number;\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ required: true })\n  public device: number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public market: number;\n}\n\nexport class Reactions {\n  /*@prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n  })\n  public author: string;*/\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n}\n\nexport class Suspension {\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({\n    required: true,\n    default:\n      '[System]: The reason for suspension has not been specified. Please contact us for more information.',\n    minlength: 90,\n    maxlength: 200,\n  })\n  public reason: string;\n}\n\nexport class Stats {\n  @prop({ required: true, default: 0 })\n  public spent: number;\n\n  @prop({ required: true, default: 0 })\n  public won: number;\n\n  @prop({ required: true, default: 0 })\n  public rewards: number;\n\n  @prop({ required: true, default: 0 })\n  public rep: number;\n\n  @prop({ required: true, default: 0 })\n  public exp: number;\n}\n\nexport class Security {\n  @prop({ required: true, default: false })\n  public enabled: boolean;\n\n  @prop({ required: true, default: 0 })\n  public code1: number;\n\n  @prop({ required: true, default: 0 })\n  public code2: number;\n\n  @prop({ required: true, default: 0 })\n  public code3: number;\n\n  @prop({ required: true, default: 0 })\n  public code4: number;\n\n  @prop({ required: true, default: 0 })\n  public code5: number;\n\n  @prop({ required: true, default: 0 })\n  public twofactor: number;\n}\n\nexport class Membership {\n  @prop({ required: true, default: false })\n  public status: false;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration: Date;\n\n  @prop({ required: true, default: Date.now() })\n  public transaction: Date;\n}\n\nexport class Rank {\n  @prop({ required: true, default: false })\n  public seller: boolean;\n\n  @prop({ required: true, default: false })\n  public mod: boolean;\n\n  @prop({ required: true, default: false })\n  public admin: boolean;\n}\n\nexport class Notifications {\n  @prop({ required: true, default: false })\n  public social: boolean;\n\n  @prop({ required: true, default: false })\n  public market: boolean;\n\n  @prop({ required: true, default: false })\n  public message: boolean;\n}\n\nexport class Online {\n  @prop({ required: true, default: false })\n  public online: boolean;\n\n  @prop({ required: true, default: 0 })\n  public mode: number;\n\n  @prop({ required: true, default: Date.now() })\n  public last: Date;\n}\n\n@index({ device: 1, ip: 1 }, { unique: true })\nexport class Sessions extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public device: string | number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true, default: false })\n  public twofactor: boolean;\n}\n\nexport class Email {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({ required: true })\n  public token: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class Password {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: true })\n  public status?: boolean;\n\n  @prop({ required: true })\n  public token?: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class TransactionBuyer {\n  @prop({ required: true })\n  public id: string;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public device: string;\n}\nexport class Transaction extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ default: new TransactionBuyer(), _id: false })\n  public buyer: TransactionBuyer;\n\n  @prop({ required: true })\n  public item: string;\n\n  @prop({ required: true })\n  public type: number;\n\n  @prop({ required: true })\n  public price: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({ required: true })\n  public market: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Password.html":{"url":"classes/Password.html","title":"class - Password","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Password\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/models/user.model.data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                expiration\n                            \n                            \n                                    Public\n                                key\n                            \n                            \n                                    Public\n                                    Optional\n                                status\n                            \n                            \n                                    Public\n                                    Optional\n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            expiration\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:191\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            key\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:182\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:185\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:188\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { prop, index } from '@typegoose/typegoose';\nimport { TimeStamps } from '@typegoose/typegoose/lib/defaultClasses';\n\nexport class Market extends TimeStamps {\n  @prop({\n    required: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  public description: string;\n\n  @prop({ required: true, min: 0, max: 9999 })\n  public price: number;\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ required: true })\n  public device: number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public market: number;\n}\n\nexport class Reactions {\n  /*@prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n  })\n  public author: string;*/\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n}\n\nexport class Suspension {\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({\n    required: true,\n    default:\n      '[System]: The reason for suspension has not been specified. Please contact us for more information.',\n    minlength: 90,\n    maxlength: 200,\n  })\n  public reason: string;\n}\n\nexport class Stats {\n  @prop({ required: true, default: 0 })\n  public spent: number;\n\n  @prop({ required: true, default: 0 })\n  public won: number;\n\n  @prop({ required: true, default: 0 })\n  public rewards: number;\n\n  @prop({ required: true, default: 0 })\n  public rep: number;\n\n  @prop({ required: true, default: 0 })\n  public exp: number;\n}\n\nexport class Security {\n  @prop({ required: true, default: false })\n  public enabled: boolean;\n\n  @prop({ required: true, default: 0 })\n  public code1: number;\n\n  @prop({ required: true, default: 0 })\n  public code2: number;\n\n  @prop({ required: true, default: 0 })\n  public code3: number;\n\n  @prop({ required: true, default: 0 })\n  public code4: number;\n\n  @prop({ required: true, default: 0 })\n  public code5: number;\n\n  @prop({ required: true, default: 0 })\n  public twofactor: number;\n}\n\nexport class Membership {\n  @prop({ required: true, default: false })\n  public status: false;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration: Date;\n\n  @prop({ required: true, default: Date.now() })\n  public transaction: Date;\n}\n\nexport class Rank {\n  @prop({ required: true, default: false })\n  public seller: boolean;\n\n  @prop({ required: true, default: false })\n  public mod: boolean;\n\n  @prop({ required: true, default: false })\n  public admin: boolean;\n}\n\nexport class Notifications {\n  @prop({ required: true, default: false })\n  public social: boolean;\n\n  @prop({ required: true, default: false })\n  public market: boolean;\n\n  @prop({ required: true, default: false })\n  public message: boolean;\n}\n\nexport class Online {\n  @prop({ required: true, default: false })\n  public online: boolean;\n\n  @prop({ required: true, default: 0 })\n  public mode: number;\n\n  @prop({ required: true, default: Date.now() })\n  public last: Date;\n}\n\n@index({ device: 1, ip: 1 }, { unique: true })\nexport class Sessions extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public device: string | number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true, default: false })\n  public twofactor: boolean;\n}\n\nexport class Email {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({ required: true })\n  public token: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class Password {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: true })\n  public status?: boolean;\n\n  @prop({ required: true })\n  public token?: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class TransactionBuyer {\n  @prop({ required: true })\n  public id: string;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public device: string;\n}\nexport class Transaction extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ default: new TransactionBuyer(), _id: false })\n  public buyer: TransactionBuyer;\n\n  @prop({ required: true })\n  public item: string;\n\n  @prop({ required: true })\n  public type: number;\n\n  @prop({ required: true })\n  public price: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({ required: true })\n  public market: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Rank.html":{"url":"classes/Rank.html","title":"class - Rank","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Rank\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/models/user.model.data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                admin\n                            \n                            \n                                    Public\n                                mod\n                            \n                            \n                                    Public\n                                seller\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            admin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:126\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            mod\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:123\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            seller\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:120\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { prop, index } from '@typegoose/typegoose';\nimport { TimeStamps } from '@typegoose/typegoose/lib/defaultClasses';\n\nexport class Market extends TimeStamps {\n  @prop({\n    required: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  public description: string;\n\n  @prop({ required: true, min: 0, max: 9999 })\n  public price: number;\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ required: true })\n  public device: number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public market: number;\n}\n\nexport class Reactions {\n  /*@prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n  })\n  public author: string;*/\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n}\n\nexport class Suspension {\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({\n    required: true,\n    default:\n      '[System]: The reason for suspension has not been specified. Please contact us for more information.',\n    minlength: 90,\n    maxlength: 200,\n  })\n  public reason: string;\n}\n\nexport class Stats {\n  @prop({ required: true, default: 0 })\n  public spent: number;\n\n  @prop({ required: true, default: 0 })\n  public won: number;\n\n  @prop({ required: true, default: 0 })\n  public rewards: number;\n\n  @prop({ required: true, default: 0 })\n  public rep: number;\n\n  @prop({ required: true, default: 0 })\n  public exp: number;\n}\n\nexport class Security {\n  @prop({ required: true, default: false })\n  public enabled: boolean;\n\n  @prop({ required: true, default: 0 })\n  public code1: number;\n\n  @prop({ required: true, default: 0 })\n  public code2: number;\n\n  @prop({ required: true, default: 0 })\n  public code3: number;\n\n  @prop({ required: true, default: 0 })\n  public code4: number;\n\n  @prop({ required: true, default: 0 })\n  public code5: number;\n\n  @prop({ required: true, default: 0 })\n  public twofactor: number;\n}\n\nexport class Membership {\n  @prop({ required: true, default: false })\n  public status: false;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration: Date;\n\n  @prop({ required: true, default: Date.now() })\n  public transaction: Date;\n}\n\nexport class Rank {\n  @prop({ required: true, default: false })\n  public seller: boolean;\n\n  @prop({ required: true, default: false })\n  public mod: boolean;\n\n  @prop({ required: true, default: false })\n  public admin: boolean;\n}\n\nexport class Notifications {\n  @prop({ required: true, default: false })\n  public social: boolean;\n\n  @prop({ required: true, default: false })\n  public market: boolean;\n\n  @prop({ required: true, default: false })\n  public message: boolean;\n}\n\nexport class Online {\n  @prop({ required: true, default: false })\n  public online: boolean;\n\n  @prop({ required: true, default: 0 })\n  public mode: number;\n\n  @prop({ required: true, default: Date.now() })\n  public last: Date;\n}\n\n@index({ device: 1, ip: 1 }, { unique: true })\nexport class Sessions extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public device: string | number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true, default: false })\n  public twofactor: boolean;\n}\n\nexport class Email {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({ required: true })\n  public token: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class Password {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: true })\n  public status?: boolean;\n\n  @prop({ required: true })\n  public token?: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class TransactionBuyer {\n  @prop({ required: true })\n  public id: string;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public device: string;\n}\nexport class Transaction extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ default: new TransactionBuyer(), _id: false })\n  public buyer: TransactionBuyer;\n\n  @prop({ required: true })\n  public item: string;\n\n  @prop({ required: true })\n  public type: number;\n\n  @prop({ required: true })\n  public price: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({ required: true })\n  public market: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RankGuard.html":{"url":"guards/RankGuard.html","title":"guard - RankGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RankGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/rank.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/guards/rank.guard.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/rank.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\nexport class RankGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const ranks: string[] = this.reflector.get(\n      'rank',\n      context.getHandler(),\n    );\n\n    if (!ranks) {\n      return true;\n    }\n\n    const request = context.switchToHttp().getRequest();\n    const { user } = request;\n\n    const hasRole = () =>\n      user.rank.some((rank: string) => ranks.includes(rank));\n\n    return user && user.rank && hasRole();\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Reactions.html":{"url":"classes/Reactions.html","title":"class - Reactions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Reactions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/models/user.model.data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, min: 0, max: 1})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:50\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { prop, index } from '@typegoose/typegoose';\nimport { TimeStamps } from '@typegoose/typegoose/lib/defaultClasses';\n\nexport class Market extends TimeStamps {\n  @prop({\n    required: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  public description: string;\n\n  @prop({ required: true, min: 0, max: 9999 })\n  public price: number;\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ required: true })\n  public device: number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public market: number;\n}\n\nexport class Reactions {\n  /*@prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n  })\n  public author: string;*/\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n}\n\nexport class Suspension {\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({\n    required: true,\n    default:\n      '[System]: The reason for suspension has not been specified. Please contact us for more information.',\n    minlength: 90,\n    maxlength: 200,\n  })\n  public reason: string;\n}\n\nexport class Stats {\n  @prop({ required: true, default: 0 })\n  public spent: number;\n\n  @prop({ required: true, default: 0 })\n  public won: number;\n\n  @prop({ required: true, default: 0 })\n  public rewards: number;\n\n  @prop({ required: true, default: 0 })\n  public rep: number;\n\n  @prop({ required: true, default: 0 })\n  public exp: number;\n}\n\nexport class Security {\n  @prop({ required: true, default: false })\n  public enabled: boolean;\n\n  @prop({ required: true, default: 0 })\n  public code1: number;\n\n  @prop({ required: true, default: 0 })\n  public code2: number;\n\n  @prop({ required: true, default: 0 })\n  public code3: number;\n\n  @prop({ required: true, default: 0 })\n  public code4: number;\n\n  @prop({ required: true, default: 0 })\n  public code5: number;\n\n  @prop({ required: true, default: 0 })\n  public twofactor: number;\n}\n\nexport class Membership {\n  @prop({ required: true, default: false })\n  public status: false;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration: Date;\n\n  @prop({ required: true, default: Date.now() })\n  public transaction: Date;\n}\n\nexport class Rank {\n  @prop({ required: true, default: false })\n  public seller: boolean;\n\n  @prop({ required: true, default: false })\n  public mod: boolean;\n\n  @prop({ required: true, default: false })\n  public admin: boolean;\n}\n\nexport class Notifications {\n  @prop({ required: true, default: false })\n  public social: boolean;\n\n  @prop({ required: true, default: false })\n  public market: boolean;\n\n  @prop({ required: true, default: false })\n  public message: boolean;\n}\n\nexport class Online {\n  @prop({ required: true, default: false })\n  public online: boolean;\n\n  @prop({ required: true, default: 0 })\n  public mode: number;\n\n  @prop({ required: true, default: Date.now() })\n  public last: Date;\n}\n\n@index({ device: 1, ip: 1 }, { unique: true })\nexport class Sessions extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public device: string | number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true, default: false })\n  public twofactor: boolean;\n}\n\nexport class Email {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({ required: true })\n  public token: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class Password {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: true })\n  public status?: boolean;\n\n  @prop({ required: true })\n  public token?: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class TransactionBuyer {\n  @prop({ required: true })\n  public id: string;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public device: string;\n}\nexport class Transaction extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ default: new TransactionBuyer(), _id: false })\n  public buyer: TransactionBuyer;\n\n  @prop({ required: true })\n  public item: string;\n\n  @prop({ required: true })\n  public type: number;\n\n  @prop({ required: true })\n  public price: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({ required: true })\n  public market: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReactionsDto.html":{"url":"classes/ReactionsDto.html","title":"class - ReactionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReactionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/reactions.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                ofId\n                            \n                            \n                                    Readonly\n                                toId\n                            \n                            \n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            ofId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/dto/reactions.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            toId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/dto/reactions.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/dto/reactions.dto.ts:14\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class ReactionsDto {\n  @IsString()\n  @IsNotEmpty()\n  readonly toId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly ofId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly type: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Security.html":{"url":"classes/Security.html","title":"class - Security","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Security\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/models/user.model.data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                code1\n                            \n                            \n                                    Public\n                                code2\n                            \n                            \n                                    Public\n                                code3\n                            \n                            \n                                    Public\n                                code4\n                            \n                            \n                                    Public\n                                code5\n                            \n                            \n                                    Public\n                                enabled\n                            \n                            \n                                    Public\n                                twofactor\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            code1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:89\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            code2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:92\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            code3\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:95\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            code4\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:98\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            code5\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:101\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            enabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:86\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            twofactor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:104\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { prop, index } from '@typegoose/typegoose';\nimport { TimeStamps } from '@typegoose/typegoose/lib/defaultClasses';\n\nexport class Market extends TimeStamps {\n  @prop({\n    required: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  public description: string;\n\n  @prop({ required: true, min: 0, max: 9999 })\n  public price: number;\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ required: true })\n  public device: number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public market: number;\n}\n\nexport class Reactions {\n  /*@prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n  })\n  public author: string;*/\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n}\n\nexport class Suspension {\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({\n    required: true,\n    default:\n      '[System]: The reason for suspension has not been specified. Please contact us for more information.',\n    minlength: 90,\n    maxlength: 200,\n  })\n  public reason: string;\n}\n\nexport class Stats {\n  @prop({ required: true, default: 0 })\n  public spent: number;\n\n  @prop({ required: true, default: 0 })\n  public won: number;\n\n  @prop({ required: true, default: 0 })\n  public rewards: number;\n\n  @prop({ required: true, default: 0 })\n  public rep: number;\n\n  @prop({ required: true, default: 0 })\n  public exp: number;\n}\n\nexport class Security {\n  @prop({ required: true, default: false })\n  public enabled: boolean;\n\n  @prop({ required: true, default: 0 })\n  public code1: number;\n\n  @prop({ required: true, default: 0 })\n  public code2: number;\n\n  @prop({ required: true, default: 0 })\n  public code3: number;\n\n  @prop({ required: true, default: 0 })\n  public code4: number;\n\n  @prop({ required: true, default: 0 })\n  public code5: number;\n\n  @prop({ required: true, default: 0 })\n  public twofactor: number;\n}\n\nexport class Membership {\n  @prop({ required: true, default: false })\n  public status: false;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration: Date;\n\n  @prop({ required: true, default: Date.now() })\n  public transaction: Date;\n}\n\nexport class Rank {\n  @prop({ required: true, default: false })\n  public seller: boolean;\n\n  @prop({ required: true, default: false })\n  public mod: boolean;\n\n  @prop({ required: true, default: false })\n  public admin: boolean;\n}\n\nexport class Notifications {\n  @prop({ required: true, default: false })\n  public social: boolean;\n\n  @prop({ required: true, default: false })\n  public market: boolean;\n\n  @prop({ required: true, default: false })\n  public message: boolean;\n}\n\nexport class Online {\n  @prop({ required: true, default: false })\n  public online: boolean;\n\n  @prop({ required: true, default: 0 })\n  public mode: number;\n\n  @prop({ required: true, default: Date.now() })\n  public last: Date;\n}\n\n@index({ device: 1, ip: 1 }, { unique: true })\nexport class Sessions extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public device: string | number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true, default: false })\n  public twofactor: boolean;\n}\n\nexport class Email {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({ required: true })\n  public token: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class Password {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: true })\n  public status?: boolean;\n\n  @prop({ required: true })\n  public token?: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class TransactionBuyer {\n  @prop({ required: true })\n  public id: string;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public device: string;\n}\nexport class Transaction extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ default: new TransactionBuyer(), _id: false })\n  public buyer: TransactionBuyer;\n\n  @prop({ required: true })\n  public item: string;\n\n  @prop({ required: true })\n  public type: number;\n\n  @prop({ required: true })\n  public price: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({ required: true })\n  public market: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SecurityCode.html":{"url":"classes/SecurityCode.html","title":"class - SecurityCode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SecurityCode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/security.update.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                code1\n                            \n                            \n                                    Readonly\n                                code2\n                            \n                            \n                                    Readonly\n                                code3\n                            \n                            \n                                    Readonly\n                                code4\n                            \n                            \n                                    Readonly\n                                code5\n                            \n                            \n                                    Readonly\n                                enabled\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            code1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/security.update.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            code2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/security.update.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            code3\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/security.update.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            code4\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/security.update.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            code5\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/security.update.dto.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            enabled\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsBoolean()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/security.update.dto.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsNumber, IsBoolean } from 'class-validator';\n\nexport class SecurityCode {\n  @IsNumber()\n  @IsNotEmpty()\n  readonly code1: number;\n\n  @IsNumber()\n  @IsNotEmpty()\n  readonly code2: number;\n\n  @IsNumber()\n  @IsNotEmpty()\n  readonly code3: number;\n\n  @IsNumber()\n  @IsNotEmpty()\n  readonly code4: number;\n\n  @IsNumber()\n  @IsNotEmpty()\n  readonly code5: number;\n\n  @IsBoolean()\n  @IsNotEmpty()\n  readonly enabled: string;\n}\n\nexport class SecurityUpdateDto {\n  @IsString()\n  @IsNotEmpty()\n  id: string;\n\n  security: SecurityCode;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SecurityDto.html":{"url":"classes/SecurityDto.html","title":"class - SecurityDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SecurityDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/security.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                code1\n                            \n                            \n                                    Readonly\n                                code2\n                            \n                            \n                                    Readonly\n                                code3\n                            \n                            \n                                    Readonly\n                                code4\n                            \n                            \n                                    Readonly\n                                code5\n                            \n                            \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            code1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/security.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            code2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/security.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            code3\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/security.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            code4\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/security.dto.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            code5\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/security.dto.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/security.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber, IsString, IsNotEmpty } from 'class-validator';\n\nexport class SecurityDto {\n  @IsString()\n  @IsNotEmpty()\n  readonly id: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  readonly code1: number;\n\n  @IsNumber()\n  @IsNotEmpty()\n  readonly code2: number;\n\n  @IsNumber()\n  @IsNotEmpty()\n  readonly code3: number;\n\n  @IsNumber()\n  @IsNotEmpty()\n  readonly code4: number;\n\n  @IsNumber()\n  @IsNotEmpty()\n  readonly code5: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SecurityUpdateDto.html":{"url":"classes/SecurityUpdateDto.html","title":"class - SecurityUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SecurityUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/security.update.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                security\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/security.update.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            security\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SecurityCode\n\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/security.update.dto.ts:34\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsNumber, IsBoolean } from 'class-validator';\n\nexport class SecurityCode {\n  @IsNumber()\n  @IsNotEmpty()\n  readonly code1: number;\n\n  @IsNumber()\n  @IsNotEmpty()\n  readonly code2: number;\n\n  @IsNumber()\n  @IsNotEmpty()\n  readonly code3: number;\n\n  @IsNumber()\n  @IsNotEmpty()\n  readonly code4: number;\n\n  @IsNumber()\n  @IsNotEmpty()\n  readonly code5: number;\n\n  @IsBoolean()\n  @IsNotEmpty()\n  readonly enabled: string;\n}\n\nexport class SecurityUpdateDto {\n  @IsString()\n  @IsNotEmpty()\n  id: string;\n\n  security: SecurityCode;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Sessions.html":{"url":"classes/Sessions.html","title":"class - Sessions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Sessions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/models/user.model.data.ts\n        \n\n\n            \n                Extends\n            \n            \n                    TimeStamps\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                _id\n                            \n                            \n                                    Public\n                                device\n                            \n                            \n                                    Public\n                                ip\n                            \n                            \n                                    Public\n                                twofactor\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:154\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            device\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:157\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ip\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:160\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            twofactor\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:163\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { prop, index } from '@typegoose/typegoose';\nimport { TimeStamps } from '@typegoose/typegoose/lib/defaultClasses';\n\nexport class Market extends TimeStamps {\n  @prop({\n    required: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  public description: string;\n\n  @prop({ required: true, min: 0, max: 9999 })\n  public price: number;\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ required: true })\n  public device: number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public market: number;\n}\n\nexport class Reactions {\n  /*@prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n  })\n  public author: string;*/\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n}\n\nexport class Suspension {\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({\n    required: true,\n    default:\n      '[System]: The reason for suspension has not been specified. Please contact us for more information.',\n    minlength: 90,\n    maxlength: 200,\n  })\n  public reason: string;\n}\n\nexport class Stats {\n  @prop({ required: true, default: 0 })\n  public spent: number;\n\n  @prop({ required: true, default: 0 })\n  public won: number;\n\n  @prop({ required: true, default: 0 })\n  public rewards: number;\n\n  @prop({ required: true, default: 0 })\n  public rep: number;\n\n  @prop({ required: true, default: 0 })\n  public exp: number;\n}\n\nexport class Security {\n  @prop({ required: true, default: false })\n  public enabled: boolean;\n\n  @prop({ required: true, default: 0 })\n  public code1: number;\n\n  @prop({ required: true, default: 0 })\n  public code2: number;\n\n  @prop({ required: true, default: 0 })\n  public code3: number;\n\n  @prop({ required: true, default: 0 })\n  public code4: number;\n\n  @prop({ required: true, default: 0 })\n  public code5: number;\n\n  @prop({ required: true, default: 0 })\n  public twofactor: number;\n}\n\nexport class Membership {\n  @prop({ required: true, default: false })\n  public status: false;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration: Date;\n\n  @prop({ required: true, default: Date.now() })\n  public transaction: Date;\n}\n\nexport class Rank {\n  @prop({ required: true, default: false })\n  public seller: boolean;\n\n  @prop({ required: true, default: false })\n  public mod: boolean;\n\n  @prop({ required: true, default: false })\n  public admin: boolean;\n}\n\nexport class Notifications {\n  @prop({ required: true, default: false })\n  public social: boolean;\n\n  @prop({ required: true, default: false })\n  public market: boolean;\n\n  @prop({ required: true, default: false })\n  public message: boolean;\n}\n\nexport class Online {\n  @prop({ required: true, default: false })\n  public online: boolean;\n\n  @prop({ required: true, default: 0 })\n  public mode: number;\n\n  @prop({ required: true, default: Date.now() })\n  public last: Date;\n}\n\n@index({ device: 1, ip: 1 }, { unique: true })\nexport class Sessions extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public device: string | number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true, default: false })\n  public twofactor: boolean;\n}\n\nexport class Email {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({ required: true })\n  public token: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class Password {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: true })\n  public status?: boolean;\n\n  @prop({ required: true })\n  public token?: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class TransactionBuyer {\n  @prop({ required: true })\n  public id: string;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public device: string;\n}\nexport class Transaction extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ default: new TransactionBuyer(), _id: false })\n  public buyer: TransactionBuyer;\n\n  @prop({ required: true })\n  public item: string;\n\n  @prop({ required: true })\n  public type: number;\n\n  @prop({ required: true })\n  public price: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({ required: true })\n  public market: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/signin.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                device\n                            \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Public\n                                ip\n                            \n                            \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            device\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/signin.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/signin.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ip\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/signin.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/signin.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, IsEmail } from 'class-validator';\nexport class SignInDto {\n  @IsNotEmpty()\n  @IsEmail()\n  readonly email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  readonly password: string;\n\n  @IsNotEmpty()\n  public device: string | number;\n\n  @IsNotEmpty()\n  @IsString()\n  public ip: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Stats.html":{"url":"classes/Stats.html","title":"class - Stats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Stats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/models/user.model.data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                exp\n                            \n                            \n                                    Public\n                                rep\n                            \n                            \n                                    Public\n                                rewards\n                            \n                            \n                                    Public\n                                spent\n                            \n                            \n                                    Public\n                                won\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            exp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:81\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            rep\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:78\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            rewards\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:75\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            spent\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            won\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:72\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { prop, index } from '@typegoose/typegoose';\nimport { TimeStamps } from '@typegoose/typegoose/lib/defaultClasses';\n\nexport class Market extends TimeStamps {\n  @prop({\n    required: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  public description: string;\n\n  @prop({ required: true, min: 0, max: 9999 })\n  public price: number;\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ required: true })\n  public device: number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public market: number;\n}\n\nexport class Reactions {\n  /*@prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n  })\n  public author: string;*/\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n}\n\nexport class Suspension {\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({\n    required: true,\n    default:\n      '[System]: The reason for suspension has not been specified. Please contact us for more information.',\n    minlength: 90,\n    maxlength: 200,\n  })\n  public reason: string;\n}\n\nexport class Stats {\n  @prop({ required: true, default: 0 })\n  public spent: number;\n\n  @prop({ required: true, default: 0 })\n  public won: number;\n\n  @prop({ required: true, default: 0 })\n  public rewards: number;\n\n  @prop({ required: true, default: 0 })\n  public rep: number;\n\n  @prop({ required: true, default: 0 })\n  public exp: number;\n}\n\nexport class Security {\n  @prop({ required: true, default: false })\n  public enabled: boolean;\n\n  @prop({ required: true, default: 0 })\n  public code1: number;\n\n  @prop({ required: true, default: 0 })\n  public code2: number;\n\n  @prop({ required: true, default: 0 })\n  public code3: number;\n\n  @prop({ required: true, default: 0 })\n  public code4: number;\n\n  @prop({ required: true, default: 0 })\n  public code5: number;\n\n  @prop({ required: true, default: 0 })\n  public twofactor: number;\n}\n\nexport class Membership {\n  @prop({ required: true, default: false })\n  public status: false;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration: Date;\n\n  @prop({ required: true, default: Date.now() })\n  public transaction: Date;\n}\n\nexport class Rank {\n  @prop({ required: true, default: false })\n  public seller: boolean;\n\n  @prop({ required: true, default: false })\n  public mod: boolean;\n\n  @prop({ required: true, default: false })\n  public admin: boolean;\n}\n\nexport class Notifications {\n  @prop({ required: true, default: false })\n  public social: boolean;\n\n  @prop({ required: true, default: false })\n  public market: boolean;\n\n  @prop({ required: true, default: false })\n  public message: boolean;\n}\n\nexport class Online {\n  @prop({ required: true, default: false })\n  public online: boolean;\n\n  @prop({ required: true, default: 0 })\n  public mode: number;\n\n  @prop({ required: true, default: Date.now() })\n  public last: Date;\n}\n\n@index({ device: 1, ip: 1 }, { unique: true })\nexport class Sessions extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public device: string | number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true, default: false })\n  public twofactor: boolean;\n}\n\nexport class Email {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({ required: true })\n  public token: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class Password {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: true })\n  public status?: boolean;\n\n  @prop({ required: true })\n  public token?: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class TransactionBuyer {\n  @prop({ required: true })\n  public id: string;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public device: string;\n}\nexport class Transaction extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ default: new TransactionBuyer(), _id: false })\n  public buyer: TransactionBuyer;\n\n  @prop({ required: true })\n  public item: string;\n\n  @prop({ required: true })\n  public type: number;\n\n  @prop({ required: true })\n  public price: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({ required: true })\n  public market: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Suspension.html":{"url":"classes/Suspension.html","title":"class - Suspension","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Suspension\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/models/user.model.data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                reason\n                            \n                            \n                                    Public\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            reason\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: '[System]: The reason for suspension has not been specified. Please contact us for more information.', minlength: 90, maxlength: 200})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:64\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:55\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { prop, index } from '@typegoose/typegoose';\nimport { TimeStamps } from '@typegoose/typegoose/lib/defaultClasses';\n\nexport class Market extends TimeStamps {\n  @prop({\n    required: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  public description: string;\n\n  @prop({ required: true, min: 0, max: 9999 })\n  public price: number;\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ required: true })\n  public device: number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public market: number;\n}\n\nexport class Reactions {\n  /*@prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n  })\n  public author: string;*/\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n}\n\nexport class Suspension {\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({\n    required: true,\n    default:\n      '[System]: The reason for suspension has not been specified. Please contact us for more information.',\n    minlength: 90,\n    maxlength: 200,\n  })\n  public reason: string;\n}\n\nexport class Stats {\n  @prop({ required: true, default: 0 })\n  public spent: number;\n\n  @prop({ required: true, default: 0 })\n  public won: number;\n\n  @prop({ required: true, default: 0 })\n  public rewards: number;\n\n  @prop({ required: true, default: 0 })\n  public rep: number;\n\n  @prop({ required: true, default: 0 })\n  public exp: number;\n}\n\nexport class Security {\n  @prop({ required: true, default: false })\n  public enabled: boolean;\n\n  @prop({ required: true, default: 0 })\n  public code1: number;\n\n  @prop({ required: true, default: 0 })\n  public code2: number;\n\n  @prop({ required: true, default: 0 })\n  public code3: number;\n\n  @prop({ required: true, default: 0 })\n  public code4: number;\n\n  @prop({ required: true, default: 0 })\n  public code5: number;\n\n  @prop({ required: true, default: 0 })\n  public twofactor: number;\n}\n\nexport class Membership {\n  @prop({ required: true, default: false })\n  public status: false;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration: Date;\n\n  @prop({ required: true, default: Date.now() })\n  public transaction: Date;\n}\n\nexport class Rank {\n  @prop({ required: true, default: false })\n  public seller: boolean;\n\n  @prop({ required: true, default: false })\n  public mod: boolean;\n\n  @prop({ required: true, default: false })\n  public admin: boolean;\n}\n\nexport class Notifications {\n  @prop({ required: true, default: false })\n  public social: boolean;\n\n  @prop({ required: true, default: false })\n  public market: boolean;\n\n  @prop({ required: true, default: false })\n  public message: boolean;\n}\n\nexport class Online {\n  @prop({ required: true, default: false })\n  public online: boolean;\n\n  @prop({ required: true, default: 0 })\n  public mode: number;\n\n  @prop({ required: true, default: Date.now() })\n  public last: Date;\n}\n\n@index({ device: 1, ip: 1 }, { unique: true })\nexport class Sessions extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public device: string | number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true, default: false })\n  public twofactor: boolean;\n}\n\nexport class Email {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({ required: true })\n  public token: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class Password {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: true })\n  public status?: boolean;\n\n  @prop({ required: true })\n  public token?: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class TransactionBuyer {\n  @prop({ required: true })\n  public id: string;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public device: string;\n}\nexport class Transaction extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ default: new TransactionBuyer(), _id: false })\n  public buyer: TransactionBuyer;\n\n  @prop({ required: true })\n  public item: string;\n\n  @prop({ required: true })\n  public type: number;\n\n  @prop({ required: true })\n  public price: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({ required: true })\n  public market: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Transaction.html":{"url":"classes/Transaction.html","title":"class - Transaction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Transaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/models/user.model.data.ts\n        \n\n\n            \n                Extends\n            \n            \n                    TimeStamps\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                _id\n                            \n                            \n                                    Public\n                                buyer\n                            \n                            \n                                    Public\n                                discount\n                            \n                            \n                                    Public\n                                item\n                            \n                            \n                                    Public\n                                market\n                            \n                            \n                                    Public\n                                price\n                            \n                            \n                                    Public\n                                seller\n                            \n                            \n                                    Public\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:206\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            buyer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TransactionBuyer\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({default: undefined, _id: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:212\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            discount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:224\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            item\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:215\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            market\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:227\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            price\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:221\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            seller\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:209\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:218\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { prop, index } from '@typegoose/typegoose';\nimport { TimeStamps } from '@typegoose/typegoose/lib/defaultClasses';\n\nexport class Market extends TimeStamps {\n  @prop({\n    required: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  public description: string;\n\n  @prop({ required: true, min: 0, max: 9999 })\n  public price: number;\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ required: true })\n  public device: number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public market: number;\n}\n\nexport class Reactions {\n  /*@prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n  })\n  public author: string;*/\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n}\n\nexport class Suspension {\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({\n    required: true,\n    default:\n      '[System]: The reason for suspension has not been specified. Please contact us for more information.',\n    minlength: 90,\n    maxlength: 200,\n  })\n  public reason: string;\n}\n\nexport class Stats {\n  @prop({ required: true, default: 0 })\n  public spent: number;\n\n  @prop({ required: true, default: 0 })\n  public won: number;\n\n  @prop({ required: true, default: 0 })\n  public rewards: number;\n\n  @prop({ required: true, default: 0 })\n  public rep: number;\n\n  @prop({ required: true, default: 0 })\n  public exp: number;\n}\n\nexport class Security {\n  @prop({ required: true, default: false })\n  public enabled: boolean;\n\n  @prop({ required: true, default: 0 })\n  public code1: number;\n\n  @prop({ required: true, default: 0 })\n  public code2: number;\n\n  @prop({ required: true, default: 0 })\n  public code3: number;\n\n  @prop({ required: true, default: 0 })\n  public code4: number;\n\n  @prop({ required: true, default: 0 })\n  public code5: number;\n\n  @prop({ required: true, default: 0 })\n  public twofactor: number;\n}\n\nexport class Membership {\n  @prop({ required: true, default: false })\n  public status: false;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration: Date;\n\n  @prop({ required: true, default: Date.now() })\n  public transaction: Date;\n}\n\nexport class Rank {\n  @prop({ required: true, default: false })\n  public seller: boolean;\n\n  @prop({ required: true, default: false })\n  public mod: boolean;\n\n  @prop({ required: true, default: false })\n  public admin: boolean;\n}\n\nexport class Notifications {\n  @prop({ required: true, default: false })\n  public social: boolean;\n\n  @prop({ required: true, default: false })\n  public market: boolean;\n\n  @prop({ required: true, default: false })\n  public message: boolean;\n}\n\nexport class Online {\n  @prop({ required: true, default: false })\n  public online: boolean;\n\n  @prop({ required: true, default: 0 })\n  public mode: number;\n\n  @prop({ required: true, default: Date.now() })\n  public last: Date;\n}\n\n@index({ device: 1, ip: 1 }, { unique: true })\nexport class Sessions extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public device: string | number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true, default: false })\n  public twofactor: boolean;\n}\n\nexport class Email {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({ required: true })\n  public token: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class Password {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: true })\n  public status?: boolean;\n\n  @prop({ required: true })\n  public token?: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class TransactionBuyer {\n  @prop({ required: true })\n  public id: string;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public device: string;\n}\nexport class Transaction extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ default: new TransactionBuyer(), _id: false })\n  public buyer: TransactionBuyer;\n\n  @prop({ required: true })\n  public item: string;\n\n  @prop({ required: true })\n  public type: number;\n\n  @prop({ required: true })\n  public price: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({ required: true })\n  public market: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TransactionBuyer.html":{"url":"classes/TransactionBuyer.html","title":"class - TransactionBuyer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TransactionBuyer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/models/user.model.data.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                device\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                ip\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            device\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:202\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:196\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ip\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.data.ts:199\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { prop, index } from '@typegoose/typegoose';\nimport { TimeStamps } from '@typegoose/typegoose/lib/defaultClasses';\n\nexport class Market extends TimeStamps {\n  @prop({\n    required: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  public description: string;\n\n  @prop({ required: true, min: 0, max: 9999 })\n  public price: number;\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n    minlength: 6,\n    maxlength: 20,\n  })\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ required: true })\n  public device: number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public market: number;\n}\n\nexport class Reactions {\n  /*@prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n  })\n  public author: string;*/\n\n  @prop({ required: true, min: 0, max: 1 })\n  public type: number;\n}\n\nexport class Suspension {\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({\n    required: true,\n    default:\n      '[System]: The reason for suspension has not been specified. Please contact us for more information.',\n    minlength: 90,\n    maxlength: 200,\n  })\n  public reason: string;\n}\n\nexport class Stats {\n  @prop({ required: true, default: 0 })\n  public spent: number;\n\n  @prop({ required: true, default: 0 })\n  public won: number;\n\n  @prop({ required: true, default: 0 })\n  public rewards: number;\n\n  @prop({ required: true, default: 0 })\n  public rep: number;\n\n  @prop({ required: true, default: 0 })\n  public exp: number;\n}\n\nexport class Security {\n  @prop({ required: true, default: false })\n  public enabled: boolean;\n\n  @prop({ required: true, default: 0 })\n  public code1: number;\n\n  @prop({ required: true, default: 0 })\n  public code2: number;\n\n  @prop({ required: true, default: 0 })\n  public code3: number;\n\n  @prop({ required: true, default: 0 })\n  public code4: number;\n\n  @prop({ required: true, default: 0 })\n  public code5: number;\n\n  @prop({ required: true, default: 0 })\n  public twofactor: number;\n}\n\nexport class Membership {\n  @prop({ required: true, default: false })\n  public status: false;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration: Date;\n\n  @prop({ required: true, default: Date.now() })\n  public transaction: Date;\n}\n\nexport class Rank {\n  @prop({ required: true, default: false })\n  public seller: boolean;\n\n  @prop({ required: true, default: false })\n  public mod: boolean;\n\n  @prop({ required: true, default: false })\n  public admin: boolean;\n}\n\nexport class Notifications {\n  @prop({ required: true, default: false })\n  public social: boolean;\n\n  @prop({ required: true, default: false })\n  public market: boolean;\n\n  @prop({ required: true, default: false })\n  public message: boolean;\n}\n\nexport class Online {\n  @prop({ required: true, default: false })\n  public online: boolean;\n\n  @prop({ required: true, default: 0 })\n  public mode: number;\n\n  @prop({ required: true, default: Date.now() })\n  public last: Date;\n}\n\n@index({ device: 1, ip: 1 }, { unique: true })\nexport class Sessions extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public device: string | number;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true, default: false })\n  public twofactor: boolean;\n}\n\nexport class Email {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: false })\n  public status: boolean;\n\n  @prop({ required: true })\n  public token: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class Password {\n  @prop({ required: true, trim: true })\n  public key: string;\n\n  @prop({ required: true, default: true })\n  public status?: boolean;\n\n  @prop({ required: true })\n  public token?: string;\n\n  @prop({ required: true, default: Date.now() })\n  public expiration?: Date;\n}\n\nexport class TransactionBuyer {\n  @prop({ required: true })\n  public id: string;\n\n  @prop({ required: true })\n  public ip: string;\n\n  @prop({ required: true })\n  public device: string;\n}\nexport class Transaction extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({ required: true })\n  public seller: string;\n\n  @prop({ default: new TransactionBuyer(), _id: false })\n  public buyer: TransactionBuyer;\n\n  @prop({ required: true })\n  public item: string;\n\n  @prop({ required: true })\n  public type: number;\n\n  @prop({ required: true })\n  public price: number;\n\n  @prop({ required: true })\n  public discount: number;\n\n  @prop({ required: true })\n  public market: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/dto/update-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                id\n                            \n                            \n                                    Readonly\n                                key\n                            \n                            \n                                    Readonly\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/dto/update-user.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            key\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/dto/update-user.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | number | Date | boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/dto/update-user.dto.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class UpdateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  readonly id: string;\n\n  @IsString()\n  @IsNotEmpty()\n  readonly key: string;\n\n  @IsNotEmpty()\n  readonly value: string | number | Date | boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Async\n                                addReaction\n                            \n                            \n                                    Protected\n                                    Async\n                                changeCoverPhoto\n                            \n                            \n                                    Protected\n                                    Async\n                                changeProfilePhoto\n                            \n                            \n                                    Protected\n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Public\n                                getUser\n                            \n                            \n                                    Protected\n                                    Async\n                                removeReaction\n                            \n                            \n                                    Public\n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            Async\n                            addReaction\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addReaction(res, reactionsDto: ReactionsDto, lang: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/reactions/add')\n                \n            \n\n            \n                \n                    Defined in src/modules/user/user.controller.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reactionsDto\n                                    \n                                                ReactionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lang\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            Async\n                            changeCoverPhoto\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changeCoverPhoto(file, id: string, res, lang: string, userRequestId: string, userRequestRank: string[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(undefined)@Post('/upload/cover/:id')\n                \n            \n\n            \n                \n                    Defined in src/modules/user/user.controller.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lang\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userRequestId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userRequestRank\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            Async\n                            changeProfilePhoto\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changeProfilePhoto(file, id: string, res, lang: string, userRequestId: string, userRequestRank: string[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/upload/photo/:id')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/modules/user/user.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lang\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userRequestId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userRequestRank\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            Async\n                            getAllUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/user/user.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(userId: string, userRequestId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/find/:userId')\n                \n            \n\n            \n                \n                    Defined in src/modules/user/user.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userRequestId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Protected\n                            Async\n                            removeReaction\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeReaction(res, toId: string, ofId: string, lang: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Rank(RanksEnum.ADMINISTRATOR)@Delete('/reactions/remove')\n                \n            \n\n            \n                \n                    Defined in src/modules/user/user.controller.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    toId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ofId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lang\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(updateUserDto: UpdateUserDto, response, lang: string, userRequestId: string, userRequestRank: string[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/update')\n                \n            \n\n            \n                \n                    Defined in src/modules/user/user.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    lang\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userRequestId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userRequestRank\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Body,\n  Res,\n  HttpStatus,\n  Patch,\n  Delete,\n  Post,\n  UseInterceptors,\n  UploadedFile,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { UserService } from './user.service';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { Rank } from '../../decorators/rank.decorator';\nimport { extname } from 'path';\nimport { diskStorage } from 'multer';\nimport { ConfigurationEnum } from '../../keys/configuration.enum';\nimport { ConfigService } from '../../config/config.service';\nimport { ReactionsDto } from './dto/reactions.dto';\nimport { I18nService, I18nLang } from 'nestjs-i18n';\nimport { AuthGuard } from '@nestjs/passport';\nimport { RanksEnum } from '../../keys/ranks.enum';\nimport { GetUser } from '../../decorators/user.decorator';\n\n@UseGuards(AuthGuard())\n@Controller('user')\nexport class UserController {\n  constructor(\n    private readonly userService: UserService,\n    private readonly configService: ConfigService,\n    private readonly i18nService: I18nService,\n  ) {}\n\n  @Get('/find/:userId')\n  public getUser(\n    @Param('userId') userId: string,\n    @GetUser('id') userRequestId: string,\n  ) {\n    return this.userService.getPublicUser(userId, userRequestId);\n  }\n\n  @Patch('/update')\n  public async updateUser(\n    @Body() updateUserDto: UpdateUserDto,\n    @Res() response,\n    @I18nLang() lang: string,\n    @GetUser('id') userRequestId: string,\n    @GetUser('rank') userRequestRank: string[],\n  ) {\n    await this.userService.updateUser(\n      updateUserDto,\n      userRequestId,\n      userRequestRank,\n    );\n    response.status(HttpStatus.OK).json({\n      statusCode: HttpStatus.OK,\n      message: this.i18nService.translate('translations.general.saved', {\n        lang,\n      }),\n    });\n  }\n\n  @Get()\n  protected async getAllUsers() {\n    return await this.userService.getUsers();\n  }\n\n  @Post('/upload/photo/:id')\n  @UseInterceptors(\n    FileInterceptor('photo', {\n      storage: diskStorage({\n        destination: './uploads/profile_photo',\n        // tslint:disable-next-line: variable-name\n        filename: (_req, file, cb) => {\n          const randomName = Array(32)\n            .fill(null)\n            .map(() => Math.round(Math.random() * 16).toString(16))\n            .join('');\n          return cb(null, `${randomName}${extname(file.originalname)}`);\n        },\n      }),\n    }),\n  )\n  protected async changeProfilePhoto(\n    @UploadedFile() file,\n    @Param('id') id: string,\n    @Res() res,\n    @I18nLang() lang: string,\n    @GetUser('id') userRequestId: string,\n    @GetUser('rank') userRequestRank: string[],\n  ) {\n    return await this.userService\n      .updatePhoto(\n        id,\n        `${this.configService.get(\n          ConfigurationEnum.SERVER_HOST,\n        )}/uploads/profile_photo/${file.filename}`,\n        'photo',\n        userRequestId,\n        userRequestRank,\n      )\n      .then(() => {\n        res.status(HttpStatus.OK).json({\n          statusCode: HttpStatus.OK,\n          message: this.i18nService.translate(\n            'translations.user.controller.profile_photo_updated',\n            {\n              lang,\n            },\n          ),\n          path: `${this.configService.get(\n            ConfigurationEnum.SERVER_HOST,\n          )}/uploads/profile_photo/${file.filename}`,\n        });\n      });\n  }\n\n  @UseInterceptors(\n    FileInterceptor('cover', {\n      storage: diskStorage({\n        destination: './uploads/cover_photo',\n        // tslint:disable-next-line: variable-name\n        filename: (_req, file, cb) => {\n          const randomName = Array(32)\n            .fill(null)\n            .map(() => Math.round(Math.random() * 16).toString(16))\n            .join('');\n          return cb(null, `${randomName}${extname(file.originalname)}`);\n        },\n      }),\n    }),\n  )\n  @Post('/upload/cover/:id')\n  protected async changeCoverPhoto(\n    @UploadedFile() file,\n    @Param('id') id: string,\n    @Res() res,\n    @I18nLang() lang: string,\n    @GetUser('id') userRequestId: string,\n    @GetUser('rank') userRequestRank: string[],\n  ) {\n    return await this.userService\n      .updatePhoto(\n        id,\n        `${this.configService.get(\n          ConfigurationEnum.SERVER_HOST,\n        )}/uploads/${id}/cover_photo/${file.filename}`,\n        'cover',\n        userRequestId,\n        userRequestRank,\n      )\n      .then(() => {\n        res.status(HttpStatus.OK).json({\n          statusCode: HttpStatus.OK,\n          message: this.i18nService.translate(\n            'translations.user.controller.cover_photo_updated',\n            {\n              lang,\n            },\n          ),\n          path: `${this.configService.get(\n            ConfigurationEnum.SERVER_HOST,\n          )}/uploads/cover_photo/${file.filename}`,\n        });\n      });\n  }\n\n  @Put('/reactions/add')\n  protected async addReaction(\n    @Res() res,\n    @Body() reactionsDto: ReactionsDto,\n    @I18nLang() lang: string,\n  ) {\n    return await this.userService.addReaction(reactionsDto).then(() => {\n      res.status(HttpStatus.OK).json({\n        statusCode: HttpStatus.OK,\n        message: this.i18nService.translate(\n          'translations.user.controller.reaction_added',\n          {\n            lang,\n          },\n        ),\n      });\n    });\n  }\n\n  @Rank(RanksEnum.ADMINISTRATOR)\n  @Delete('/reactions/remove')\n  protected async removeReaction(\n    @Res() res,\n    @Body('toId') toId: string,\n    @Body('ofId') ofId: string,\n    @I18nLang() lang: string,\n  ) {\n    return await this.userService.removeReaction(ofId, toId).then(() => {\n      res.status(HttpStatus.OK).json({\n        statusCode: HttpStatus.OK,\n        message: this.i18nService.translate(\n          'translations.user.controller.reactions_deleted',\n          {\n            lang,\n          },\n        ),\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserModel.html":{"url":"classes/UserModel.html","title":"class - UserModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/models/user.model.ts\n        \n\n\n            \n                Extends\n            \n            \n                    TimeStamps\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                _id\n                            \n                            \n                                    Public\n                                cover\n                            \n                            \n                                    Public\n                                device\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                ip\n                            \n                            \n                                    Public\n                                market\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                notifications\n                            \n                            \n                                    Public\n                                offer\n                            \n                            \n                                    Public\n                                online\n                            \n                            \n                                    Public\n                                password\n                            \n                            \n                                    Public\n                                photo\n                            \n                            \n                                    Public\n                                premium\n                            \n                            \n                                    Public\n                                rank\n                            \n                            \n                                    Public\n                                reactions\n                            \n                            \n                                    Public\n                                security\n                            \n                            \n                                    Public\n                                sessions\n                            \n                            \n                                    Public\n                                specialty\n                            \n                            \n                                    Public\n                                stats\n                            \n                            \n                                    Public\n                                suspension\n                            \n                            \n                                    Public\n                                tachi\n                            \n                            \n                                    Public\n                                transactions\n                            \n                            \n                                    Public\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            cover\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({default: 'https://api.akatsukiapp.com/uploads/placeholders/cover_photo.jpg', trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:73\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            device\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:79\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Email\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({default: undefined, _id: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ip\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({default: '127.0.0.1', trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:76\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            market\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Market[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @arrayProp({items: Market})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:109\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, minlength: 5, maxlength: 30})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            notifications\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Notifications\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({default: undefined, _id: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:100\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            offer\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({default: 'Hello, welcome to my profile! At the moment I dont have offers available to offer to the public, or I dont have enough range to change this. :)', minlength: 140, maxlength: 1000})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            online\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Online\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({default: undefined, _id: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:103\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Password\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({default: undefined, _id: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            photo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({default: 'https://api.akatsukiapp.com/uploads/placeholders/profile_photo.jpg', trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:67\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            premium\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Membership\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({default: undefined, _id: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:94\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            rank\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Rank\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({default: undefined, _id: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:97\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            reactions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Reactions[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @arrayProp({items: Reactions})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:112\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            security\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Security\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({default: undefined, _id: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:88\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            sessions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Sessions[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @arrayProp({items: Sessions})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:115\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            specialty\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, minlength: 10, maxlength: 100})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stats\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Stats\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({default: undefined, _id: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:85\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            suspension\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Suspension\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({default: undefined, _id: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:91\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            tachi\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, default: 0})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:82\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            transactions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Transaction[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @arrayProp({items: Transaction})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:106\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @prop({required: true, lowercase: true, trim: true, minlength: 5, maxlength: 15})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/models/user.model.ts:42\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { prop, modelOptions, arrayProp, index } from '@typegoose/typegoose';\nimport { TimeStamps } from '@typegoose/typegoose/lib/defaultClasses';\nimport {\n  Market,\n  Suspension,\n  Stats,\n  Security,\n  Membership,\n  Rank,\n  Notifications,\n  Reactions,\n  Sessions,\n  Password,\n  Email,\n  Online,\n  Transaction,\n} from './user.model.data';\n\n@modelOptions({ options: { customName: 'Users' } })\n@index({ email: 1, username: 1, device: 1, ip: 1 }, { unique: true })\nexport class UserModel extends TimeStamps {\n  // tslint:disable-next-line\n  public _id?: string;\n\n  @prop({\n    required: true,\n    minlength: 5,\n    maxlength: 30,\n  })\n  public name: string;\n\n  @prop({ default: new Email(), _id: false })\n  public email: Email;\n\n  @prop({\n    required: true,\n    lowercase: true,\n    trim: true,\n    minlength: 5,\n    maxlength: 15,\n  })\n  public username: string;\n\n  @prop({ default: new Password(), _id: false })\n  public password: Password;\n\n  @prop({\n    default:\n      'Hello, welcome to my profile! At the moment I dont have offers available to offer to the public, or I dont have enough range to change this. :)',\n    minlength: 140,\n    maxlength: 1000,\n  })\n  public offer: string;\n\n  @prop({\n    required: true,\n    minlength: 10,\n    maxlength: 100,\n  })\n  public specialty: string;\n\n  @prop({\n    default:\n      'https://api.akatsukiapp.com/uploads/placeholders/profile_photo.jpg',\n    trim: true,\n  })\n  public photo: string;\n\n  @prop({\n    default: 'https://api.akatsukiapp.com/uploads/placeholders/cover_photo.jpg',\n    trim: true,\n  })\n  public cover: string;\n\n  @prop({ default: '127.0.0.1', trim: true })\n  public ip: string;\n\n  @prop({ required: true, trim: true })\n  public device: string;\n\n  @prop({ required: true, default: 0 })\n  public tachi: number;\n\n  @prop({ default: new Stats(), _id: false })\n  public stats: Stats;\n\n  @prop({ default: new Security(), _id: false })\n  public security: Security;\n\n  @prop({ default: new Suspension(), _id: false })\n  public suspension: Suspension;\n\n  @prop({ default: new Membership(), _id: false })\n  public premium: Membership;\n\n  @prop({ default: new Rank(), _id: false })\n  public rank: Rank;\n\n  @prop({ default: new Notifications(), _id: false })\n  public notifications: Notifications;\n\n  @prop({ default: new Online(), _id: false })\n  public online: Online;\n\n  @arrayProp({ items: Transaction })\n  public transactions: Transaction[];\n\n  @arrayProp({ items: Market })\n  public market: Market[];\n\n  @arrayProp({ items: Reactions })\n  public reactions: Reactions[];\n\n  @arrayProp({ items: Sessions })\n  public sessions: Sessions[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAuthModule->UserModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nUserModule -->\n\nConfigModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ConfigModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { TypegooseModule } from 'nestjs-typegoose';\nimport { UserModel } from './models/user.model';\nimport { AuthModule } from '../../auth/auth.module';\nimport { ConfigModule } from '../../config/config.module';\n\n@Module({\n  imports: [TypegooseModule.forFeature([UserModel]), AuthModule, ConfigModule],\n  providers: [UserService],\n  controllers: [UserController],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/user/user.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                addReaction\n                            \n                            \n                                    Public\n                                    Async\n                                deleteUser\n                            \n                            \n                                    Public\n                                    Async\n                                getPublicUser\n                            \n                            \n                                    Public\n                                    Async\n                                getUsers\n                            \n                            \n                                    Public\n                                    Async\n                                removeReaction\n                            \n                            \n                                    Public\n                                    Async\n                                updateOnlineUser\n                            \n                            \n                                    Public\n                                    Async\n                                updatePhoto\n                            \n                            \n                                    Public\n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: ReturnModelType<>, i18nService: I18nRequestScopeService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/user/user.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                    ReturnModelType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        i18nService\n                                                  \n                                                        \n                                                                    I18nRequestScopeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            addReaction\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addReaction(reactionsDto: ReactionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/user/user.service.ts:304\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    reactionsDto\n                                    \n                                                ReactionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/user/user.service.ts:374\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getPublicUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicUser(userId: string, userRequestId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/user/user.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userRequestId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/user/user.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            removeReaction\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeReaction(ofId: string, toId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/user/user.service.ts:354\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ofId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    toId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateOnlineUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOnlineUser(id: string, online: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/user/user.service.ts:213\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    online\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updatePhoto\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePhoto(userId: string, dir: string, type: string, requetUserId: string, requestUserRank: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/modules/user/user.service.ts:224\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dir\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    requetUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    requestUserRank\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(updateUserDto: UpdateUserDto, requetUserId: string, requestUserRank: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/modules/user/user.service.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    requetUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    requestUserRank\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Logger\n\n                        \n                    \n                    \n                        \n                            Default value : new Logger('User')\n                        \n                    \n                        \n                            \n                                    Defined in src/modules/user/user.service.ts:20\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  UnauthorizedException,\n  ForbiddenException,\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  Logger,\n} from '@nestjs/common';\nimport { InjectModel } from 'nestjs-typegoose';\nimport { UserModel } from './models/user.model';\nimport { ReturnModelType } from '@typegoose/typegoose';\nimport { I18nRequestScopeService } from 'nestjs-i18n';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { ReactionsDto } from './dto/reactions.dto';\nimport { RanksEnum } from 'src/keys/ranks.enum';\n\n@Injectable()\nexport class UserService {\n  private readonly logger: Logger = new Logger('User');\n\n  constructor(\n    @InjectModel(UserModel)\n    private readonly userModel: ReturnModelType,\n    private readonly i18nService: I18nRequestScopeService,\n  ) {}\n\n  public async getPublicUser(\n    userId: string,\n    userRequestId: string,\n  ): Promise {\n    let user: UserModel;\n    try {\n      if (userRequestId === userId) {\n        this.logger.log(\n          `Obtaining private information from the user ${userId} by the user ${userRequestId}.`,\n        );\n        user = await this.userModel\n          .findById(userId)\n          .select([\n            'email.key',\n            'password.key',\n            'offer',\n            'photo',\n            'cover',\n            'stats',\n            'online',\n            'name',\n            'username',\n            'specialty',\n            'reactions',\n            'tachi',\n            'security',\n            'premium',\n            'notifications',\n            'transactions',\n            'market',\n            'sessions',\n            'rank',\n          ]);\n      } else {\n        this.logger.log(\n          `Obtaining public information of the user ${userId} by the user ${userRequestId}.`,\n        );\n        user = await this.userModel\n          .findById(userId)\n          .select([\n            'offer',\n            'photo',\n            'cover',\n            'stats',\n            'online',\n            'name',\n            'username',\n            'specialty',\n            'reactions',\n            'rank',\n          ]);\n      }\n    } catch (error) {\n      this.logger.error(\n        `Could not get user information ${userId} by user ${userRequestId} because the user does not exist.`,\n      );\n      throw new ConflictException(\n        this.i18nService.translate('translations.auth.service.user_not_found'),\n      );\n    }\n\n    if (!user) {\n      this.logger.error(\n        `Could not get user information ${userId} by user ${userRequestId} because the user does not exist.`,\n      );\n      throw new UnauthorizedException(\n        this.i18nService.translate('translations.auth.service.user_not_found'),\n      );\n    }\n    return user;\n  }\n\n  public async getUsers() {\n    this.logger.log(\n      'Obtaining list of all users registered in Akatsuki Project.',\n    );\n    return await this.userModel\n      .find()\n      .select([\n        'offer',\n        'photo',\n        'cover',\n        'stats',\n        'online',\n        'name',\n        'username',\n        'specialty',\n        'reactions',\n      ])\n      .exec();\n  }\n\n  public async updateUser(\n    updateUserDto: UpdateUserDto,\n    requetUserId: string,\n    requestUserRank: string[],\n  ): Promise {\n    this.logger.log(\n      `Updating the user ${updateUserDto.id} by the user ${requetUserId}.`,\n    );\n    let user: UserModel;\n    const { id, key, value } = updateUserDto;\n    const blockKey: string[] = [\n      'email.status',\n      'email.expiration',\n      'email.token',\n      'password.status',\n      'password.expiration',\n      'password.token',\n      'ip',\n      'tachi',\n      'stats',\n      'suspension',\n      'premium',\n      'rank',\n      'transactions',\n      'market',\n      'device',\n      'reactions',\n      'sessions',\n      'createdAt',\n      'updatedAt',\n      '__v',\n    ];\n    try {\n      user = await this.userModel.findById(id);\n    } catch (error) {\n      this.logger.error(\n        `Could not update user ${id} by user ${requetUserId} because the user does not exist.`,\n      );\n      throw new ConflictException(\n        this.i18nService.translate('translations.auth.service.user_not_found'),\n      );\n    }\n\n    if (!user) {\n      this.logger.error(\n        `Could not update user ${id} by user ${requetUserId} because the user does not exist.`,\n      );\n      throw new UnauthorizedException(\n        this.i18nService.translate('translations.auth.service.user_not_found'),\n      );\n    }\n\n    if (blockKey.includes(key)) {\n      this.logger.error(\n        `Could not update user ${id} by user ${requetUserId} because he does not have sufficient permissions to update the ${key} key with the value ${value}.`,\n      );\n      throw new ForbiddenException(\n        this.i18nService.translate(\n          'translations.general.account_no_permission',\n        ),\n      );\n    }\n\n    if (requetUserId !== id) {\n      if (\n        !requestUserRank.includes(RanksEnum.ADMINISTRATOR) &&\n        !requestUserRank.includes(RanksEnum.MODERATOR)\n      ) {\n        this.logger.error(\n          `Could not update user ${id} by user ${requetUserId} because the user who wants to update does not have sufficient permissions on the account.`,\n        );\n        throw new ForbiddenException(\n          this.i18nService.translate(\n            'translations.general.account_no_permission',\n          ),\n        );\n      }\n    }\n\n    return await this.userModel\n      .findByIdAndUpdate(id, {\n        [key]: value,\n      })\n      .catch(() => {\n        this.logger.error(\n          `Could not update user ${id} by user ${requetUserId} due to a system error.`,\n        );\n        throw new BadRequestException(\n          this.i18nService.translate('translations.general.process_failed'),\n        );\n      });\n  }\n\n  public async updateOnlineUser(\n    id: string,\n    online: { online: { online: boolean; mode: number; last: Date } },\n  ): Promise {\n    return await this.userModel.findByIdAndUpdate(id, online).catch(() => {\n      throw new BadRequestException(\n        this.i18nService.translate('translations.general.process_failed'),\n      );\n    });\n  }\n\n  public async updatePhoto(\n    userId: string,\n    dir: string,\n    type: string,\n    requetUserId: string,\n    requestUserRank: string[],\n  ): Promise {\n    this.logger.log(\n      `Updating profile picture of ${userId} by user ${requetUserId}.`,\n    );\n    let user: UserModel;\n    try {\n      user = await this.userModel.findById(userId);\n    } catch (error) {\n      throw new ConflictException(\n        this.i18nService.translate('translations.auth.service.user_not_found'),\n      );\n    }\n\n    if (!user) {\n      this.logger.error(\n        `Could not update user ${userId} by user ${requetUserId} because the user does not exist.`,\n      );\n      throw new UnauthorizedException(\n        this.i18nService.translate('translations.auth.service.user_not_found'),\n      );\n    }\n\n    if (requetUserId !== userId) {\n      if (\n        !requestUserRank.includes(RanksEnum.ADMINISTRATOR) &&\n        !requestUserRank.includes(RanksEnum.MODERATOR)\n      ) {\n        this.logger.error(\n          `Could not update user ${userId} by user ${requetUserId} because the user who wants to update does not have sufficient permissions on the account.`,\n        );\n        throw new ForbiddenException(\n          this.i18nService.translate(\n            'translations.general.account_no_permission',\n          ),\n        );\n      }\n    }\n\n    if (!type) {\n      this.logger.error(\n        `Could not update profile picture of ${userId} by user ${requetUserId} because the type of photo to update was not specified.`,\n      );\n      throw new BadRequestException(\n        this.i18nService.translate('translations.user.service.type_photo'),\n      );\n    }\n\n    if (type === 'photo') {\n      await this.userModel\n        .findByIdAndUpdate(userId, { photo: dir })\n        .catch(() => {\n          this.logger.error(\n            `Could not update profile picture of ${userId} by user ${requetUserId} due to a system error.`,\n          );\n          throw new BadRequestException(\n            this.i18nService.translate('translations.general.process_failed'),\n          );\n        });\n    }\n\n    if (type === 'cover') {\n      await this.userModel\n        .findByIdAndUpdate(userId, { cover: dir })\n        .catch(() => {\n          this.logger.error(\n            `Could not update the cover photo of ${userId} by user ${requetUserId} due to a system error.`,\n          );\n          throw new BadRequestException(\n            this.i18nService.translate('translations.general.process_failed'),\n          );\n        });\n    }\n  }\n\n  public async addReaction(reactionsDto: ReactionsDto): Promise {\n    const { toId, ofId, type } = reactionsDto;\n    this.logger.error(\n      `Adding new reaction to user ${toId} by user ${ofId} with reaction type $ {type}.`,\n    );\n    let user;\n    try {\n      user = await this.userModel.findById(toId);\n    } catch (error) {\n      this.logger.error(\n        `The process of adding reaction to user ${toId} by user ${ofId} could not be completed because the user does not exist.`,\n      );\n      throw new ConflictException(\n        this.i18nService.translate('translations.auth.service.user_not_found'),\n      );\n    }\n\n    if (!user) {\n      this.logger.error(\n        `The process of adding reaction to user ${toId} by user ${ofId} could not be completed because the user does not exist.`,\n      );\n      throw new NotFoundException(\n        this.i18nService.translate('translations.auth.service.user_not_found'),\n      );\n    }\n    if (type === 'upvote') {\n      user.reactions.push({ author: ofId, type: 0 });\n      await user.save().catch(error => {\n        this.logger.error(\n          `Could not add user reaction ${ofId} to user ${toId} due to a system error.`,\n        );\n        throw new BadRequestException(\n          this.i18nService.translate('translations.general.process_failed'),\n        );\n      });\n    }\n\n    if (type === 'downvote') {\n      user.reactions.push({ author: ofId, type: 1 });\n      await user.save().catch(() => {\n        this.logger.error(\n          `Could not add user reaction ${ofId} to user ${toId} due to a system error.`,\n        );\n        throw new BadRequestException(\n          this.i18nService.translate('translations.general.process_failed'),\n        );\n      });\n    }\n  }\n\n  public async removeReaction(ofId: string, toId: string): Promise {\n    this.logger.error(`Eliminando reaccion de ${ofId} por el usuario ${toId}.`);\n    return await this.userModel\n      .findOneAndUpdate(\n        toId,\n        {\n          $pull: { reactions: { author: ofId } },\n        },\n        { new: true },\n      )\n      .catch(() => {\n        this.logger.error(\n          `Could not remove user reaction ${ofId} to user ${toId} due to a system error.`,\n        );\n        throw new BadRequestException(\n          this.i18nService.translate('translations.general.process_failed'),\n        );\n      });\n  }\n\n  public async deleteUser(id: string): Promise {\n    return await this.userModel.findByIdAndDelete(id).catch(() => {\n      this.logger.error(\n        `The user ${id} could not be deleted due to a system error.`,\n      );\n      throw new BadRequestException(\n        this.i18nService.translate('translations.general.process_failed'),\n      );\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/auth/dto/security.dto.ts\n            \n            class\n            SecurityDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/dto/security.update.dto.ts\n            \n            class\n            SecurityCode\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/dto/security.update.dto.ts\n            \n            class\n            SecurityUpdateDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/signin.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/jwt.payload.interface.ts\n            \n            interface\n            IJwtPayload\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/config/config.service.ts\n            \n            class\n            ConfigService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/decorators/rank.decorator.ts\n            \n            variable\n            Rank\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/decorators/user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/gateways/general.gateway.ts\n            \n            class\n            GeneralGateway\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/guards/rank.guard.ts\n            \n            guard\n            RankGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/user/dto/reactions.dto.ts\n            \n            class\n            ReactionsDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/user/models/user.model.data.ts\n            \n            class\n            Email\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/user/models/user.model.data.ts\n            \n            class\n            Market\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/user/models/user.model.data.ts\n            \n            class\n            Membership\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/user/models/user.model.data.ts\n            \n            class\n            Notifications\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/user/models/user.model.data.ts\n            \n            class\n            Online\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/user/models/user.model.data.ts\n            \n            class\n            Password\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/user/models/user.model.data.ts\n            \n            class\n            Rank\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/user/models/user.model.data.ts\n            \n            class\n            Reactions\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/user/models/user.model.data.ts\n            \n            class\n            Security\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/user/models/user.model.data.ts\n            \n            class\n            Sessions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/user/models/user.model.data.ts\n            \n            class\n            Stats\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/modules/user/models/user.model.data.ts\n            \n            class\n            Suspension\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/user/models/user.model.data.ts\n            \n            class\n            Transaction\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/user/models/user.model.data.ts\n            \n            class\n            TransactionBuyer\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/user/models/user.model.ts\n            \n            class\n            UserModel\n            \n                0 %\n                (0/24)\n            \n        \n        \n            \n                \n                src/modules/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/modules/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/11)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nest-modules/mailer : ^1.1.3\n        \n            @nestjs/common : ^6.7.2\n        \n            @nestjs/core : ^6.7.2\n        \n            @nestjs/jwt : ^6.1.1\n        \n            @nestjs/passport : ^6.1.1\n        \n            @nestjs/platform-express : ^6.7.2\n        \n            @nestjs/platform-socket.io : ^6.10.14\n        \n            @nestjs/websockets : ^6.10.14\n        \n            @typegoose/typegoose : ^6.2.1\n        \n            @types/moment-timezone : ^0.5.12\n        \n            bcryptjs : ^2.4.3\n        \n            cache-manager : ^2.10.1\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.11.0\n        \n            compression : ^1.7.4\n        \n            express-rate-limit : ^5.0.0\n        \n            helmet : ^3.21.2\n        \n            jsonwebtoken : ^8.5.1\n        \n            moment : ^2.24.0\n        \n            moment-timezone : ^0.5.27\n        \n            mongoose : ^5.8.7\n        \n            multer : ^1.4.2\n        \n            nestjs-i18n : ^4.1.3\n        \n            nestjs-typegoose : ^7.0.0\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.0\n        \n            rxjs : ^6.5.3\n        \n            ts-token-generator : ^1.0.4\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ConfigurationEnum   (src/.../configuration.enum.ts)\n                        \n                        \n                            RanksEnum   (src/.../ranks.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/keys/configuration.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ConfigurationEnum\n                    \n                \n                        \n                            \n                                 PORT_API\n                            \n                        \n                        \n                            \n                                Value : PORT_API\n                            \n                        \n                        \n                            \n                                 TOKEN_SECRET\n                            \n                        \n                        \n                            \n                                Value : TOKEN_SECRET\n                            \n                        \n                        \n                            \n                                 EMAIL_HOST\n                            \n                        \n                        \n                            \n                                Value : EMAIL_HOST\n                            \n                        \n                        \n                            \n                                 EMAIL_FROM\n                            \n                        \n                        \n                            \n                                Value : EMAIL_FROM\n                            \n                        \n                        \n                            \n                                 DB_HOST\n                            \n                        \n                        \n                            \n                                Value : DB_HOST\n                            \n                        \n                        \n                            \n                                 SERVER_HOST\n                            \n                        \n                        \n                            \n                                Value : SERVER_HOST\n                            \n                        \n            \n        \n\n    src/keys/ranks.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        RanksEnum\n                    \n                \n                        \n                            \n                                 ADMINISTRATOR\n                            \n                        \n                        \n                            \n                                Value : ADMINISTRATOR\n                            \n                        \n                        \n                            \n                                 MODERATOR\n                            \n                        \n                        \n                            \n                                Value : MODERATOR\n                            \n                        \n                        \n                            \n                                 PREMIUM\n                            \n                        \n                        \n                            \n                                Value : PREMIUM\n                            \n                        \n                        \n                            \n                                 SELLER\n                            \n                        \n                        \n                            \n                                Value : SELLER\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nAkatsuki Project Global API REST test by the Kodachi team.\nThese tests are generated with the Postman client program and are intended to test and verify that the API works correctly and that the client can use it safely, easily and without any problems.\nImportant notes\n\nThe tests must be executed with the authorization of the administrator and all events, problems or actions carried out with the API must be informed.\nThe API can only be tested by assistant administrators and some moderators, to avoid unwanted data leakage.\n\nReporting any important problem is recommended so that it can be corrected by high-ranking administrators and prevent the end customer from being affected by damaging the platform. Please inform all of this to high-ranking administrators or make a \"Failure Report\" in the API repository.\nStart the API\n- $ yarn start: 'With this command the API is initialized locally and without changes in real time.'\n- $ yarn start:dev_: 'With this command the API is initialized locally and with changes in real time.'\n- $ yarn format: 'With this command the entire API code is formatted to maintain a standard and order in the code.'Important notes about new Commits.\n\nThe commit will not be accepted if it has a corrupt code or the code has a bug that was not corrected.\nThe commit will not be accepted if the general file structure of the API is changed.\nThe commit will be accepted after being reviewed by the administrators and tested by the same on a local PC before it can be released to the public and added to the master branch.\nAny questions, problems or comments, inform the general administrator \"@Sawako__\".\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nAuthModule->UserModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nConfigModule\n\nConfigModule\n\nUserModule -->\n\nConfigModule->UserModule\n\n\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nConfigService \n\nConfigService \n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    23 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetUser   (src/.../user.decorator.ts)\n                        \n                        \n                            Rank   (src/.../rank.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/decorators/user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator((key, req) =>\n  key ? req.user[key] : req.user,\n)\n                        \n                    \n\n\n            \n        \n\n    src/decorators/rank.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Rank\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...rank: string[]) => SetMetadata('rank', rank)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
